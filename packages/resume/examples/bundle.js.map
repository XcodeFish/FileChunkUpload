{"version":3,"file":"bundle.js","mappings":"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8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,OAAO,GAAG,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,UAAU;AACzD,4BAA4B,MAAM,EAAE,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;;AAEsH;AAC/J;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvSA;;;GAGG;AAEH,aAAa;AACa;AAE1B,aAAa;AACqB;;;;;;;;;;;;;;;;ACHkB;AAEpD;;;GAGG;AACI,MAAM,iBAAiB;IAQ5B;;;;OAIG;IACH,YAAY,sBAA8B,CAAC,EAAE,MAAgB;QAZ7D,4CAA4C;QACpC,oBAAe,GAA6B,IAAI,GAAG,EAAE,CAAC;QAY5D,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACI,oBAAoB,CAAC,MAAc;QACxC,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC;IACrD,CAAC;IAED;;;;OAIG;IACI,mBAAmB,CAAC,MAAc;QACvC,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACtD,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC;IACtD,CAAC;IAED;;;;OAIG;IACI,oBAAoB,CAAC,MAAc,EAAE,UAAkB;QAC5D,eAAe;QACf,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;YACtC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;QAC9C,CAAC;QAED,YAAY;QACZ,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC;QAElD,IAAI,CAAC,QAAQ,CAAC,iBAAiB,MAAM,QAAQ,UAAU,GAAG,CAAC,CAAC;IAC9D,CAAC;IAED;;;;OAIG;IACI,mBAAmB,CAAC,MAAc,EAAE,UAAkB;QAC3D,aAAa;QACb,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;QAErD,IAAI,CAAC,QAAQ,CAAC,gBAAgB,MAAM,QAAQ,UAAU,GAAG,CAAC,CAAC;IAC7D,CAAC;IAED;;;;OAIG;IACI,iBAAiB,CAAC,MAAc,EAAE,UAAkB;QACzD,aAAa;QACb,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;QAErD,IAAI,CAAC,QAAQ,CAAC,gBAAgB,MAAM,QAAQ,UAAU,GAAG,CAAC,CAAC;IAC7D,CAAC;IAED;;;;OAIG;IACI,iBAAiB,CAAC,MAAc,EAAE,UAAkB;QACzD,aAAa;QACb,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;QAErD,IAAI,CAAC,QAAQ,CAAC,gBAAgB,MAAM,QAAQ,UAAU,GAAG,CAAC,CAAC;IAC7D,CAAC;IAED;;;OAGG;IACI,iBAAiB,CAAC,MAAc;QACrC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,MAAM,GAAG,CAAC,CAAC;IAC/C,CAAC;IAED;;;;OAIG;IACI,eAAe,CAAC,MAAc;QACnC,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACtD,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,OAAO,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAClC,CAAC;IAED;;;;;OAKG;IACI,aAAa,CAAC,MAAc,EAAE,UAAkB;QACrD,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC;IACpE,CAAC;IAED;;;;;;;OAOG;IACI,eAAe,CACpB,aAA6B,EAC7B,UAAkB,EAClB,MAAmB,EACnB,KAAc;QAEd,aAAa;QACb,MAAM,aAAa,GAAG,CAAC,GAAG,aAAa,CAAC,CAAC;QACzC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEvB,WAAW;QACX,MAAM,aAAa,GAAG,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,KAAK,UAAU,CAAC,CAAC;QAE9E,IAAI,aAAa,EAAE,CAAC;YAClB,WAAW;YACX,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC;YAC9B,aAAa,CAAC,WAAW,GAAG,GAAG,CAAC;YAEhC,0BAA0B;YAC1B,IAAI,MAAM,KAAK,+CAAW,CAAC,MAAM,IAAI,KAAK,EAAE,CAAC;gBAC3C,aAAa,CAAC,SAAS,GAAG,KAAK,CAAC;gBAChC,aAAa,CAAC,UAAU,IAAI,CAAC,CAAC;YAChC,CAAC;YAED,iBAAiB;YACjB,IAAI,MAAM,KAAK,+CAAW,CAAC,OAAO,EAAE,CAAC;gBACnC,aAAa,CAAC,SAAS,GAAG,SAAS,CAAC;YACtC,CAAC;QACH,CAAC;aAAM,CAAC;YACN,uBAAuB;YACvB,aAAa,CAAC,IAAI,CAAC;gBACjB,KAAK,EAAE,UAAU;gBACjB,MAAM;gBACN,UAAU,EAAE,MAAM,KAAK,+CAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjD,WAAW,EAAE,GAAG;gBAChB,SAAS,EAAE,MAAM,KAAK,+CAAW,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;aAC7D,CAAC,CAAC;QACL,CAAC;QAED,OAAO,aAAa,CAAC;IACvB,CAAC;IAED;;OAEG;IACI,OAAO;QACZ,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;QAC7B,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACK,QAAQ,CAAC,OAAe,EAAE,IAAU;QAC1C,IAAI,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;YACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uBAAuB,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC;CACF;;;;;;;;;;;;;;;;;;;;;;;;;AC7MD;;;GAGG;AAEH,OAAO;AACyD;AACN;AACM;AACL;AAUrB;AAEtC,OAAO;AACyD;AAC1B;AAGtC;;;;GAIG;AACI,MAAM,SAAS,GAAG,CAAC,OAAsC,EAAE,EAAE;IAClE,OAAO;QACL,IAAI,EAAE,WAAW;QACjB,OAAO,EAAE,OAAO;QAChB,OAAO,EAAE,CAAC,QAAa,EAAE,IAAS,EAAE,EAAE;YACpC,MAAM,YAAY,GAAG;gBACnB,mBAAmB,EAAE,CAAC,EAAE,QAAQ;gBAChC,eAAe,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,WAAW;gBACjD,GAAG,OAAO;gBACV,GAAG,IAAI;aACR,CAAC;YACF,MAAM,cAAc,GAAG,IAAI,yEAAoB,CAAC,YAAY,CAAC,CAAC;YAE9D,UAAU;YACV,cAAc,CAAC,eAAe,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YAEtD,OAAO;YACP,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAS,EAAE,EAAE;gBACvD,aAAa;gBACb,MAAM,WAAW,GAAG,MAAM,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gBAC9D,IAAI,WAAW,EAAE,CAAC;oBAChB,gBAAgB;oBAChB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;oBAEhC,aAAa;oBACb,MAAM,KAAK,GAAG,MAAM,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBAE3D,WAAW;oBACX,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,EAAE;wBAC5C,MAAM,EAAE,IAAI,CAAC,EAAE;wBACf,QAAQ,EAAE,IAAI,CAAC,IAAI;wBACnB,QAAQ,EAAE,WAAW,CAAC,QAAQ,CAAC,OAAO;wBACtC,cAAc,EAAE,WAAW,CAAC,cAAc,CAAC,MAAM;wBACjD,WAAW,EAAE,WAAW,CAAC,WAAW;wBACpC,QAAQ,EAAE,KAAK,CAAC,QAAQ;wBACxB,MAAM,EAAE,KAAK,CAAC,MAAM;wBACpB,OAAO,EAAE,KAAK,CAAC,OAAO;wBACtB,SAAS,EAAE,KAAK,CAAC,SAAS;wBAC1B,sBAAsB,EAAE,KAAK,CAAC,sBAAsB;qBACrD,CAAC,CAAC;gBACL,CAAC;gBACD,OAAO,IAAI,CAAC;YACd,CAAC,CAAC,CAAC;YAEH,WAAW;YACX,QAAQ,CAAC,KAAK,CAAC,iBAAiB,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAW,EAAE,EAAE;gBAC9D,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;gBAChC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;oBACtB,YAAY;oBACZ,MAAM,aAAa,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;oBACpF,MAAM,CAAC,cAAc,GAAG,aAAa,CAAC;oBAEtC,SAAS;oBACT,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC;wBACjD,0BAA0B;wBAC1B,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;wBAE1B,WAAW;wBACX,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,0BAA0B,EAAE;4BACrD,MAAM,EAAE,IAAI,CAAC,EAAE;4BACf,YAAY,EAAE,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE,CAAC;4BAC1D,mBAAmB,EAAE,YAAY,CAAC,mBAAmB;yBACtD,CAAC,CAAC;oBACL,CAAC;gBACH,CAAC;gBACD,OAAO,MAAM,CAAC;YAChB,CAAC,CAAC,CAAC;YAEH,aAAa;YACb,QAAQ,CAAC,KAAK,CAAC,kBAAkB,EAAE,QAAQ,CAAC,KAAK,EAAE,MAAW,EAAE,EAAE;gBAChE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;gBACpC,WAAW;gBACX,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;gBAEzD,aAAa;gBACb,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,oBAAoB,EAAE;oBAC/C,MAAM,EAAE,IAAI,CAAC,EAAE;oBACf,UAAU;oBACV,YAAY,EAAE,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE,CAAC;iBAC3D,CAAC,CAAC;gBAEH,OAAO,MAAM,CAAC;YAChB,CAAC,CAAC,CAAC;YAEH,aAAa;YACb,QAAQ,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAW,EAAE,EAAE;gBAC7D,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;gBACpC,kDAAkD;gBAClD,MAAM,cAAc,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;gBAE9D,SAAS;gBACT,MAAM,KAAK,GAAG,MAAM,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAE3D,WAAW;gBACX,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,uBAAuB,EAAE;oBAClD,MAAM,EAAE,IAAI,CAAC,EAAE;oBACf,UAAU;oBACV,eAAe,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,QAAQ;oBAC7C,QAAQ,EAAE,KAAK,CAAC,QAAQ;oBACxB,KAAK,EAAE,KAAK,CAAC,KAAK;oBAClB,QAAQ,EAAE,KAAK,CAAC,QAAQ;iBACzB,CAAC,CAAC;gBAEH,OAAO,MAAM,CAAC;YAChB,CAAC,CAAC,CAAC;YAEH,aAAa;YACb,QAAQ,CAAC,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,KAAK,EAAE,KAAU,EAAE,EAAE;gBACzD,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC;gBACrD,SAAS;gBACT,cAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;gBAE1E,WAAW;gBACX,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,qBAAqB,EAAE;oBAChD,MAAM,EAAE,IAAI,CAAC,EAAE;oBACf,UAAU;oBACV,KAAK,EAAE,SAAS,EAAE,OAAO,IAAI,MAAM;iBACpC,CAAC,CAAC;gBAEH,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;YAEH,WAAW;YACX,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAW,EAAE,EAAE;gBACxD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC;gBACxB,OAAO;gBACP,MAAM,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAE7C,WAAW;gBACX,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,wBAAwB,EAAE;oBACnD,MAAM,EAAE,IAAI,CAAC,EAAE;oBACf,QAAQ,EAAE,IAAI,CAAC,IAAI;iBACpB,CAAC,CAAC;gBAEH,OAAO,MAAM,CAAC;YAChB,CAAC,CAAC,CAAC;YAEH,WAAW;YACX,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,EAAE,IAAS,EAAE,EAAE;gBACnD,IAAI,CAAC,IAAI;oBAAE,OAAO,IAAI,CAAC;gBAEvB,IAAI,CAAC;oBACH,4BAA4B;oBAC5B,MAAM,aAAa,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBACrE,KAAK,MAAM,KAAK,IAAI,aAAa,EAAE,CAAC;wBAClC,IAAI,KAAK,CAAC,MAAM,KAAK,+CAAW,CAAC,SAAS,EAAE,CAAC;4BAC3C,MAAM,cAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,KAAK,EAAE,+CAAW,CAAC,MAAM,CAAC,CAAC;wBACnF,CAAC;oBACH,CAAC;oBAED,SAAS;oBACT,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,EAAE;wBAC1C,MAAM,EAAE,IAAI,CAAC,EAAE;wBACf,QAAQ,EAAE,IAAI,CAAC,IAAI;qBACpB,CAAC,CAAC;gBACL,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;gBAClC,CAAC;gBAED,OAAO,IAAI,CAAC;YACd,CAAC,CAAC,CAAC;YAEH,aAAa;YACb,QAAQ,CAAC,cAAc,GAAG,KAAK,EAAE,MAAc,EAAE,EAAE;gBACjD,OAAO,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC/C,CAAC,CAAC;YAEF,aAAa;YACb,QAAQ,CAAC,gBAAgB,GAAG,KAAK,EAAE,MAAc,EAAE,EAAE;gBACnD,OAAO,cAAc,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;YACjD,CAAC,CAAC;YAEF,oCAAoC;YACpC,QAAQ,CAAC,cAAc,GAAG,cAAc,CAAC;QAC3C,CAAC;QAED,OAAO;QACP,OAAO,EAAE,CAAC,QAAa,EAAE,EAAE;YACzB,IAAI,QAAQ,CAAC,cAAc,EAAE,CAAC;gBAC5B,QAAQ,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;gBAClC,OAAO,QAAQ,CAAC,cAAc,CAAC;gBAC/B,OAAO,QAAQ,CAAC,cAAc,CAAC;gBAC/B,OAAO,QAAQ,CAAC,gBAAgB,CAAC;YACnC,CAAC;QACH,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;;;;;;;;;;;;;;;;ACnNgE;AAElE;;;GAGG;AACI,MAAM,kBAAkB;IAI7B;;;OAGG;IACH,YAAY,MAAgB;QAC1B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;;;OAOG;IACI,iBAAiB,CACtB,MAAc,EACd,QAAgB,EAChB,SAAiB,EACjB,cAAwB;QAExB,SAAS;QACT,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,CAAC;QAEpD,6BAA6B;QAC7B,IAAI,aAAa,GAAG,CAAC,CAAC;QAEtB,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YAClC,sBAAsB;YACtB,IAAI,UAAU,KAAK,WAAW,GAAG,CAAC,EAAE,CAAC;gBACnC,MAAM,aAAa,GAAG,QAAQ,GAAG,SAAS,IAAI,SAAS,CAAC;gBACxD,aAAa,IAAI,aAAa,CAAC;YACjC,CAAC;iBAAM,CAAC;gBACN,aAAa,IAAI,SAAS,CAAC;YAC7B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,oBAAoB;QACpB,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,aAAa,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAE5E,IAAI,CAAC,QAAQ,CAAC,cAAc,MAAM,KAAK,OAAO,MAAM,aAAa,IAAI,QAAQ,KAAK,CAAC,CAAC;QAEpF,OAAO;YACL,MAAM,EAAE,aAAa;YACrB,KAAK,EAAE,QAAQ;YACf,OAAO;YACP,KAAK,EAAE,CAAC;YACR,WAAW,EAAE,CAAC;YACd,aAAa,EAAE,CAAC;YAChB,WAAW;YACX,cAAc,EAAE,cAAc,CAAC,MAAM;SACtC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACI,cAAc,CAAC,aAA6B,EAAE,WAAmB;QACtE,UAAU;QACV,MAAM,KAAK,GAAG;YACZ,KAAK,EAAE,WAAW;YAClB,QAAQ,EAAE,CAAC;YACX,MAAM,EAAE,CAAC;YACT,OAAO,EAAE,CAAC;YACV,SAAS,EAAE,CAAC;YACZ,QAAQ,EAAE,CAAC;SACZ,CAAC;QAEF,yBAAyB;QACzB,IAAI,CAAC,aAAa,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACjD,KAAK,CAAC,OAAO,GAAG,WAAW,CAAC;YAC5B,OAAO,KAAK,CAAC;QACf,CAAC;QAED,YAAY;QACZ,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC5B,QAAQ,KAAK,CAAC,MAAM,EAAE,CAAC;gBACrB,KAAK,+CAAW,CAAC,OAAO;oBACtB,KAAK,CAAC,QAAQ,EAAE,CAAC;oBACjB,MAAM;gBACR,KAAK,+CAAW,CAAC,MAAM;oBACrB,KAAK,CAAC,MAAM,EAAE,CAAC;oBACf,MAAM;gBACR,KAAK,+CAAW,CAAC,SAAS;oBACxB,KAAK,CAAC,SAAS,EAAE,CAAC;oBAClB,MAAM;gBACR,KAAK,+CAAW,CAAC,OAAO,CAAC;gBACzB,KAAK,+CAAW,CAAC,MAAM,CAAC;gBACxB;oBACE,KAAK,CAAC,OAAO,EAAE,CAAC;oBAChB,MAAM;YACV,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,YAAY;QACZ,KAAK,CAAC,QAAQ,GAAG,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,QAAQ,GAAG,WAAW,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAExF,iCAAiC;QACjC,MAAM,eAAe,GAAG,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC;QACxF,IAAI,eAAe,GAAG,WAAW,EAAE,CAAC;YAClC,KAAK,CAAC,OAAO,IAAI,WAAW,GAAG,eAAe,CAAC;QACjD,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;;;OAMG;IACI,qBAAqB,CAC1B,WAAyB,EACzB,WAAmB,EACnB,SAAiB;QAEjB,2BAA2B;QAC3B,IAAI,CAAC,WAAW,IAAI,WAAW,IAAI,CAAC,IAAI,WAAW,CAAC,QAAQ,IAAI,GAAG,EAAE,CAAC;YACpE,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,UAAU;QACV,MAAM,eAAe,GAAG,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC;QACjE,IAAI,eAAe,IAAI,CAAC,EAAE,CAAC;YACzB,OAAO,CAAC,CAAC;QACX,CAAC;QAED,2BAA2B;QAC3B,MAAM,cAAc,GAAG,eAAe,GAAG,SAAS,CAAC;QAEnD,YAAY;QACZ,MAAM,oBAAoB,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,CAAC;QAErE,IAAI,CAAC,QAAQ,CACX,WAAW,oBAAoB,UAAU,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAC1E,CAAC;QAEF,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAC,cAAsB;QACvC,IAAI,cAAc,IAAI,IAAI,GAAG,IAAI,EAAE,CAAC;YAClC,OAAO,GAAG,CAAC,cAAc,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;QAC/D,CAAC;aAAM,IAAI,cAAc,IAAI,IAAI,EAAE,CAAC;YAClC,OAAO,GAAG,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;QACtD,CAAC;aAAM,CAAC;YACN,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,CAAC;QAC7C,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,QAAQ,CAAC,OAAe,EAAE,IAAU;QAC1C,IAAI,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;YACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wBAAwB,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;QAC7D,CAAC;IACH,CAAC;CACF;;;;;;;;;;;;;;;;;;;;;AC3LD;;;GAGG;AAYiC;AAEQ;AAEc;AACC;AAM1C;AAC+C;AAEhE;;;GAGG;AACI,MAAM,oBAAoB;IA4B/B;;;OAGG;IACH,YAAY,UAAwC,EAAE;QACpD,SAAS;QACT,IAAI,CAAC,OAAO,GAAG;YACb,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,EAAE;YAC9B,OAAO,EAAE,OAAO,CAAC,OAAO,KAAK,KAAK;YAClC,cAAc,EAAE,OAAO,CAAC,cAAc,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,OAAO;YAC1E,mBAAmB,EAAE,OAAO,CAAC,mBAAmB,IAAI,CAAC,EAAE,WAAW;YAClE,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;YACpD,eAAe,EAAE,OAAO,CAAC,eAAe,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,WAAW;YAC5E,MAAM,EAAE,OAAO,CAAC,MAAM;SACvB,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;QACpC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QAElC,UAAU;QACV,IAAI,CAAC,cAAc,GAAG,IAAI,oDAAc,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAE/D,YAAY;QACZ,IAAI,CAAC,iBAAiB,GAAG,IAAI,mEAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAE9F,YAAY;QACZ,IAAI,CAAC,oBAAoB,GAAG,IAAI,yEAAoB,EAAE,CAAC;QAEvD,UAAU;QACV,IAAI,CAAC,kBAAkB,GAAG,IAAI,oEAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE9D,WAAW;QACX,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAED;;;OAGG;IACI,OAAO;QACZ,eAAe;QACf,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACjC,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;QAChC,CAAC;QAED,YAAY;QACZ,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;QAEjC,YAAY;QACZ,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;QAE9B,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IAClC,CAAC;IAED;;;OAGG;IACI,eAAe,CAAC,OAAsB;QAC3C,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACI,UAAU,CAAC,OAAgB;QAChC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACI,oBAAoB,CAAC,MAAc;QACxC,OAAO,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;IAC7D,CAAC;IAED;;;;OAIG;IACI,mBAAmB,CAAC,MAAc;QACvC,OAAO,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;IAC5D,CAAC;IAED;;;;OAIG;IACI,oBAAoB,CAAC,MAAc,EAAE,UAAkB;QAC5D,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IAClE,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,mBAAmB,CAAC,MAAc,EAAE,UAAkB;QACjE,YAAY;QACZ,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAE/D,SAAS;QACT,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IACrD,CAAC;IAED;;;;;OAKG;IACI,iBAAiB,CAAC,MAAc,EAAE,UAAkB,EAAE,KAAc;QACzE,YAAY;QACZ,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAE7D,SAAS;QACT,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,UAAU,EAAE,+CAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACxE,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,iBAAiB,CAC5B,MAAc,EACd,UAAkB,EAClB,MAAmB,EACnB,KAAc;QAEd,IAAI,CAAC;YACH,YAAY;YACZ,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC/D,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,IAAI,CAAC,QAAQ,CAAC,wBAAwB,MAAM,QAAQ,UAAU,GAAG,CAAC,CAAC;gBACnE,OAAO;YACT,CAAC;YAED,YAAY;YACZ,MAAM,aAAa,GAAG,KAA6B,CAAC;YACpD,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;gBACjC,aAAa,CAAC,aAAa,GAAG,EAAE,CAAC;YACnC,CAAC;YAED,SAAS;YACT,aAAa,CAAC,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAClE,aAAa,CAAC,aAAa,EAC3B,UAAU,EACV,MAAM,EACN,KAAK,CACN,CAAC;YAEF,SAAS;YACT,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAEvC,WAAW;YACX,MAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YAEjE,mBAAmB;YACnB,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,aAAa,CAAC,aAAa,CAAC,CAAC;YAE9D,IAAI,CAAC,QAAQ,CAAC,eAAe,MAAM,QAAQ,UAAU,QAAQ,MAAM,GAAG,CAAC,CAAC;QAC1E,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,gBAAgB,MAAM,QAAQ,UAAU,GAAG,EAAE,KAAK,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,cAAc,CAAC,QAAmB;QAC7C,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,IAAI,CAAC,QAAQ,CAAC,oBAAoB,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC;YAClD,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,CAAC;YACH,aAAa;YACb,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YACpE,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,IAAI,CAAC,QAAQ,CAAC,eAAe,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC;gBAC7C,OAAO,IAAI,CAAC;YACd,CAAC;YAED,SAAS;YACT,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,CACpE,KAA6B,EAC7B,QAAQ,CACT,CAAC;YACF,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;gBAC5B,IAAI,CAAC,QAAQ,CACX,gBAAgB,QAAQ,CAAC,EAAE,MAAM,gBAAgB,CAAC,MAAM,EAAE,EAC1D,gBAAgB,CAAC,OAAO,CACzB,CAAC;gBACF,OAAO,IAAI,CAAC;YACd,CAAC;YAED,YAAY;YACZ,MAAM,aAAa,GAAG,KAA6B,CAAC;YACpD,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;gBACjC,aAAa,CAAC,aAAa,GAAG,EAAE,CAAC;YACnC,CAAC;YAED,SAAS;YACT,aAAa,CAAC,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC;YAErE,WAAW;YACX,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAEtD,sBAAsB;YACtB,MAAM,oBAAoB,GAAG,aAAa,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBACnE,IAAI,KAAK,CAAC,MAAM,KAAK,+CAAW,CAAC,SAAS,EAAE,CAAC;oBAC3C,OAAO,EAAE,GAAG,KAAK,EAAE,MAAM,EAAE,+CAAW,CAAC,MAAM,EAAE,CAAC;gBAClD,CAAC;gBACD,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;YAEH,aAAa,CAAC,aAAa,GAAG,oBAAoB,CAAC;YAEnD,gBAAgB;YAChB,aAAa,CAAC,MAAM,GAAG,oEAAY,CAAC,SAAS,CAAC;YAC9C,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAEvC,WAAW;YACX,MAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;YAEtE,UAAU;YACV,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE,EAAE,oBAAoB,CAAC,CAAC;YAE5D,IAAI,CAAC,OAAO,CAAC,kBAAkB,QAAQ,CAAC,EAAE,GAAG,EAAE;gBAC7C,cAAc,EAAE,aAAa,CAAC,cAAc,CAAC,MAAM;gBACnD,WAAW,EAAE,aAAa,CAAC,WAAW;gBACtC,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,OAAO;aACzC,CAAC,CAAC;YAEH,OAAO,aAAa,CAAC;QACvB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,gBAAgB,QAAQ,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;YACrD,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;;;;;OAOG;IACI,KAAK,CAAC,eAAe,CAC1B,QAAmB,EACnB,WAA6B,EAC7B,cAAwB,EACxB,SAAuB,oEAAY,CAAC,SAAS,EAC7C,QAA0B;QAE1B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,OAAO;QACT,CAAC;QAED,IAAI,CAAC;YACH,eAAe;YACf,MAAM,KAAK,GACR,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,CAA0B,IAAI,EAAE,CAAC;YAE1F,SAAS;YACT,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,IAAI,EAAE,CAAC;YAEhD,kBAAkB;YAClB,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAClD,QAAQ,CAAC,EAAE,EACX,QAAQ,CAAC,IAAI,EACb,WAAW,CAAC,SAAS,EACrB,cAAc,CACf,CAAC;YACJ,CAAC;YAED,SAAS;YACT,MAAM,YAAY,GAAyB;gBACzC,GAAG,KAAK;gBACR,MAAM,EAAE,QAAQ,CAAC,EAAE;gBACnB,QAAQ,EAAE,QAAQ,CAAC,IAAI;gBACvB,QAAQ,EAAE,QAAQ,CAAC,IAAI;gBACvB,YAAY,EAAE,QAAQ,CAAC,YAAY;gBACnC,cAAc;gBACd,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,WAAW,CAAC,SAAS,CAAC;gBAC7D,SAAS,EAAE,WAAW,CAAC,SAAS;gBAChC,QAAQ;gBACR,MAAM;gBACN,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE;gBACvB,aAAa;gBACb,mBAAmB,EAAE,IAAI,CAAC,OAAO,CAAC,mBAAmB;aACtD,CAAC;YAEF,UAAU;YACV,MAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;YAErE,UAAU;YACV,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;YAErD,IAAI,CAAC,QAAQ,CAAC,eAAe,QAAQ,CAAC,EAAE,GAAG,EAAE;gBAC3C,QAAQ,EAAE,QAAQ,CAAC,OAAO;gBAC1B,cAAc,EAAE,cAAc,CAAC,MAAM;gBACrC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,WAAW,CAAC,SAAS,CAAC;aAC9D,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,gBAAgB,QAAQ,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,mBAAmB,CAAC,MAAc,EAAE,UAAkB;QACjE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,OAAO;QACT,CAAC;QAED,IAAI,CAAC;YACH,SAAS;YACT,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC/D,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,IAAI,CAAC,QAAQ,CAAC,sBAAsB,MAAM,QAAQ,UAAU,GAAG,CAAC,CAAC;gBACjE,OAAO;YACT,CAAC;YAED,iBAAiB;YACjB,MAAM,cAAc,GAAG,KAAK,CAAC,cAAc,IAAI,EAAE,CAAC;YAClD,IAAI,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;gBACxC,OAAO,CAAC,qBAAqB;YAC/B,CAAC;YAED,aAAa;YACb,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAEhC,SAAS;YACT,MAAM,aAAa,GAAG,KAA6B,CAAC;YACpD,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;gBACjC,aAAa,CAAC,aAAa,GAAG,EAAE,CAAC;YACnC,CAAC;YAED,YAAY;YACZ,aAAa,CAAC,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAClE,aAAa,CAAC,aAAa,EAC3B,UAAU,EACV,+CAAW,CAAC,OAAO,CACpB,CAAC;YAEF,OAAO;YACP,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CACxD,MAAM,EACL,KAA8B,CAAC,QAAQ,EACvC,KAA8B,CAAC,SAAS,EACzC,cAAc,CACf,CAAC;YAEF,OAAO;YACP,aAAa,CAAC,cAAc,GAAG,cAAc,CAAC;YAC9C,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAClC,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAEvC,WAAW;YACX,MAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YAEjE,UAAU;YACV,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,aAAa,CAAC,aAAa,CAAC,CAAC;YAE9D,IAAI,CAAC,QAAQ,CAAC,eAAe,MAAM,QAAQ,UAAU,GAAG,EAAE;gBACxD,QAAQ,EAAE,QAAQ,CAAC,OAAO;gBAC1B,cAAc,EAAE,cAAc,CAAC,MAAM;gBACrC,WAAW,EAAE,IAAI,CAAC,IAAI,CACnB,KAA8B,CAAC,QAAQ,GAAI,KAA8B,CAAC,SAAS,CACrF;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,gBAAgB,MAAM,QAAQ,UAAU,GAAG,EAAE,KAAK,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,cAAc,CAAC,MAAc;QACxC,IAAI,CAAC;YACH,gBAAgB;YAChB,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAEjD,aAAa;YACb,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAE7C,IAAI,CAAC,OAAO,CAAC,kBAAkB,MAAM,GAAG,CAAC,CAAC;QAC5C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,kBAAkB,MAAM,GAAG,EAAE,KAAK,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,gBAAgB,CAAC,MAAc,EAAE,WAAmB;QAC/D,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,kBAAkB;YAClB,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1D,CAAC;QAED,IAAI,CAAC;YACH,SAAS;YACT,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC/D,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;gBACpC,8BAA8B;gBAC9B,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YAC1D,CAAC;YAED,WAAW;YACX,MAAM,cAAc,GAAG,KAAK,CAAC,cAAc,CAAC;YAE5C,0BAA0B;YAC1B,MAAM,aAAa,GAAG,EAAE,CAAC;YACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC;gBACrC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;oBAChC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACxB,CAAC;YACH,CAAC;YAED,IAAI,CAAC,QAAQ,CAAC,eAAe,MAAM,GAAG,EAAE;gBACtC,aAAa,EAAE,aAAa,CAAC,MAAM;gBACnC,cAAc,EAAE,cAAc,CAAC,MAAM;gBACrC,WAAW;aACZ,CAAC,CAAC;YAEH,OAAO,aAAa,CAAC;QACvB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,iBAAiB,MAAM,GAAG,EAAE,KAAK,CAAC,CAAC;YACjD,YAAY;YACZ,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1D,CAAC;IACH,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,gBAAgB,CAAC,MAAc;QAC1C,IAAI,CAAC;YACH,SAAS;YACT,MAAM,KAAK,GAAG,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,CAAyB,CAAC;YACzF,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;gBACnC,OAAO,EAAE,CAAC;YACZ,CAAC;YAED,OAAO,KAAK,CAAC,aAAa,CAAC;QAC7B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,gBAAgB,MAAM,GAAG,EAAE,KAAK,CAAC,CAAC;YAChD,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAED;;;;OAIG;IACI,iBAAiB,CAAC,MAAqB;QAC5C,eAAe;QACf,MAAM,aAAa,GAAG;YACpB,GAAG,MAAM;YACT,OAAO,EAAE;gBACP,GAAG,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC;aAC1B;SACe,CAAC;QAEnB,OAAO,aAAa,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACK,kBAAkB,CAAC,IAAkB;QAC3C,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,cAAc,CAAC,MAAc;QASxC,IAAI,CAAC;YACH,SAAS;YACT,MAAM,KAAK,GAAG,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,CAAyB,CAAC;YACzF,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,OAAO;oBACL,KAAK,EAAE,CAAC;oBACR,QAAQ,EAAE,CAAC;oBACX,MAAM,EAAE,CAAC;oBACT,OAAO,EAAE,CAAC;oBACV,SAAS,EAAE,CAAC;oBACZ,QAAQ,EAAE,CAAC;iBACZ,CAAC;YACJ,CAAC;YAED,SAAS;YACT,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,IAAI,EAAE,CAAC;YAEhD,SAAS;YACT,OAAO,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,aAAa,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;QAClF,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,kBAAkB,MAAM,GAAG,EAAE,KAAK,CAAC,CAAC;YAClD,OAAO;gBACL,KAAK,EAAE,CAAC;gBACR,QAAQ,EAAE,CAAC;gBACX,MAAM,EAAE,CAAC;gBACT,OAAO,EAAE,CAAC;gBACV,SAAS,EAAE,CAAC;gBACZ,QAAQ,EAAE,CAAC;aACZ,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,mBAAmB,CAAC,MAAc,EAAE,aAA6B;QACvE,IAAI,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC;YACvC,IAAI,CAAC;gBACH,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YAC5D,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YACpC,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACK,eAAe;QACrB,WAAW;QACX,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACnC,CAAC;QAED,UAAU;QACV,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,GAAG,EAAE;YACnC,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC5B,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,kBAAkB;QAC9B,IAAI,CAAC;YACH,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;YAC7D,MAAM,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;YAC1D,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,QAAQ,CAAC,OAAe,EAAE,IAAU;QAC1C,IAAI,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;YACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;QACzD,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,OAAO,CAAC,OAAe,EAAE,IAAU;QACzC,IAAI,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC;YACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;QACxD,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,QAAQ,CAAC,OAAe,EAAE,KAAU;QAC1C,IAAI,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;YACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,OAAO,EAAE,EAAE,KAAK,CAAC,CAAC;QAC1D,CAAC;IACH,CAAC;CACF;;;;;;;;;;;;;;;AChqBD;;;GAGG;AACH,IAAY,WAWX;AAXD,WAAY,WAAW;IACrB,WAAW;IACX,kCAAmB;IACnB,WAAW;IACX,sCAAuB;IACvB,WAAW;IACX,kCAAmB;IACnB,WAAW;IACX,gCAAiB;IACjB,UAAU;IACV,gCAAiB;AACnB,CAAC,EAXW,WAAW,KAAX,WAAW,QAWtB;;;;;;;;;;;;;;;AClBD;;;GAGG;AACI,MAAM,oBAAoB;IAC/B;;;;;OAKG;IACI,mBAAmB,CACxB,KAA2B,EAC3B,QAAwE;QAExE,cAAc;QACd,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO;gBACL,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,eAAe;gBACvB,WAAW,EAAE,KAAK;aACnB,CAAC;QACJ,CAAC;QAED,eAAe;QACf,IAAI,KAAK,CAAC,MAAM,KAAK,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjC,OAAO;gBACL,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,kBAAkB;gBAC1B,WAAW,EAAE,KAAK;gBAClB,OAAO,EAAE;oBACP,UAAU,EAAE,KAAK,CAAC,MAAM;oBACxB,QAAQ,EAAE,QAAQ,CAAC,EAAE;iBACtB;aACF,CAAC;QACJ,CAAC;QAED,wBAAwB;QACxB,MAAM,eAAe,GAAG,KAAK,CAAC,QAAQ,KAAK,QAAQ,CAAC,IAAI,CAAC;QAEzD,mBAAmB;QACnB,IAAI,KAAK,CAAC,QAAQ,KAAK,QAAQ,CAAC,IAAI,EAAE,CAAC;YACrC,OAAO;gBACL,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,oBAAoB;gBAC5B,WAAW,EAAE,KAAK;gBAClB,OAAO,EAAE;oBACP,YAAY,EAAE,KAAK,CAAC,QAAQ;oBAC5B,UAAU,EAAE,QAAQ,CAAC,IAAI;iBAC1B;aACF,CAAC;QACJ,CAAC;QAED,6BAA6B;QAC7B,IAAI,KAAK,CAAC,YAAY,KAAK,QAAQ,CAAC,YAAY,EAAE,CAAC;YACjD,OAAO;gBACL,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,wBAAwB;gBAChC,WAAW,EAAE,KAAK;gBAClB,OAAO,EAAE;oBACP,oBAAoB,EAAE,KAAK,CAAC,YAAY;oBACxC,kBAAkB,EAAE,QAAQ,CAAC,YAAY;oBACzC,cAAc,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;iBACrE;aACF,CAAC;QACJ,CAAC;QAED,aAAa;QACb,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC;YAClE,OAAO;gBACL,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,qBAAqB;gBAC7B,WAAW,EAAE,IAAI;aAClB,CAAC;QACJ,CAAC;QAED,aAAa;QACb,IAAI,KAAK,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;YACpC,+BAA+B;YAC/B,IAAK,KAAK,CAAC,MAAc,CAAC,SAAS,KAAK,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;gBAClE,OAAO;oBACL,KAAK,EAAE,KAAK;oBACZ,MAAM,EAAE,qBAAqB;oBAC7B,WAAW,EAAE,KAAK;oBAClB,OAAO,EAAE;wBACP,iBAAiB,EAAG,KAAK,CAAC,MAAc,CAAC,SAAS;wBAClD,eAAe,EAAE,QAAQ,CAAC,MAAM,CAAC,SAAS;qBAC3C;iBACF,CAAC;YACJ,CAAC;YAED,4BAA4B;YAC5B,IAAK,KAAK,CAAC,MAAc,CAAC,MAAM,KAAK,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;gBAC5D,OAAO;oBACL,KAAK,EAAE,KAAK;oBACZ,MAAM,EAAE,qBAAqB;oBAC7B,WAAW,EAAE,KAAK;oBAClB,OAAO,EAAE;wBACP,cAAc,EAAG,KAAK,CAAC,MAAc,CAAC,MAAM;wBAC5C,YAAY,EAAE,QAAQ,CAAC,MAAM,CAAC,MAAM;qBACrC;iBACF,CAAC;YACJ,CAAC;QACH,CAAC;QAED,aAAa;QACb,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,OAAO;QACrD,MAAM,SAAS,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC;QAEjD,IAAI,SAAS,GAAG,YAAY,EAAE,CAAC;YAC7B,OAAO;gBACL,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,gBAAgB;gBACxB,WAAW,EAAE,KAAK;gBAClB,OAAO,EAAE;oBACP,GAAG,EAAE,SAAS;oBACd,MAAM,EAAE,YAAY;iBACrB;aACF,CAAC;QACJ,CAAC;QAED,mBAAmB;QACnB,IAAI,eAAe,EAAE,CAAC;YACpB,OAAO;gBACL,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,mBAAmB;gBAC3B,OAAO,EAAE;oBACP,YAAY,EAAE,KAAK,CAAC,QAAQ;oBAC5B,UAAU,EAAE,QAAQ,CAAC,IAAI;iBAC1B;aACF,CAAC;QACJ,CAAC;QAED,OAAO;QACP,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IACzB,CAAC;CACF;;;;;;;;;;;;;;;;;AClJD;;;GAGG;AAEH;;;;;GAKG;AACI,KAAK,UAAU,YAAY,CAChC,IAAU,EACV,SAAwC,MAAM,EAC9C,gBAAgD;IAEhD,SAAS;IACT,IAAI,CAAC,CAAC,IAAI,YAAY,IAAI,CAAC,EAAE,CAAC;QAC5B,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,SAAS;IACT,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC;IAE/B,aAAa;IACb,IAAI,YAAY,GAAG,IAAI,EAAE,CAAC;QACxB,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;IAChE,CAAC;IAED,WAAW;IACX,IAAI,MAAM,KAAK,QAAQ,IAAI,gBAAgB,EAAE,CAAC;QAC5C,IAAI,CAAC;YACH,MAAM,cAAc,GAAG,MAAM,gBAAgB,CAAC,IAAI,CAAC,CAAC;YACpD,OAAO;gBACL,cAAc;gBACd,YAAY;gBACZ,MAAM,EAAE,QAAQ;aACjB,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;YACtC,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;QAChE,CAAC;IACH,CAAC;IAED,qCAAqC;IACrC,IAAI,OAAO,iBAAiB,KAAK,WAAW,EAAE,CAAC;QAC7C,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YAClD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,aAAa;YACb,MAAM,iBAAiB,GAAG,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;YAChE,MAAM,gBAAgB,GAAG,MAAM,CAAC,WAAW,CACzC,IAAI,iBAAiB,CAAC,iBAAsC,CAAC,CAC9D,CAAC;YACF,MAAM,cAAc,GAAG,MAAM,IAAI,QAAQ,CAAC,gBAAgB,CAAC,CAAC,IAAI,EAAE,CAAC;YAEnE,kBAAkB;YAClB,IAAI,cAAc,CAAC,IAAI,IAAI,YAAY,EAAE,CAAC;gBACxC,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;YAChE,CAAC;YAED,OAAO;gBACL,cAAc;gBACd,YAAY;gBACZ,MAAM;aACP,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,aAAa,EAAE,KAAK,CAAC,CAAC;YAC5C,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;QAChE,CAAC;IACH,CAAC;IAED,QAAQ;IACR,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;AAChE,CAAC;AAED;;;;;GAKG;AACI,KAAK,UAAU,cAAc,CAClC,cAAoB,EACpB,MAAc,EACd,kBAAkD;IAElD,SAAS;IACT,IAAI,CAAC,CAAC,cAAc,YAAY,IAAI,CAAC,EAAE,CAAC;QACtC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,aAAa;IACb,IAAI,MAAM,KAAK,MAAM,EAAE,CAAC;QACtB,OAAO,cAAc,CAAC;IACxB,CAAC;IAED,YAAY;IACZ,IAAI,MAAM,KAAK,QAAQ,IAAI,kBAAkB,EAAE,CAAC;QAC9C,IAAI,CAAC;YACH,OAAO,MAAM,kBAAkB,CAAC,cAAc,CAAC,CAAC;QAClD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAED,6BAA6B;IAC7B,IAAI,OAAO,mBAAmB,KAAK,WAAW,IAAI,CAAC,MAAM,KAAK,MAAM,IAAI,MAAM,KAAK,SAAS,CAAC,EAAE,CAAC;QAC9F,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,MAAM,cAAc,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YAC5D,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,MAAM,kBAAkB,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,mBAAmB,CAAC,MAAa,CAAC,CAAC,CAAC;YACtF,OAAO,MAAM,IAAI,QAAQ,CAAC,kBAAkB,CAAC,CAAC,IAAI,EAAE,CAAC;QACvD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,GAAG,MAAM,MAAM,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,IAAI,KAAK,CAAC,SAAS,MAAM,MAAM,CAAC,CAAC;QACzC,CAAC;IACH,CAAC;IAED,WAAW;IACX,MAAM,IAAI,KAAK,CAAC,kBAAkB,MAAM,EAAE,CAAC,CAAC;AAC9C,CAAC;AAED;;;GAGG;AACI,SAAS,sBAAsB;IACpC,OAAO,OAAO,iBAAiB,KAAK,WAAW,IAAI,OAAO,mBAAmB,KAAK,WAAW,CAAC;AAChG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClID;;GAEG;AAEqD;AACL;AACgB;AACyB;AACvC;AACa;AACyB;AACzD;;;;;;;;;;;;;;;ACTlC;;;GAGG;AACI,MAAM,gBAAgB;IAQ3B;;;OAGG;IACH,YAAY,UAA2B,EAAE;QAPjC,OAAE,GAAuB,IAAI,CAAC;QAQpC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,qBAAqB,CAAC;QACtD,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,SAAS,CAAC;QAChD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC;QACzC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACK,KAAK,CAAC,MAAM;QAClB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,qBAAqB;YACrB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;gBACxB,MAAM,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;gBACnC,OAAO;YACT,CAAC;YAED,MAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAE1D,OAAO,CAAC,OAAO,GAAG,GAAG,EAAE;gBACrB,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;gBAC/B,MAAM,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACtC,CAAC,CAAC;YAEF,OAAO,CAAC,SAAS,GAAG,GAAG,EAAE;gBACvB,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;gBACzB,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC;YAEF,OAAO,CAAC,eAAe,GAAG,GAAG,EAAE;gBAC7B,MAAM,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;gBAE1B,SAAS;gBACT,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;oBAClD,MAAM,KAAK,GAAG,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;oBACtE,WAAW;oBACX,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;oBACzD,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,WAAW,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;oBAC/D,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;gBACvD,CAAC;YACH,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,IAAI,CAAI,GAAW,EAAE,KAAQ,EAAE,UAAmB;QACtD,MAAM,IAAI,CAAC,KAAK,CAAC;QAEjB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;gBACb,MAAM,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC7B,OAAO;YACT,CAAC;YAED,IAAI,CAAC;gBACH,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,WAAW,CAAC,CAAC;gBACvE,MAAM,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAEtD,OAAO;gBACP,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC/C,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBACvB,MAAM,IAAI,GAAG;oBACX,EAAE,EAAE,WAAW;oBACf,GAAG,EAAE,WAAW;oBAChB,KAAK;oBACL,SAAS,EAAE,GAAG;oBACd,SAAS,EAAE,GAAG;oBACd,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC,SAAS;oBACnD,MAAM,EAAE,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,gCAAgC;oBACnE,IAAI,EAAE,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,2BAA2B;iBAC7D,CAAC;gBAEF,KAAK;gBACL,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAEhC,OAAO,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC;gBACpC,OAAO,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YACtD,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,GAAG,CAAI,GAAW;QACtB,MAAM,IAAI,CAAC,KAAK,CAAC;QAEjB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;gBACb,MAAM,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC7B,OAAO;YACT,CAAC;YAED,IAAI,CAAC;gBACH,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,UAAU,CAAC,CAAC;gBACtE,MAAM,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACtD,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC/C,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;gBAEvC,OAAO,CAAC,SAAS,GAAG,GAAG,EAAE;oBACvB,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;oBAE9B,SAAS;oBACT,IAAI,CAAC,MAAM,EAAE,CAAC;wBACZ,OAAO,CAAC,IAAI,CAAC,CAAC;wBACd,OAAO;oBACT,CAAC;oBAED,SAAS;oBACT,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;wBACpD,aAAa;wBACb,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE;4BAC1B,SAAS;wBACX,CAAC,CAAC,CAAC;wBACH,OAAO,CAAC,IAAI,CAAC,CAAC;wBACd,OAAO;oBACT,CAAC;oBAED,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACxB,CAAC,CAAC;gBAEF,OAAO,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YACtD,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,MAAM,CAAC,GAAW;QACtB,MAAM,IAAI,CAAC,KAAK,CAAC;QAEjB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;gBACb,MAAM,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC7B,OAAO;YACT,CAAC;YAED,IAAI,CAAC;gBACH,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,WAAW,CAAC,CAAC;gBACvE,MAAM,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACtD,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC/C,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;gBAE1C,OAAO,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC;gBACpC,OAAO,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YACtD,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,GAAG,CAAC,GAAW;QACnB,IAAI,CAAC;YACH,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAClC,OAAO,KAAK,KAAK,IAAI,CAAC;QACxB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,KAAK;QACT,MAAM,IAAI,CAAC,KAAK,CAAC;QAEjB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;gBACb,MAAM,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC7B,OAAO;YACT,CAAC;YAED,IAAI,CAAC;gBACH,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,WAAW,CAAC,CAAC;gBACvE,MAAM,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACtD,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;gBAE9B,OAAO,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC;gBACpC,OAAO,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YACtD,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,IAAI;QACR,MAAM,IAAI,CAAC,KAAK,CAAC;QAEjB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;gBACb,MAAM,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC7B,OAAO;YACT,CAAC;YAED,IAAI,CAAC;gBACH,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,UAAU,CAAC,CAAC;gBACtE,MAAM,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACtD,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;gBAEnC,OAAO,CAAC,SAAS,GAAG,GAAG,EAAE;oBACvB,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,MAAuB,CAAC;yBACxD,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;yBAC1B,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;yBAC7C,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;oBAEtC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACnB,CAAC,CAAC;gBAEF,OAAO,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;YACvD,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,QAAQ;QACZ,MAAM,IAAI,CAAC,KAAK,CAAC;QAEjB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;gBACb,MAAM,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC7B,OAAO;YACT,CAAC;YAED,IAAI,CAAC;gBACH,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,UAAU,CAAC,CAAC;gBACtE,MAAM,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACtD,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;gBAE/B,OAAO,CAAC,SAAS,GAAG,GAAG,EAAE;oBACvB,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;oBAC/B,IAAI,SAAS,GAAG,CAAC,CAAC;oBAClB,IAAI,UAAU,GAAG,CAAC,CAAC;oBACnB,MAAM,OAAO,GAAG,IAAI,GAAG,EAAU,CAAC;oBAElC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;wBACrB,6BAA6B;wBAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;wBACzC,SAAS,IAAI,QAAQ,CAAC;wBAEtB,SAAS;wBACT,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;4BAC1B,UAAU,EAAE,CAAC;wBACf,CAAC;wBAED,SAAS;wBACT,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;4BAChB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBAC3B,CAAC;oBACH,CAAC,CAAC,CAAC;oBAEH,OAAO,CAAC;wBACN,SAAS;wBACT,UAAU;wBACV,SAAS,EAAE,OAAO,CAAC,IAAI;qBACxB,CAAC,CAAC;gBACL,CAAC,CAAC;gBAEF,OAAO,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;YAC1D,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY;QAChB,MAAM,IAAI,CAAC,KAAK,CAAC;QAEjB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;gBACb,MAAM,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC7B,OAAO;YACT,CAAC;YAED,IAAI,CAAC;gBACH,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,WAAW,CAAC,CAAC;gBACvE,MAAM,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACtD,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;gBAEnC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAEvB,OAAO,CAAC,SAAS,GAAG,KAAK,CAAC,EAAE;oBAC1B,MAAM,MAAM,GAAI,KAAK,CAAC,MAAqB,CAAC,MAAM,CAAC;oBAEnD,IAAI,MAAM,EAAE,CAAC;wBACX,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC;wBAE1B,SAAS;wBACT,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,GAAG,GAAG,EAAE,CAAC;4BACzC,MAAM,CAAC,MAAM,EAAE,CAAC;wBAClB,CAAC;wBAED,MAAM,CAAC,QAAQ,EAAE,CAAC;oBACpB,CAAC;yBAAM,CAAC;wBACN,WAAW;wBACX,OAAO,EAAE,CAAC;oBACZ,CAAC;gBACH,CAAC,CAAC;gBAEF,OAAO,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;YACxD,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,OAAO,OAAO,SAAS,KAAK,WAAW,CAAC;IAC1C,CAAC;IAED;;;;OAIG;IACK,gBAAgB,CAAC,GAAW;QAClC,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;YACtD,OAAO,GAAG,IAAI,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC;QACnC,CAAC;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;;;OAIG;IACK,YAAY,CAAC,GAAW;QAC9B,IAAI,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;YACrD,OAAO,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;;;OAIG;IACK,YAAY,CAAC,GAAQ;QAC3B,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS;YAAE,OAAO,CAAC,CAAC;QAEhD,oBAAoB;QACpB,IAAI,GAAG,YAAY,IAAI,IAAI,GAAG,YAAY,IAAI,EAAE,CAAC;YAC/C,OAAO,GAAG,CAAC,IAAI,CAAC;QAClB,CAAC;QAED,wBAAwB;QACxB,IAAI,GAAG,YAAY,WAAW,EAAE,CAAC;YAC/B,OAAO,GAAG,CAAC,UAAU,CAAC;QACxB,CAAC;QAED,IACE,GAAG,YAAY,SAAS;YACxB,GAAG,YAAY,UAAU;YACzB,GAAG,YAAY,iBAAiB;YAChC,GAAG,YAAY,UAAU;YACzB,GAAG,YAAY,WAAW;YAC1B,GAAG,YAAY,UAAU;YACzB,GAAG,YAAY,WAAW;YAC1B,GAAG,YAAY,YAAY;YAC3B,GAAG,YAAY,YAAY,EAC3B,CAAC;YACD,OAAO,GAAG,CAAC,UAAU,CAAC;QACxB,CAAC;QAED,uBAAuB;QACvB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;YAC5B,gCAAgC;YAChC,IAAI,OAAO,WAAW,KAAK,WAAW,EAAE,CAAC;gBACvC,OAAO,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;YAC9C,CAAC;YACD,mBAAmB;YACnB,2BAA2B;YAC3B,IAAI,IAAI,GAAG,CAAC,CAAC;YACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACpC,MAAM,IAAI,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC/B,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;oBACjB,IAAI,IAAI,CAAC,CAAC,CAAC,UAAU;gBACvB,CAAC;qBAAM,IAAI,IAAI,IAAI,KAAK,EAAE,CAAC;oBACzB,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ;gBACrB,CAAC;qBAAM,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,EAAE,CAAC;oBAC5C,cAAc;oBACd,IAAI,IAAI,CAAC,CAAC;oBACV,CAAC,EAAE,CAAC,CAAC,YAAY;gBACnB,CAAC;qBAAM,CAAC;oBACN,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ;gBACrB,CAAC;YACH,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;QAED,aAAa;QACb,IAAI,OAAO,GAAG,KAAK,QAAQ;YAAE,OAAO,CAAC,CAAC;QACtC,IAAI,OAAO,GAAG,KAAK,SAAS;YAAE,OAAO,CAAC,CAAC;QAEvC,OAAO;QACP,IAAI,GAAG,YAAY,IAAI;YAAE,OAAO,CAAC,CAAC;QAElC,YAAY;QACZ,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;YAC5B,IAAI,IAAI,GAAG,CAAC,CAAC;YAEb,KAAK,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;gBACtB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;oBACnD,OAAO;oBACP,IAAI,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;oBACvB,OAAO;oBACP,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBACtC,CAAC;YACH,CAAC;YAED,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,CAAC,CAAC;IACX,CAAC;CACF;;;;;;;;;;;;;;;;;ACvdD;;;GAGG;AAC8C;AAQjD;;GAEG;AACH,IAAY,eAIX;AAJD,WAAY,eAAe;IACzB,sCAAmB;IACnB,oCAAiB;IACjB,sCAAmB;AACrB,CAAC,EAJW,eAAe,KAAf,eAAe,QAI1B;AAaD;;GAEG;AACI,MAAM,eAAe;IAI1B;;OAEG;IACH,YAAY,MAAsB;QAN1B,cAAS,GAAkC,IAAI,GAAG,EAAE,CAAC;QAO3D,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI,0DAAa,EAAE,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACH,gBAAgB,CAAC,OAAe,EAAE,QAA0B;QAC1D,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;YAChC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,OAAO,YAAY,CAAC,CAAC;QACjD,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,OAAO,OAAO,CAAC,CAAC;IAC7C,CAAC;IAED;;;OAGG;IACH,iBAAiB,CAAC,SAA2C;QAC3D,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAE,EAAE;YAC3D,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;YACnC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;gBACpB,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YAC3C,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,UAAU,EAAE,CAAC,CAAC;YAC5C,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,oBAAoB;QAClB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACH,WAAW,CAAC,OAAe;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,OAAO,CAAC,EAAe,EAAE,UAAkB,EAAE,UAAkB;QACnE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,UAAU,QAAQ,UAAU,EAAE,CAAC,CAAC;QAE7D,IAAI,UAAU,IAAI,UAAU,EAAE,CAAC;YAC7B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACnC,OAAO;gBACL,MAAM,EAAE,eAAe,CAAC,OAAO;gBAC/B,WAAW,EAAE,UAAU;gBACvB,SAAS,EAAE,UAAU;gBACrB,OAAO,EAAE,UAAU;aACpB,CAAC;QACJ,CAAC;QAED,IAAI,CAAC;YACH,YAAY;YACZ,MAAM,eAAe,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC,MAAM,CACxD,OAAO,CAAC,EAAE,CAAC,OAAO,GAAG,UAAU,IAAI,OAAO,IAAI,UAAU,CACzD,CAAC;YAEF,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACjC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC9B,OAAO;oBACL,MAAM,EAAE,eAAe,CAAC,OAAO;oBAC/B,WAAW,EAAE,UAAU;oBACvB,SAAS,EAAE,UAAU;oBACrB,OAAO,EAAE,WAAW;iBACrB,CAAC;YACJ,CAAC;YAED,YAAY;YACZ,KAAK,MAAM,OAAO,IAAI,eAAe,EAAE,CAAC;gBACtC,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBAC7C,IAAI,QAAQ,EAAE,CAAC;oBACb,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,OAAO,MAAM,CAAC,CAAC;oBACxC,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC;gBACrB,CAAC;YACH,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,UAAU,QAAQ,UAAU,EAAE,CAAC,CAAC;YAC1D,OAAO;gBACL,MAAM,EAAE,eAAe,CAAC,OAAO;gBAC/B,WAAW,EAAE,UAAU;gBACvB,SAAS,EAAE,UAAU;gBACrB,OAAO,EAAE,MAAM;aAChB,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAS,KAAe,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,CAAC;YAC7D,OAAO;gBACL,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,WAAW,EAAE,UAAU;gBACvB,SAAS,EAAE,UAAU;gBACrB,KAAK,EAAE,KAAc;gBACrB,OAAO,EAAE,QAAS,KAAe,CAAC,OAAO,EAAE;aAC5C,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,iBAAiB,CACf,EAAe,EACf,SAAiB,EACjB,UAAoC,EAAE,OAAO,EAAE,IAAI,EAAE;QAErD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,SAAS,EAAE,CAAC,CAAC;QACzC,OAAO,EAAE,CAAC,iBAAiB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAED;;;OAGG;IACH,WAAW,CACT,KAAqB,EACrB,SAAiB,EACjB,OAA0B,EAC1B,UAA8B,EAAE,MAAM,EAAE,KAAK,EAAE;QAE/C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,SAAS,EAAE,CAAC,CAAC;QACvC,OAAO,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACxD,CAAC;CACF;;;;;;;;;;;;;;;;ACrLgD;AAGjD;;;GAGG;AACI,MAAM,eAAe;IAK1B;;;OAGG;IACH,YAAY,MAAsB;QAP1B,gBAAW,GAAmC,IAAI,GAAG,EAAE,CAAC;QAQ9D,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI,0DAAa,EAAE,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,MAAc,EAAE,QAAgB;QAC9C,cAAc;QACd,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAEtE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;YAC3B,MAAM;YACN,QAAQ,EAAE,aAAa;YACvB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACtB,CAAC,CAAC;QAEH,kBAAkB;QAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,aAAa,EAAE,CAAC,CAAC;IACtE,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,MAAc;QAC5B,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,QAAQ,IAAI,eAAe,CAAC,gBAAgB,CAAC;IACpF,CAAC;IAED;;;;;OAKG;IACH,qBAAqB,CAAC,QAA8B;QAClD,QAAQ;QACR,IAAI,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAE9B,qBAAqB;QACrB,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;YACpB,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC3D,KAAK,GAAG,YAAY,CAAC;QACvB,CAAC;QAED,aAAa;QACb,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,mBAAmB,GAAG,CAAC,GAAG,GAAG,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;QAElF,oBAAoB;QACpB,IAAI,mBAAmB,GAAG,CAAC,EAAE,CAAC;YAC5B,gBAAgB;YAChB,KAAK,IAAI,CAAC,CAAC;QACb,CAAC;aAAM,IAAI,mBAAmB,GAAG,CAAC,EAAE,CAAC;YACnC,aAAa;YACb,KAAK,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5D,CAAC;QAED,cAAc;QACd,IAAI,QAAQ,CAAC,WAAW,GAAG,EAAE,EAAE,CAAC;YAC9B,KAAK,IAAI,CAAC,CAAC;QACb,CAAC;QAED,OAAO;QACP,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED;;;;OAIG;IACH,mBAAmB,CAAC,KAA6B;QAC/C,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC9B,MAAM,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAChD,OAAO,SAAS,GAAG,SAAS,CAAC,CAAC,YAAY;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,mBAAmB,CAAC,KAA6B,EAAE,SAAS,GAAG,CAAC;QAC9D,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,CAAC;IAC7E,CAAC;IAED;;;;OAIG;IACH,gBAAgB,CAAC,QAA8B;QAC7C,OAAO;YACL,GAAG,QAAQ;YACX,WAAW,EAAE,QAAQ,CAAC,WAAW,GAAG,CAAC;YACrC,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE;SACzB,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,mBAAmB,CACjB,KAA6B,EAC7B,SAAS,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;QAEpC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YACzB,YAAY;YACZ,MAAM,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;YACzD,OAAO,eAAe,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;QACpE,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,kBAAkB;QAChB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;IAC/C,CAAC;IAED;;;OAGG;IACH,kBAAkB,CAAC,IAAyB;QAC1C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAClB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;;AApJuB,gCAAgB,GAAG,CAAC,CAAC;;;;;;;;;;;;;;;;;;ACNM;AACJ;AAQjD;;GAEG;AACH,IAAY,iBAKX;AALD,WAAY,iBAAiB;IAC3B,wCAAmB;IACnB,wDAAmC;IACnC,0DAAqC;IACrC,sDAAiC;AACnC,CAAC,EALW,iBAAiB,KAAjB,iBAAiB,QAK5B;AAED;;;GAGG;AACI,MAAM,YAAY;IAOvB;;OAEG;IACH,YACE,UAAmC,EAAE,EACrC,MAAsB,EACtB,eAAiC;QAT3B,mBAAc,GAAuD,IAAI,GAAG,EAAE,CAAC;QAC/E,sBAAiB,GAAiC,IAAI,GAAG,EAAE,CAAC;QAUlE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI,0DAAa,EAAE,CAAC;QAC5C,IAAI,CAAC,eAAe,GAAG,eAAe,IAAI,IAAI,8DAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE3E,WAAW;QACX,IAAI,CAAC,yBAAyB,EAAE,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,mBAAmB,CAAC,KAAoB;QACtC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;YAClC,OAAO,KAAK,CAAC;QACf,CAAC;QAED,MAAM,EAAE,cAAc,EAAE,qBAAqB,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC;QAErF,gCAAgC;QAChC,IAAI,CAAC,cAAc,IAAI,KAAK,CAAC,UAAU,KAAK,SAAS,EAAE,CAAC;YACtD,IAAI,KAAK,CAAC,UAAU,IAAI,qBAAqB,EAAE,CAAC;gBAC9C,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,OAAO,EAAE;oBAC3C,UAAU,EAAE,KAAK,CAAC,UAAU;oBAC5B,SAAS,EAAE,qBAAqB;iBACjC,CAAC,CAAC;gBACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;gBACrE,OAAO,IAAI,CAAC;YACd,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC;QAED,yBAAyB;QACzB,IAAI,cAAc,IAAI,KAAK,CAAC,SAAS,IAAI,cAAc,GAAG,qBAAqB,EAAE,CAAC;YAChF,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,OAAO,EAAE;gBAC3C,SAAS,EAAE,KAAK,CAAC,SAAS;gBAC1B,OAAO,EAAE,cAAc;gBACvB,SAAS,EAAE,qBAAqB;aACjC,CAAC,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,YAAY,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE,CAClF,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,cAAc,CAClB,KAA6B,EAC7B,mBAA2B,GAAG;QAE9B,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,eAAe,EAAE;YACnD,SAAS,EAAE,KAAK,CAAC,MAAM;YACvB,gBAAgB;SACjB,CAAC,CAAC;QAEH,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,eAAe,IAAI,iBAAiB,CAAC;YACpF,IAAI,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAEtD,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,QAAQ,SAAS,CAAC,CAAC;gBAC/C,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;YAC7D,CAAC;YAED,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC;YAC9B,CAAC;YAED,UAAU;YACV,MAAM,gBAAgB,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAEzE,SAAS;YACT,MAAM,iBAAiB,GAAG,gBAAgB,GAAG,gBAAgB,CAAC;YAE9D,WAAW;YACX,MAAM,aAAa,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;YAExC,mBAAmB;YACnB,IAAI,YAAY,GAAG,CAAC,CAAC;YACrB,MAAM,aAAa,GAA2B,EAAE,CAAC;YAEjD,KAAK,MAAM,IAAI,IAAI,aAAa,EAAE,CAAC;gBACjC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzB,YAAY,IAAI,IAAI,CAAC,IAAI,CAAC;gBAE1B,IAAI,YAAY,IAAI,iBAAiB,EAAE,CAAC;oBACtC,MAAM;gBACR,CAAC;YACH,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,cAAc,aAAa,CAAC,MAAM,aAAa,IAAI,CAAC,UAAU,CAC5D,YAAY,CACb,EAAE,CACJ,CAAC;YAEF,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,gBAAgB,EAAE;gBACpD,YAAY,EAAE,aAAa,CAAC,MAAM;gBAClC,YAAY;gBACZ,iBAAiB;aAClB,CAAC,CAAC;YAEH,OAAO,aAAa,CAAC;QACvB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAY,KAAe,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,CAAC;YAEhE,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,cAAc,EAAE;gBAClD,KAAK;aACN,CAAC,CAAC;YAEH,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,EAAE,CAAC,KAAwB,EAAE,QAA6B;QACxD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YACpC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACrC,CAAC;QACD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,KAAwB,EAAE,QAA6B;QACzD,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACjD,IAAI,SAAS,EAAE,CAAC;YACd,MAAM,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1C,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE,CAAC;gBACjB,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,YAAY,CAAC,KAAwB,EAAE,IAAS;QACtD,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACjD,IAAI,SAAS,EAAE,CAAC;YACd,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAC3B,IAAI,CAAC;oBACH,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACjB,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,cAAe,KAAe,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,CAAC;gBACrE,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACK,yBAAyB;QAC/B,YAAY;QACZ,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,KAA6B,EAAE,EAAE;YAC9E,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC9B,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;gBAChE,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;gBAChE,OAAO,SAAS,GAAG,SAAS,CAAC,CAAC,YAAY;YAC5C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,SAAS;QACT,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAA6B,EAAE,EAAE;YACrE,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,SAAS;QACT,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,KAA6B,EAAE,EAAE;YACtE,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,uBAAuB,CAAC,IAAY,EAAE,QAAyB;QAC7D,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAED;;OAEG;IACK,UAAU,CAAC,KAAa;QAC9B,IAAI,KAAK,GAAG,IAAI;YAAE,OAAO,GAAG,KAAK,GAAG,CAAC;QACrC,IAAI,KAAK,GAAG,IAAI,GAAG,IAAI;YAAE,OAAO,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;QACjE,IAAI,KAAK,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI;YAAE,OAAO,GAAG,CAAC,KAAK,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;QACjF,OAAO,GAAG,CAAC,KAAK,GAAG,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IAC1D,CAAC;CACF;;;;;;;;;;;;;;;;AC1PD;;;;;GAKG;AAKH;;GAEG;AACH,IAAY,gBASX;AATD,WAAY,gBAAgB;IAC1B,iCAAa;IACb,+BAAW;IACX,qCAAiB;IACjB,iCAAa;IACb,mCAAe;IACf,iCAAa;IACb,uCAAmB;IACnB,+BAAW;AACb,CAAC,EATW,gBAAgB,KAAhB,gBAAgB,QAS3B;AAED;;GAEG;AACI,MAAM,aAAa;IAKxB;;OAEG;IACH,YAAY,MAAe,EAAE,UAAkD,EAAE;QAPzE,WAAM,GAAkB,IAAI,CAAC;QAC7B,YAAO,GAAY,KAAK,CAAC;QACzB,iBAAY,GAAY,KAAK,CAAC;QAMpC,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;QACtE,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC;IAC7C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAe,EAAE,IAAU;QAC/B,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY;YAAE,OAAO;QAEhD,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QAC9C,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,KAAK,CAAC,aAAa,OAAO,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAED;;OAEG;IACH,IAAI,CAAC,OAAe,EAAE,IAAU;QAC9B,IAAI,CAAC,IAAI,CAAC,OAAO;YAAE,OAAO;QAE1B,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QAC7C,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,IAAI,CAAC,aAAa,OAAO,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IAED;;OAEG;IACH,IAAI,CAAC,OAAe,EAAE,IAAU;QAC9B,IAAI,CAAC,IAAI,CAAC,OAAO;YAAE,OAAO;QAE1B,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QAC7C,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,IAAI,CAAC,aAAa,OAAO,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAe,EAAE,IAAU;QAC/B,IAAI,CAAC,IAAI,CAAC,OAAO;YAAE,OAAO;QAE1B,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QAC9C,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,KAAK,CAAC,aAAa,OAAO,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAED;;OAEG;IACH,YAAY,CACV,SAA2B,EAC3B,GAAW,EACX,OAA+E;QAE/E,IAAI,CAAC,IAAI,CAAC,OAAO;YAAE,OAAO;QAE1B,MAAM,WAAW,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,KAAK,GAAG,EAAE,CAAC;QAElE,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACxB,OAAO;QACT,CAAC;QAED,gBAAgB;QAChB,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;YAChC,IAAI,CAAC,KAAK,CAAC,GAAG,WAAW,sBAAsB,CAAC,CAAC;YACjD,OAAO;QACT,CAAC;QAED,IAAI,OAAO,OAAO,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;YACzC,IAAI,CAAC,KAAK,CAAC,GAAG,WAAW,+BAA+B,CAAC,CAAC;YAC1D,OAAO;QACT,CAAC;QAED,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;QAEnD,IAAI,OAAO,EAAE,CAAC;YACZ,QAAQ;YACR,MAAM,OAAO,GAAG,GAAG,WAAW,QAAQ,QAAQ,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GACjF,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EACzC,EAAE,CAAC;YAEH,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACtB,CAAC;aAAM,CAAC;YACN,QAAQ;YACR,MAAM,OAAO,GAAG,GAAG,WAAW,QAAQ,QAAQ,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YAEtF,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IAED;;OAEG;IACK,gBAAgB,CAAC,SAA2B;QAClD,QAAQ,SAAS,EAAE,CAAC;YAClB,KAAK,gBAAgB,CAAC,IAAI;gBACxB,OAAO,MAAM,CAAC;YAChB,KAAK,gBAAgB,CAAC,GAAG;gBACvB,OAAO,MAAM,CAAC;YAChB,KAAK,gBAAgB,CAAC,MAAM;gBAC1B,OAAO,MAAM,CAAC;YAChB,KAAK,gBAAgB,CAAC,IAAI;gBACxB,OAAO,KAAK,CAAC;YACf,KAAK,gBAAgB,CAAC,KAAK;gBACzB,OAAO,MAAM,CAAC;YAChB,KAAK,gBAAgB,CAAC,IAAI;gBACxB,OAAO,OAAO,CAAC;YACjB,KAAK,gBAAgB,CAAC,OAAO;gBAC3B,OAAO,QAAQ,CAAC;YAClB,KAAK,gBAAgB,CAAC,GAAG;gBACvB,OAAO,MAAM,CAAC;YAChB;gBACE,OAAO,MAAM,CAAC;QAClB,CAAC;IACH,CAAC;IAED;;OAEG;IACK,UAAU,CAAC,KAAa;QAC9B,IAAI,KAAK,GAAG,IAAI;YAAE,OAAO,GAAG,KAAK,GAAG,CAAC;QACrC,IAAI,KAAK,GAAG,IAAI,GAAG,IAAI;YAAE,OAAO,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;QACjE,OAAO,GAAG,CAAC,KAAK,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IACnD,CAAC;IAED;;OAEG;IACH,SAAS,CAAC,MAAc;QACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,OAAgB;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,QAAQ,CAAC,KAAc;QACrB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC5B,CAAC;CACF;;;;;;;;;;;;;;;;;;ACzLmC;AAEoB;AACW;AAEnE;;;GAGG;AACI,MAAM,cAAc;IAMzB;;;OAGG;IACH,YAAY,UAA2B,EAAE;QAPjC,sBAAiB,GAA0C,IAAI,CAAC;QAQtE,IAAI,CAAC,OAAO,GAAG;YACb,IAAI,EAAE,mEAAW,CAAC,UAAU;YAC5B,MAAM,EAAE,qBAAqB;YAC7B,SAAS,EAAE,SAAS;YACpB,SAAS,EAAE,EAAE;YACb,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,SAAS;YAC9C,OAAO,EAAE,IAAI;YACb,SAAS,EAAE,IAAI;YACf,aAAa,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,kBAAkB;YACjD,GAAG,OAAO;SACX,CAAC;QAEF,WAAW;QACX,IAAI,CAAC,MAAM,GAAG,IAAI,0DAAa,CAAC,SAAS,EAAE;YACzC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;YAC7B,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACpC,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,eAAe,CAAC,MAAc,EAAE,KAAmB;QACvD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,OAAO;QACT,CAAC;QAED,MAAM,GAAG,GAAG,SAAS,MAAM,EAAE,CAAC;QAC9B,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAE7D,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,IAAI,EAAE,GAAG,EAAE;gBACnD,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,IAAI,EAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;aACrC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,IAAI,EAAE,GAAG,EAAE;gBACnD,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,KAAK,EAAE,KAAc;aACtB,CAAC,CAAC;YAEH,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YAClC,MAAM,IAAI,KAAK,CAAC,aAAc,KAAe,CAAC,OAAO,EAAE,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,SAAS,CAAC,MAAc,EAAE,UAAkB,EAAE,KAAW;QAC7D,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,OAAO;QACT,CAAC;QAED,MAAM,GAAG,GAAG,SAAS,MAAM,IAAI,UAAU,EAAE,CAAC;QAC5C,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAE7D,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,IAAI,EAAE,GAAG,EAAE;gBACnD,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,IAAI,EAAE,KAAK,CAAC,IAAI;aACjB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,IAAI,EAAE,GAAG,EAAE;gBACnD,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,KAAK,EAAE,KAAc;aACtB,CAAC,CAAC;YAEH,OAAO,CAAC,KAAK,CAAC,OAAO,UAAU,KAAK,EAAE,KAAK,CAAC,CAAC;YAC7C,MAAM,IAAI,KAAK,CAAC,WAAY,KAAe,CAAC,OAAO,EAAE,CAAC,CAAC;QACzD,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,cAAc,CAAC,MAAc;QACjC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,GAAG,GAAG,SAAS,MAAM,EAAE,CAAC;QAC9B,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAe,GAAG,CAAC,CAAC;YAEzD,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,GAAG,EAAE,GAAG,EAAE;gBAClD,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;aACnD,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,GAAG,EAAE,GAAG,EAAE;gBAClD,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,KAAK,EAAE,KAAc;aACtB,CAAC,CAAC;YAEH,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YAClC,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,QAAQ,CAAC,MAAc,EAAE,UAAkB;QAC/C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,GAAG,GAAG,SAAS,MAAM,IAAI,UAAU,EAAE,CAAC;QAC5C,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAO,GAAG,CAAC,CAAC;YAEjD,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,GAAG,EAAE,GAAG,EAAE;gBAClD,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,IAAI,EAAE,MAAM,EAAE,IAAI,IAAI,CAAC;aACxB,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,GAAG,EAAE,GAAG,EAAE;gBAClD,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,KAAK,EAAE,KAAc;aACtB,CAAC,CAAC;YAEH,OAAO,CAAC,KAAK,CAAC,OAAO,UAAU,KAAK,EAAE,KAAK,CAAC,CAAC;YAC7C,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,eAAe,CAAC,MAAc;QAClC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,MAAM,GAAG,SAAS,MAAM,GAAG,CAAC;QAClC,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YAEvC,MAAM,OAAO,GAAG,IAAI;iBACjB,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;iBACrC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACT,MAAM,KAAK,GAAG,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAC3C,OAAO,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC7B,CAAC,CAAC;iBACD,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;iBAC9B,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY;YAEtC,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,IAAI,EAAE,MAAM,EAAE;gBACtD,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;aACxC,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC;QACjB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,IAAI,EAAE,MAAM,EAAE;gBACtD,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,KAAK,EAAE,KAAc;aACtB,CAAC,CAAC;YAEH,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YAClC,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,UAAU,CAAC,MAAc;QAC7B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,OAAO;QACT,CAAC;QAED,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,OAAO;YACP,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,MAAM,EAAE,CAAC,CAAC;YAE7C,SAAS;YACT,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,MAAM,EAAE,CAAC,CAAC;YAE7C,YAAY;YACZ,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YACxD,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,MAAM,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC;YAE5F,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAE5B,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,MAAM,EAAE,QAAQ,MAAM,EAAE,EAAE;gBAClE,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;aACxC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,MAAM,EAAE,QAAQ,MAAM,EAAE,EAAE;gBAClE,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,KAAK,EAAE,KAAc;aACtB,CAAC,CAAC;YAEH,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YAClC,MAAM,IAAI,KAAK,CAAC,aAAc,KAAe,CAAC,OAAO,EAAE,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,kBAAkB,CAAC,OAAgB;QACvC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,OAAO;QACT,CAAC;QAED,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;YAElC,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,OAAO,EAAE,cAAc,EAAE;gBACjE,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;aACxC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,OAAO,EAAE,cAAc,EAAE;gBACjE,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,KAAK,EAAE,KAAc;aACtB,CAAC,CAAC;YAEH,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACpC,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,eAAe;QACnB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC;QACvD,CAAC;QAED,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;YAE5C,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,GAAG,EAAE,eAAe,EAAE;gBAC9D,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;aACxC,CAAC,CAAC;YAEH,OAAO,KAAK,CAAC;QACf,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,GAAG,EAAE,eAAe,EAAE;gBAC9D,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,KAAK,EAAE,KAAc;aACtB,CAAC,CAAC;YAEH,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YACpC,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC;QACvD,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,gBAAgB;QACpB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QACpC,MAAM,WAAW,GAAG,QAAQ,CAAC;QAE7B,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YAEvC,MAAM,OAAO,GAAG,IAAI;iBACjB,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;iBAC1C,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;YAEjD,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,IAAI,EAAE,gBAAgB,EAAE;gBAChE,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;aACxC,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC;QACjB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,IAAI,EAAE,gBAAgB,EAAE;gBAChE,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,KAAK,EAAE,KAAc;aACtB,CAAC,CAAC;YAEH,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YACpC,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,cAAc,CAAC,MAAc,EAAE,KAAkB;QACrD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,OAAO;QACT,CAAC;QAED,MAAM,GAAG,GAAG,SAAS,MAAM,EAAE,CAAC;QAC9B,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAE7D,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,IAAI,EAAE,GAAG,EAAE;gBACnD,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,IAAI,EAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;aACrC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,IAAI,EAAE,GAAG,EAAE;gBACnD,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,KAAK,EAAE,KAAc;aACtB,CAAC,CAAC;YAEH,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YAClC,MAAM,IAAI,KAAK,CAAC,aAAc,KAAe,CAAC,OAAO,EAAE,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,aAAa,CAAC,MAAc;QAChC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,GAAG,GAAG,SAAS,MAAM,EAAE,CAAC;QAC9B,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAc,GAAG,CAAC,CAAC;YAExD,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,GAAG,EAAE,GAAG,EAAE;gBAClD,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;aACnD,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,SAAS;YACT,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,GAAG,EAAE,GAAG,EAAE;gBAClD,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,KAAK,EAAE,KAAc;aACtB,CAAC,CAAC;YAEH,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YAClC,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,aAAa;QACnB,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,mBAAmB;YACnB,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBACzB,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,IAAI,EAAE,gBAAgB,EAAE;oBAChE,OAAO,EAAE,IAAI;oBACb,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;iBACxC,CAAC,CAAC;gBACH,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;YAC9B,CAAC;YAED,cAAc;YACd,IAAI,OAAwB,CAAC;YAC7B,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBAC1B,KAAK,mEAAW,CAAC,UAAU;oBACzB,OAAO,GAAG,IAAI,iEAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC7C,MAAM;gBACR,iBAAiB;gBACjB;oBACE,mBAAmB;oBACnB,OAAO,GAAG,IAAI,iEAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACjD,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACzE,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;aACxC,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC;QACjB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,6DAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACzE,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,KAAK,EAAE,KAAc;aACtB,CAAC,CAAC;YAEH,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACK,cAAc;QACpB,WAAW;QACX,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC3B,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACtC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAChC,CAAC;QAED,mBAAmB;QACnB,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;YACpF,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAClC,GAAG,EAAE;gBACH,IAAI,CAAC,kBAAkB,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;oBACtC,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;gBACtC,CAAC,CAAC,CAAC;YACL,CAAC,EACD,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,EAAE,GAAG,EAAE,GAAG,IAAI,CAC7C,CAAC,CAAC,UAAU;QACf,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,kBAAkB,CAAC,GAAQ;QACjC,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS;YAAE,OAAO,CAAC,CAAC;QAEhD,iBAAiB;QACjB,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,mBAAmB;QAC5D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,CAAC,CAAC,YAAY;QACxB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,OAAO;QACL,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC3B,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACtC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAChC,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,SAAS,CAAC,MAAW;QACnB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,KAAc;QACrB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;CACF;;;;;;;;;;;;;;;;;;;UEzjBD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNA;;;GAGG;AACiE;AAET;AAE3D,YAAY;AACZ,wDAAwD;AAExD;;;;;GAKG;AACH,KAAK,UAAU,WAAW,CAAC,KAAW,EAAE,KAAa,EAAE,MAAc;IACnE,aAAa;IACb,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;IAChC,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAChC,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IACxC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAElC,8BAA8B;IAC9B,OAAO,CAAC,QAAQ,KAAK,KAAK,KAAK,CAAC,IAAI,YAAY,CAAC,CAAC;IAElD,SAAS;IACT,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IAE9E,qBAAqB;IACrB,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC;QACxB,MAAM,IAAI,KAAK,CAAC,MAAM,KAAK,aAAa,CAAC,CAAC;IAC5C,CAAC;IAED,OAAO,CAAC,MAAM,KAAK,OAAO,EAAE,SAAS,CAAC,CAAC;AACzC,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,WAAW,CAAC,MAAc,EAAE,WAAmB;IAC5D,OAAO,CAAC,WAAW,WAAW,SAAS,CAAC,CAAC;IAEzC,SAAS;IACT,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IAExD,OAAO,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;AACpC,CAAC;AAED;;;GAGG;AACH,KAAK,UAAU,uBAAuB,CAAC,IAAU;IAC/C,qBAAqB;IACrB,MAAM,cAAc,GAAG,IAAI,8EAAY,EAAE,CAAC;IAE1C,SAAS;IACT,MAAM,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAsB,CAAC;IAClF,YAAY,CAAC,QAAQ,GAAG,IAAI,CAAC;IAE7B,UAAU;IACV,mBAAmB,CAAC,cAAc,CAAC,CAAC;IAEpC,SAAS;IACT,MAAM,cAAc,GAAG,IAAI,sDAAoB,CAAC;QAC9C,OAAO,EAAE;YACP,MAAM,EAAE,oBAAoB;YAC5B,SAAS,EAAE,cAAc;YACzB,OAAO,EAAE,CAAC;SACX;QACD,mBAAmB,EAAE,CAAC;QACtB,MAAM,EAAE,OAAO;KAChB,CAAC,CAAC;IAEH,UAAU;IACV,cAAc,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;IAE/C,IAAI,CAAC;QACH,2BAA2B;QAC3B,MAAM,MAAM,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;QACpC,OAAO,CAAC,SAAS,MAAM,EAAE,CAAC,CAAC;QAE3B,gBAAgB;QAChB,MAAM,QAAQ,GAAG,MAAM,mBAAmB,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QAEnE,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO;YACP,OAAO,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC;YAExC,SAAS;YACT,MAAM,WAAW,GAAG,MAAM,cAAc,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YACjE,OAAO,CACL,SAAS,IAAI,CAAC,IAAI,IAAI;gBACpB,QAAQ,WAAW,EAAE,cAAc,EAAE,MAAM,IAAI,CAAC,IAC9C,WAAW,EAAE,WAAW,IAAI,CAC9B,KAAK,CACR,CAAC;YAEF,OAAO;YACP,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,CAAC;YAEzC,QAAQ;YACR,MAAM,eAAe,GACnB,CAAC,CAAC,WAAW,EAAE,cAAc,EAAE,MAAM,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC;YAC5E,iBAAiB,CAAC,eAAe,CAAC,CAAC;YAEnC,SAAS;YACT,MAAM,qBAAqB,CACzB,cAAc,EACd,MAAM,EACN,QAAQ,CAAC,MAAM,EACf,WAAW,EAAE,cAAc,IAAI,EAAE,CAClC,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,QAAQ;YACR,OAAO,CAAC,WAAW,IAAI,CAAC,IAAI,MAAM,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YAEpE,OAAO;YACP,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,CAAC;YACzC,OAAO,CACL,SAAS,QAAQ,CAAC,WAAW,iBAAiB,UAAU,CACtD,QAAQ,CAAC,SAAS,CACnB,EAAE,CACJ,CAAC;YAEF,SAAS;YACT,MAAM,qBAAqB,CAAC,cAAc,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC3E,CAAC;QAED,YAAY;QACZ,MAAM,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAE5C,cAAc;QACd,MAAM,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAErC,OAAO;QACP,iBAAiB,CAAC,GAAG,CAAC,CAAC;QACvB,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAC9B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,cAAe,KAAe,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,CAAC;QAC3D,OAAO,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC;YAAS,CAAC;QACT,OAAO;QACP,cAAc,CAAC,OAAO,EAAE,CAAC;QAEzB,SAAS;QACT,YAAY,CAAC,QAAQ,GAAG,KAAK,CAAC;IAChC,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,mBAAmB,CAChC,cAAoC,EACpC,MAAc;IAEd,8CAA8C;IAC9C,+BAA+B;IAC/B,MAAM,KAAK,GAAG,MAAM,cAAc,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;IAC3D,OAAO,CAAC,CAAC,KAAK,CAAC;AACjB,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,cAAc,CAAC,cAAoC,EAAE,MAAc;IAChF,kCAAkC;IAClC,gCAAgC;IAChC,IAAI,CAAC;QACH,MAAM,aAAa,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACpE,IAAI,aAAa,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC9C,aAAa;YACb,MAAM,cAAc,GAAG,aAAa;iBACjC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,KAAK,6CAAW,CAAC,OAAO,CAAC;iBACrD,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAE7B,OAAO;gBACL,cAAc;gBACd,WAAW,EAAE,aAAa,CAAC,MAAM;aAClC,CAAC;QACJ,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IAClC,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,WAAW,CAAC,IAAU;IACnC,WAAW;IACX,MAAM,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC;IAC9B,MAAM,MAAM,GAAW,EAAE,CAAC;IAE1B,OAAO;IACP,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,KAAK,IAAI,SAAS,EAAE,CAAC;QAC1D,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC;IAED,OAAO;QACL,MAAM;QACN,WAAW,EAAE,MAAM,CAAC,MAAM;QAC1B,SAAS;KACV,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,SAAS,cAAc,CAAC,IAAU;IAChC,wBAAwB;IACxB,MAAM,SAAS,GAAG,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;IAEnE,SAAS;IACT,IAAI,IAAI,GAAG,CAAC,CAAC;IACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAC1C,MAAM,IAAI,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;QACjC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,WAAW;IACjC,CAAC;IAED,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACrC,CAAC;AAED;;;;;;GAMG;AACH,KAAK,UAAU,qBAAqB,CAClC,cAAoC,EACpC,MAAc,EACd,MAAc,EACd,cAAwB;IAExB,mBAAmB;IACnB,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,CAAC;IAE5C,2BAA2B;IAC3B,MAAM,WAAW,GAAG,CAAC,CAAC;IACtB,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,MAAM,QAAQ,GAAoB,EAAE,CAAC;IAErC,YAAY;IACZ,IAAI,eAAe,GAAG,cAAc,CAAC,MAAM,CAAC;IAC5C,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC;IAElC,SAAS;IACT,iBAAiB,CAAC,CAAC,eAAe,GAAG,WAAW,CAAC,GAAG,GAAG,CAAC,CAAC;IAEzD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACvC,WAAW;QACX,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YACvB,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAC1B,SAAS;QACX,CAAC;QAED,SAAS;QACT,IAAI,OAAO,IAAI,WAAW,EAAE,CAAC;YAC3B,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/B,CAAC;QAED,OAAO;QACP,OAAO,EAAE,CAAC;QACV,MAAM,OAAO,GAAG,CAAC,KAAK,EAAE,KAAa,EAAE,EAAE;YACvC,IAAI,CAAC;gBACH,MAAM,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;gBAEhD,SAAS;gBACT,MAAM,cAAc,CAAC,iBAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,6CAAW,CAAC,OAAO,CAAC,CAAC;gBAE3E,YAAY;gBACZ,OAAO,EAAE,CAAC;gBACV,eAAe,EAAE,CAAC;gBAClB,iBAAiB,CAAC,CAAC,eAAe,GAAG,WAAW,CAAC,GAAG,GAAG,CAAC,CAAC;YAC3D,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,EAAE,CAAC;gBAEV,gBAAgB;gBAChB,OAAO,CAAC,MAAM,KAAK,UAAW,KAAe,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,CAAC;gBAClE,MAAM,cAAc,CAAC,iBAAiB,CACpC,MAAM,EACN,KAAK,EACL,6CAAW,CAAC,MAAM,EACjB,KAAe,CAAC,OAAO,CACzB,CAAC;gBAEF,SAAS;gBACT,MAAM,KAAK,CAAC;YACd,CAAC;QACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEN,eAAe;QACf,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACzB,CAAC;IAED,WAAW;IACX,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IAEnC,kBAAkB;IAClB,MAAM,WAAW,GAAG,QAAQ,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;IAC5D,IAAI,WAAW,GAAG,CAAC,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,GAAG,WAAW,yBAAyB,CAAC,CAAC;IAC3D,CAAC;AACH,CAAC;AAED;;;GAGG;AACH,SAAS,mBAAmB,CAAC,YAAiB;IAC5C,YAAY,CAAC,EAAE,CAAC,iBAAiB,EAAE,CAAC,IAAS,EAAE,EAAE;QAC/C,OAAO,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC/C,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,YAAY,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC,IAAS,EAAE,EAAE;QAC7C,OAAO,CACL,UAAU,IAAI,CAAC,QAAQ,WAAW,IAAI,CAAC,cAAc,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,KAAK,EACrF,MAAM,CACP,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,YAAY,CAAC,EAAE,CAAC,iBAAiB,EAAE,CAAC,IAAS,EAAE,EAAE;QAC/C,OAAO,CAAC,UAAU,IAAI,CAAC,QAAQ,GAAG,EAAE,SAAS,CAAC,CAAC;QAC/C,iBAAiB,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,YAAY,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,IAAS,EAAE,EAAE;QAC5C,OAAO,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,YAAY,CAAC,EAAE,CAAC,iBAAiB,EAAE,CAAC,IAAS,EAAE,EAAE;QAC/C,OAAO,CAAC,aAAa,IAAI,CAAC,KAAK,QAAQ,EAAE,MAAM,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;;GAGG;AACH,SAAS,iBAAiB,CAAC,QAAgB;IACzC,MAAM,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAgB,CAAC;IAC1E,IAAI,WAAW,EAAE,CAAC;QAChB,WAAW,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC;IACvD,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH,SAAS,OAAO,CAAC,OAAe,EAAE,OAAiD,MAAM;IACvF,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IACnD,IAAI,OAAO,EAAE,CAAC;QACZ,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC/C,QAAQ,CAAC,WAAW,GAAG,IAAI,IAAI,IAAI,EAAE,CAAC,kBAAkB,EAAE,KAAK,OAAO,EAAE,CAAC;QACzE,QAAQ,CAAC,SAAS,GAAG,aAAa,IAAI,EAAE,CAAC;QACzC,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC9B,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,YAAY;QAEtD,WAAW;QACX,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC;AACH,CAAC;AAED;;;GAGG;AACH,SAAS,UAAU,CAAC,KAAa;IAC/B,IAAI,KAAK,KAAK,CAAC;QAAE,OAAO,SAAS,CAAC;IAElC,MAAM,CAAC,GAAG,IAAI,CAAC;IACf,MAAM,KAAK,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAChD,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAEpD,OAAO,UAAU,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC1E,CAAC;AAED,kBAAkB;AAClB,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,GAAG,EAAE;IACjD,MAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAqB,CAAC;IAC3E,MAAM,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAsB,CAAC;IAClF,MAAM,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAsB,CAAC;IAChF,MAAM,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAsB,CAAC;IAElF,QAAQ;IACR,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;IAE/B,SAAS;IACT,YAAY,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;QAChD,IAAI,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAClD,MAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAEhC,SAAS;YACT,WAAW,CAAC,QAAQ,GAAG,KAAK,CAAC;YAE7B,IAAI,CAAC;gBACH,MAAM,uBAAuB,CAAC,IAAI,CAAC,CAAC;YACtC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,SAAU,KAAe,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,CAAC;YACxD,CAAC;oBAAS,CAAC;gBACT,SAAS;gBACT,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC;YAC9B,CAAC;QACH,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,SAAS;IACT,SAAS,CAAC,gBAAgB,CAAC,QAAQ,EAAE,GAAG,EAAE;QACxC,IAAI,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAClD,MAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,OAAO,CAAC,UAAU,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YAClE,YAAY,CAAC,QAAQ,GAAG,KAAK,CAAC;QAChC,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,yBAAyB;IACzB,WAAW,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE;QACzC,OAAO,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,YAAY,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE;QAC1C,OAAO,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sources":["webpack://@file-chunk-uploader/resume/../core/src/developer-mode/logger.ts","webpack://@file-chunk-uploader/resume/../core/src/developer-mode/types.ts","webpack://@file-chunk-uploader/resume/../core/src/events/event-emitter.ts","webpack://@file-chunk-uploader/resume/../types/dist/index.esm.js","webpack://@file-chunk-uploader/resume/./src/index.ts","webpack://@file-chunk-uploader/resume/./src/resume-strategy/chunk-state-manager.ts","webpack://@file-chunk-uploader/resume/./src/resume-strategy/index.ts","webpack://@file-chunk-uploader/resume/./src/resume-strategy/progress-calculator.ts","webpack://@file-chunk-uploader/resume/./src/resume-strategy/resume-upload-strategy.ts","webpack://@file-chunk-uploader/resume/./src/resume-strategy/types.ts","webpack://@file-chunk-uploader/resume/./src/resume-strategy/upload-state-validator.ts","webpack://@file-chunk-uploader/resume/./src/storage/compression-utils.ts","webpack://@file-chunk-uploader/resume/./src/storage/index.ts","webpack://@file-chunk-uploader/resume/./src/storage/indexed-db-adapter.ts","webpack://@file-chunk-uploader/resume/./src/storage/migration-helper.ts","webpack://@file-chunk-uploader/resume/./src/storage/priority-manager.ts","webpack://@file-chunk-uploader/resume/./src/storage/space-manager.ts","webpack://@file-chunk-uploader/resume/./src/storage/storage-logger.ts","webpack://@file-chunk-uploader/resume/./src/storage/storage-manager.ts","webpack://@file-chunk-uploader/resume/./src/storage/storage-options.ts","webpack://@file-chunk-uploader/resume/webpack/bootstrap","webpack://@file-chunk-uploader/resume/webpack/runtime/define property getters","webpack://@file-chunk-uploader/resume/webpack/runtime/hasOwnProperty shorthand","webpack://@file-chunk-uploader/resume/webpack/runtime/make namespace object","webpack://@file-chunk-uploader/resume/./examples/basic-resume-upload.ts"],"sourcesContent":["/**\n * Logger类实现\n * 支持多级别日志和分类的可配置日志系统\n */\nimport {\n  ILogData,\n  ILoggerConfig,\n  LogCategory,\n  LogFormatter,\n  LogLevel,\n  LogOutputTarget,\n} from './types';\n\n/**\n * 默认日志格式化器\n */\nconst defaultFormatter: LogFormatter = (\n  level: LogLevel,\n  category: LogCategory,\n  message: string,\n  data?: any,\n  timestamp: number = Date.now(),\n): string => {\n  const levelNames = ['DEBUG', 'INFO', 'WARN', 'ERROR', 'SILENT'];\n  const time = new Date(timestamp).toISOString();\n  const dataStr = data !== undefined ? `\\nData: ${JSON.stringify(data, null, 2)}` : '';\n\n  return `[${time}] [${levelNames[level]}] [${category}]: ${message}${dataStr}`;\n};\n\n/**\n * 控制台输出目标\n */\nconst consoleOutput: LogOutputTarget = (formattedLog: string, rawLogData: ILogData): void => {\n  const { level } = rawLogData;\n\n  switch (level) {\n    case LogLevel.DEBUG:\n      console.debug(formattedLog);\n      break;\n    case LogLevel.INFO:\n      console.info(formattedLog);\n      break;\n    case LogLevel.WARN:\n      console.warn(formattedLog);\n      break;\n    case LogLevel.ERROR:\n      console.error(formattedLog);\n      break;\n    default:\n      break;\n  }\n};\n\n/**\n * 彩色化控制台输出\n */\nconst colorizedConsoleOutput: LogOutputTarget = (\n  formattedLog: string,\n  rawLogData: ILogData,\n): void => {\n  const { level } = rawLogData;\n  const styles = [\n    'color: #9E9E9E', // DEBUG - 灰色\n    'color: #2196F3', // INFO - 蓝色\n    'color: #FFC107', // WARN - 黄色\n    'color: #F44336', // ERROR - 红色\n    '', // SILENT\n  ];\n\n  switch (level) {\n    case LogLevel.DEBUG:\n      console.debug(`%c${formattedLog}`, styles[level]);\n      break;\n    case LogLevel.INFO:\n      console.info(`%c${formattedLog}`, styles[level]);\n      break;\n    case LogLevel.WARN:\n      console.warn(`%c${formattedLog}`, styles[level]);\n      break;\n    case LogLevel.ERROR:\n      console.error(`%c${formattedLog}`, styles[level]);\n      break;\n    default:\n      break;\n  }\n};\n\n/**\n * Logger类 - 支持多级别日志和分类\n */\nexport class Logger {\n  private config: ILoggerConfig;\n  private logHistory: ILogData[] = [];\n  private historyLimit: number = 1000; // 默认历史记录上限\n\n  /**\n   * 创建Logger实例\n   */\n  constructor(config?: Partial<ILoggerConfig>) {\n    // 默认配置\n    const defaultConfig: ILoggerConfig = {\n      level: LogLevel.INFO,\n      formatter: defaultFormatter,\n      outputs: [consoleOutput],\n      enabledCategories: true, // 所有类别\n      colorize: true,\n    };\n\n    this.config = { ...defaultConfig, ...config };\n\n    // 如果启用了彩色显示，替换输出方法\n    if (this.config.colorize && typeof window !== 'undefined') {\n      this.config.outputs = [colorizedConsoleOutput];\n    }\n  }\n\n  /**\n   * 配置日志记录器\n   */\n  configure(config: Partial<ILoggerConfig>): void {\n    this.config = { ...this.config, ...config };\n\n    // 更新彩色化设置\n    if (this.config.colorize !== undefined && typeof window !== 'undefined') {\n      this.config.outputs = [this.config.colorize ? colorizedConsoleOutput : consoleOutput];\n    }\n  }\n\n  /**\n   * 判断分类是否启用\n   */\n  private isCategoryEnabled(category: LogCategory): boolean {\n    if (this.config.enabledCategories === true) {\n      return true;\n    }\n    return (\n      Array.isArray(this.config.enabledCategories) &&\n      this.config.enabledCategories.includes(category)\n    );\n  }\n\n  /**\n   * 记录日志\n   */\n  private log(level: LogLevel, category: LogCategory, message: string, data?: any): void {\n    // 检查日志级别和分类是否启用\n    if (level < this.config.level || !this.isCategoryEnabled(category)) {\n      return;\n    }\n\n    const timestamp = Date.now();\n    const logData: ILogData = {\n      level,\n      category,\n      message,\n      data,\n      timestamp,\n    };\n\n    // 保存到历史记录\n    this.logHistory.push(logData);\n    if (this.logHistory.length > this.historyLimit) {\n      this.logHistory.shift();\n    }\n\n    // 使用格式化器\n    const formatter = this.config.formatter || defaultFormatter;\n    const formattedLog = formatter(level, category, message, data, timestamp);\n\n    // 发送到所有输出目标\n    if (this.config.outputs && this.config.outputs.length > 0) {\n      this.config.outputs.forEach(output => {\n        output(formattedLog, logData);\n      });\n    }\n  }\n\n  /**\n   * 日志级别方法\n   */\n  debug(category: LogCategory, message: string, data?: any): void {\n    this.log(LogLevel.DEBUG, category, message, data);\n  }\n\n  info(category: LogCategory, message: string, data?: any): void {\n    this.log(LogLevel.INFO, category, message, data);\n  }\n\n  warn(category: LogCategory, message: string, data?: any): void {\n    this.log(LogLevel.WARN, category, message, data);\n  }\n\n  error(category: LogCategory, message: string, data?: any): void {\n    this.log(LogLevel.ERROR, category, message, data);\n  }\n\n  /**\n   * 获取日志历史\n   */\n  getHistory(): ILogData[] {\n    return [...this.logHistory];\n  }\n\n  /**\n   * 按条件筛选日志\n   */\n  filterLogs(options: {\n    level?: LogLevel;\n    category?: LogCategory;\n    fromTime?: number;\n    toTime?: number;\n    search?: string;\n  }): ILogData[] {\n    return this.logHistory.filter(log => {\n      if (options.level !== undefined && log.level < options.level) {\n        return false;\n      }\n      if (options.category !== undefined && log.category !== options.category) {\n        return false;\n      }\n      if (options.fromTime !== undefined && log.timestamp < options.fromTime) {\n        return false;\n      }\n      if (options.toTime !== undefined && log.timestamp > options.toTime) {\n        return false;\n      }\n      if (\n        options.search !== undefined &&\n        !log.message.includes(options.search) &&\n        !(log.data && JSON.stringify(log.data).includes(options.search))\n      ) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  /**\n   * 清除日志历史\n   */\n  clearHistory(): void {\n    this.logHistory = [];\n  }\n\n  /**\n   * 设置历史记录上限\n   */\n  setHistoryLimit(limit: number): void {\n    this.historyLimit = limit;\n    // 如果当前历史记录超出新上限，则截断\n    if (this.logHistory.length > limit) {\n      this.logHistory = this.logHistory.slice(-limit);\n    }\n  }\n\n  /**\n   * 添加自定义输出目标\n   */\n  addOutputTarget(target: LogOutputTarget): void {\n    if (!this.config.outputs) {\n      this.config.outputs = [];\n    }\n    this.config.outputs.push(target);\n  }\n\n  /**\n   * 移除输出目标\n   */\n  removeOutputTarget(target: LogOutputTarget): void {\n    if (this.config.outputs) {\n      this.config.outputs = this.config.outputs.filter(t => t !== target);\n    }\n  }\n}\n","/**\n * 开发者模式类型定义\n */\n\n/**\n * 日志级别枚举\n */\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  SILENT = 4,\n}\n\n/**\n * 日志类别\n */\nexport type LogCategory =\n  | 'core'\n  | 'event'\n  | 'plugin'\n  | 'network'\n  | 'storage'\n  | 'upload'\n  | 'chunk'\n  | 'resume'\n  | 'performance'\n  | string;\n\n/**\n * 日志格式化器\n */\nexport type LogFormatter = (\n  level: LogLevel,\n  category: LogCategory,\n  message: string,\n  data?: any,\n  timestamp?: number,\n) => string;\n\n/**\n * 日志输出目标\n */\nexport type LogOutputTarget = (formattedLog: string, rawLogData: ILogData) => void;\n\n/**\n * 日志数据接口\n */\nexport interface ILogData {\n  level: LogLevel;\n  category: LogCategory;\n  message: string;\n  data?: any;\n  timestamp: number;\n}\n\n/**\n * 日志配置接口\n */\nexport interface ILoggerConfig {\n  level: LogLevel;\n  formatter?: LogFormatter;\n  outputs?: LogOutputTarget[];\n  enabledCategories?: LogCategory[] | true;\n  timestampFormat?: string;\n  colorize?: boolean;\n}\n\n/**\n * 插件轨迹事件\n */\nexport interface IPluginTraceEvent {\n  pluginId: string;\n  hookName: string;\n  startTime: number;\n  endTime?: number;\n  duration?: number;\n  error?: Error;\n  data?: any;\n}\n\n/**\n * 插件跟踪器配置\n */\nexport interface IPluginTracerConfig {\n  enabled: boolean;\n  traceLimit?: number;\n  logHookEvents?: boolean;\n  performanceThreshold?: number;\n}\n\n/**\n * 开发者模式配置接口\n */\nexport interface IDeveloperModeConfig {\n  enabled: boolean;\n  logger?: ILoggerConfig;\n  pluginTracer?: IPluginTracerConfig;\n  consoleApiEnabled?: boolean;\n  performanceTracking?: {\n    enabled: boolean;\n    sampleRate: number;\n    trackMemory: boolean;\n  };\n  breakOnError?: boolean;\n}\n","import {\n  EventHandler,\n  EventHandlerError,\n  EventName,\n  HandlerTimeoutError,\n  IEventContext,\n  IEventEmitOptions,\n  IEventEmitter,\n  IEventHandlerWithPriority,\n  IEventListener,\n  IEventOptions,\n  Namespace,\n} from '@file-chunk-uploader/types';\n\nimport { Logger } from '../developer-mode/logger';\nimport { LogLevel } from '../developer-mode/types';\n\n/**\n * 默认事件选项\n */\nconst DEFAULT_EVENT_OPTIONS: IEventOptions = {\n  once: false,\n  priority: 10,\n  filter: () => true,\n  timeout: 30000, // 默认30秒超时\n  catchError: true,\n};\n\n/**\n * 创建上下文对象\n */\nfunction createEventContext(\n  eventName: EventName,\n  options?: IEventEmitOptions,\n  namespace?: Namespace,\n): IEventContext {\n  // 用于控制事件传播\n  let propagationStopped = false;\n\n  return {\n    eventName,\n    timestamp: Date.now(),\n    source: options?.source,\n    meta: options?.meta || {},\n    namespace,\n    stopPropagation: () => {\n      propagationStopped = true;\n    },\n    isPropagationStopped: () => propagationStopped,\n  };\n}\n\n/**\n * 命名空间事件发射器\n * 提供命名空间隔离的事件机制\n */\nclass NamespacedEventEmitter implements IEventEmitter {\n  private parentEmitter: EventEmitter;\n  private namespace: Namespace;\n\n  /**\n   * 创建命名空间事件发射器\n   * @param parent 父事件发射器\n   * @param namespace 命名空间\n   */\n  constructor(parent: EventEmitter, namespace: Namespace) {\n    this.parentEmitter = parent;\n    this.namespace = namespace;\n  }\n\n  /**\n   * 创建带命名空间的事件名称\n   * @param event 原始事件名\n   * @returns 带命名空间的事件名\n   */\n  private namespacedEvent(event: EventName): EventName {\n    return `${this.namespace}:${event}` as EventName;\n  }\n\n  on<TData = unknown>(\n    event: EventName,\n    handler: EventHandler<TData>,\n    options?: IEventOptions,\n  ): this {\n    this.parentEmitter.on(this.namespacedEvent(event), handler, options);\n    return this;\n  }\n\n  once<TData = unknown>(\n    event: EventName,\n    handler: EventHandler<TData>,\n    options?: Omit<IEventOptions, 'once'>,\n  ): this {\n    this.parentEmitter.once(this.namespacedEvent(event), handler, options);\n    return this;\n  }\n\n  off(event: EventName, handler?: EventHandler<unknown>): this {\n    this.parentEmitter.off(this.namespacedEvent(event), handler);\n    return this;\n  }\n\n  async emit<TData = unknown>(\n    event: EventName,\n    data?: TData,\n    options?: IEventEmitOptions,\n  ): Promise<void> {\n    const namespacedEvent = this.namespacedEvent(event);\n\n    // 创建命名空间相关的发布选项\n    const namespacedOptions: IEventEmitOptions = {\n      ...options,\n      // 添加命名空间标识\n      meta: {\n        ...(options?.meta || {}),\n        namespace: this.namespace,\n      },\n    };\n\n    await this.parentEmitter.emit(namespacedEvent, data, namespacedOptions);\n\n    // 如果没有设置仅命名空间触发，则同时触发全局事件\n    if (!options?.namespaceOnly) {\n      // 标记是来自命名空间的事件\n      const globalOptions: IEventEmitOptions = {\n        ...options,\n        meta: {\n          ...(options?.meta || {}),\n          namespace: this.namespace,\n          fromNamespace: true,\n        },\n      };\n\n      await this.parentEmitter.emit(event, data, globalOptions);\n    }\n  }\n\n  emitSync<TData = unknown>(\n    event: EventName,\n    data?: TData,\n    options?: Omit<IEventEmitOptions, 'sync'>,\n  ): void {\n    const namespacedEvent = this.namespacedEvent(event);\n\n    // 创建命名空间相关的发布选项\n    const namespacedOptions: Omit<IEventEmitOptions, 'sync'> = {\n      ...options,\n      // 添加命名空间标识\n      meta: {\n        ...(options?.meta || {}),\n        namespace: this.namespace,\n      },\n    };\n\n    this.parentEmitter.emitSync(namespacedEvent, data, namespacedOptions);\n\n    // 如果没有设置仅命名空间触发，则同时触发全局事件\n    if (!options?.namespaceOnly) {\n      // 标记是来自命名空间的事件\n      const globalOptions: Omit<IEventEmitOptions, 'sync'> = {\n        ...options,\n        meta: {\n          ...(options?.meta || {}),\n          namespace: this.namespace,\n          fromNamespace: true,\n        },\n      };\n\n      this.parentEmitter.emitSync(event, data, globalOptions);\n    }\n  }\n\n  onBatch<TData = unknown>(\n    events: EventName[],\n    handler: EventHandler<TData>,\n    options?: IEventOptions,\n  ): Array<() => void> {\n    return events.map(event => {\n      this.on(event, handler, options);\n      // 返回取消订阅函数\n      return () => {\n        this.off(event, handler as EventHandler<unknown>);\n      };\n    });\n  }\n\n  hasListeners(event: EventName): boolean {\n    return this.parentEmitter.hasListeners(this.namespacedEvent(event));\n  }\n\n  getEventNames(): EventName[] {\n    const prefix = `${this.namespace}:`;\n    return this.parentEmitter\n      .getEventNames()\n      .filter(name => name.startsWith(prefix))\n      .map(name => name.substring(prefix.length) as EventName);\n  }\n\n  removeAllListeners(eventName?: string): this {\n    if (eventName) {\n      this.parentEmitter.off(this.namespacedEvent(eventName as EventName));\n    } else {\n      const prefix = `${this.namespace}:`;\n      const namespacedEvents = this.parentEmitter\n        .getEventNames()\n        .filter(name => name.startsWith(prefix));\n\n      namespacedEvents.forEach(event => {\n        this.parentEmitter.off(event);\n      });\n    }\n    return this;\n  }\n\n  createNamespacedEmitter(namespace: Namespace): IEventEmitter {\n    // 嵌套命名空间，使用冒号连接\n    return new NamespacedEventEmitter(this.parentEmitter, `${this.namespace}:${namespace}`);\n  }\n\n  /**\n   * 获取事件监听器\n   * @param eventName 事件名称\n   * @returns 该事件的所有监听器\n   */\n  listeners(eventName: string): Array<IEventListener> {\n    const namespacedEvent = this.namespacedEvent(eventName as EventName);\n    // 将IEventHandlerWithPriority转换为IEventListener\n    return this.parentEmitter.listeners(namespacedEvent);\n  }\n}\n\n/**\n * 事件发射器实现\n */\nexport class EventEmitter implements IEventEmitter {\n  private events: Map<EventName, IEventHandlerWithPriority[]> = new Map();\n  private logger?: Logger;\n  // 使用WeakMap存储超时定时器，当处理器被垃圾回收时，不会阻止回收\n  private timeoutTimers: WeakMap<EventHandler<unknown>, NodeJS.Timeout> = new WeakMap();\n  // 缓存排序后的处理器列表，提高性能\n  private sortedHandlersCache: Map<\n    EventName,\n    {\n      version: number;\n      handlers: IEventHandlerWithPriority[];\n    }\n  > = new Map();\n  private sortVersions: Map<EventName, number> = new Map();\n  // 命名空间相关\n  private namespace?: Namespace;\n\n  /**\n   * 创建事件发射器\n   * @param enableLogging 是否启用日志记录\n   * @param namespace 指定命名空间\n   */\n  constructor(enableLogging = false, namespace?: Namespace) {\n    if (enableLogging) {\n      this.logger = new Logger({\n        level: LogLevel.DEBUG,\n        colorize: true,\n      });\n    }\n    this.namespace = namespace;\n  }\n\n  /**\n   * 创建命名空间事件发射器\n   * @param namespace 命名空间\n   * @returns 命名空间事件发射器\n   */\n  public createNamespacedEmitter(namespace: Namespace): IEventEmitter {\n    return new NamespacedEventEmitter(this, namespace);\n  }\n\n  /**\n   * 注册事件监听器\n   * @param event 事件名\n   * @param handler 事件处理函数\n   * @param options 选项\n   * @returns this 实例，用于链式调用\n   */\n  public on<TData = unknown>(\n    event: EventName,\n    handler: EventHandler<TData>,\n    options?: IEventOptions,\n  ): this {\n    const finalOptions: IEventOptions = { ...DEFAULT_EVENT_OPTIONS, ...options };\n\n    // 生成唯一ID（如果没有提供）\n    if (!finalOptions.id) {\n      finalOptions.id = `handler_${Math.random().toString(36).substring(2, 9)}`;\n    }\n\n    // 确保事件处理器数组存在\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n      this.sortVersions.set(event, 0);\n    } else {\n      // 增加排序版本，使缓存失效\n      const version = (this.sortVersions.get(event) || 0) + 1;\n      this.sortVersions.set(event, version);\n      this.sortedHandlersCache.delete(event);\n    }\n\n    const handlers = this.events.get(event)!;\n\n    // 创建处理器包装对象\n    const handlerWithPriority: IEventHandlerWithPriority = {\n      handler: handler as EventHandler<unknown>,\n      priority: finalOptions.priority!,\n      once: finalOptions.once!,\n      filter: finalOptions.filter,\n      timeout: finalOptions.timeout,\n      context: finalOptions.context,\n      id: finalOptions.id,\n    };\n\n    handlers.push(handlerWithPriority);\n\n    this.logDebug(`注册事件处理函数: ${event}`, {\n      priority: finalOptions.priority,\n      once: finalOptions.once,\n      handlerId: finalOptions.id,\n    });\n\n    return this;\n  }\n\n  /**\n   * 批量注册事件监听器\n   * @param events 事件名称数组\n   * @param handler 事件处理函数\n   * @param options 选项\n   * @returns 取消订阅函数数组\n   */\n  public onBatch<TData = unknown>(\n    events: EventName[],\n    handler: EventHandler<TData>,\n    options?: IEventOptions,\n  ): Array<() => void> {\n    return events.map(event => {\n      this.on(event, handler, options);\n      // 返回取消订阅函数\n      return () => {\n        this.off(event, handler as EventHandler<unknown>);\n      };\n    });\n  }\n\n  /**\n   * 注册只执行一次的事件监听器\n   * @param event 事件名\n   * @param handler 事件处理函数\n   * @param options 选项\n   * @returns this 实例，用于链式调用\n   */\n  public once<TData = unknown>(\n    event: EventName,\n    handler: EventHandler<TData>,\n    options?: Omit<IEventOptions, 'once'>,\n  ): this {\n    this.on(event, handler, { ...options, once: true });\n    return this;\n  }\n\n  /**\n   * 移除事件监听器\n   * @param event 事件名\n   * @param handler 可选的特定处理函数\n   * @returns this 实例，用于链式调用\n   */\n  public off(event: EventName, handler?: EventHandler<unknown>): this {\n    if (!this.events.has(event)) return this;\n\n    if (!handler) {\n      // 如果没有指定处理函数，则移除此事件的所有监听器\n      const handlers = this.events.get(event)!;\n\n      // 清除所有相关的超时定时器\n      handlers.forEach(h => {\n        const handler = h.handler as EventHandler<unknown>;\n        this.clearHandlerTimeout(handler);\n      });\n\n      this.events.delete(event);\n      this.sortedHandlersCache.delete(event);\n      this.logDebug(`移除所有事件处理函数: ${event}`);\n    } else {\n      this.removeHandler(event, handler);\n    }\n\n    return this;\n  }\n\n  /**\n   * 移除特定处理函数\n   * @param event 事件名\n   * @param handler 处理函数\n   */\n  private removeHandler(event: EventName, handler: EventHandler<unknown>): void {\n    if (!this.events.has(event)) return;\n\n    const handlers = this.events.get(event)!;\n    const index = handlers.findIndex(h => h.handler === handler);\n\n    if (index !== -1) {\n      // 清除相关的超时定时器\n      this.clearHandlerTimeout(handler);\n\n      handlers.splice(index, 1);\n\n      // 增加排序版本，使缓存失效\n      const version = (this.sortVersions.get(event) || 0) + 1;\n      this.sortVersions.set(event, version);\n      this.sortedHandlersCache.delete(event);\n\n      this.logDebug(`移除事件处理函数: ${event}`);\n\n      // 如果没有处理函数了，删除整个事件条目\n      if (handlers.length === 0) {\n        this.events.delete(event);\n      }\n    }\n  }\n\n  /**\n   * 异步触发事件\n   * @param event 事件名\n   * @param data 事件数据\n   * @param options 发布选项\n   */\n  public async emit<TData = unknown>(\n    event: EventName,\n    data?: TData,\n    options?: IEventEmitOptions,\n  ): Promise<void> {\n    if (!this.events.has(event)) {\n      this.logDebug(`触发事件（没有监听器）: ${event}`);\n      return;\n    }\n\n    this.logDebug(`异步触发事件: ${event}`);\n\n    // 创建事件上下文\n    const context = createEventContext(event, options, this.namespace);\n\n    // 判断是否需要使用全局超时\n    if (options?.timeout && options.timeout > 0) {\n      try {\n        // 使用Promise.race实现整体超时控制\n        await Promise.race([\n          this.executeHandlers(event, data, context),\n          new Promise((_, reject) => {\n            setTimeout(() => {\n              reject(new HandlerTimeoutError(event, options.timeout!));\n            }, options.timeout);\n          }),\n        ]);\n      } catch (error) {\n        if (error instanceof HandlerTimeoutError) {\n          this.logWarn(`事件整体执行超时: ${event}`, { timeout: options.timeout });\n        } else {\n          this.logError(`事件处理过程中发生错误: ${event}`, { error });\n        }\n      }\n    } else {\n      // 普通执行，无整体超时控制\n      await this.executeHandlers(event, data, context);\n    }\n  }\n\n  /**\n   * 执行事件处理器\n   * @param event 事件名\n   * @param data 事件数据\n   * @param context 事件上下文\n   */\n  private async executeHandlers<TData>(\n    event: EventName,\n    data?: TData,\n    context?: IEventContext,\n  ): Promise<void> {\n    const sortedHandlers = this.getSortedHandlers(event);\n    const onceHandlers: EventHandler<unknown>[] = [];\n    // 收集所有错误\n    const errors: Array<{ error: unknown; handlerId?: string }> = [];\n\n    for (const handlerInfo of sortedHandlers) {\n      // 检查事件传播是否已停止\n      if (context && (context as any).isPropagationStopped?.()) {\n        this.logDebug(`事件传播已停止: ${event}`);\n        break;\n      }\n\n      // 检查过滤条件\n      if (handlerInfo.filter && !handlerInfo.filter(data as unknown)) {\n        continue;\n      }\n\n      // 收集一次性处理函数\n      if (handlerInfo.once) {\n        onceHandlers.push(handlerInfo.handler);\n      }\n\n      try {\n        this.logDebug(`执行事件处理函数: ${event}`, {\n          priority: handlerInfo.priority,\n          handlerId: handlerInfo.id,\n        });\n        const startTime = performance.now();\n\n        // 设置超时处理\n        const timeoutPromise = this.createTimeoutPromise(\n          handlerInfo.handler,\n          event,\n          handlerInfo.timeout,\n          handlerInfo.id,\n        );\n\n        // 执行处理函数并等待结果或超时\n        await Promise.race([\n          // 绑定上下文\n          Promise.resolve(handlerInfo.handler.call(handlerInfo.context, data as unknown, context)),\n          timeoutPromise,\n        ]);\n\n        // 清理超时定时器\n        this.clearHandlerTimeout(handlerInfo.handler);\n\n        const duration = performance.now() - startTime;\n        this.logDebug(`事件处理函数完成: ${event}`, {\n          duration,\n          priority: handlerInfo.priority,\n          handlerId: handlerInfo.id,\n        });\n      } catch (error) {\n        // 清理超时定时器\n        this.clearHandlerTimeout(handlerInfo.handler);\n\n        // 处理错误，根据选项决定是否继续执行后续处理器\n        const catchError = handlerInfo.catchError !== undefined ? handlerInfo.catchError : true;\n\n        if (error instanceof HandlerTimeoutError) {\n          this.logError(`事件处理函数超时: ${event}`, {\n            error,\n            timeout: handlerInfo.timeout,\n            handlerId: handlerInfo.id,\n          });\n\n          // 收集错误\n          errors.push({\n            error,\n            handlerId: handlerInfo.id,\n          });\n        } else {\n          // 创建事件处理器错误\n          const handlerError = new EventHandlerError(event, error, handlerInfo.id);\n\n          this.logError(`事件处理函数异常: ${event}`, {\n            error: handlerError,\n            handlerId: handlerInfo.id,\n          });\n\n          // 收集错误\n          errors.push({\n            error: handlerError,\n            handlerId: handlerInfo.id,\n          });\n\n          // 如果设置不捕获错误，则向上抛出\n          if (!catchError) {\n            throw handlerError;\n          }\n        }\n      }\n    }\n\n    // 移除一次性处理函数\n    for (const handler of onceHandlers) {\n      this.removeHandler(event, handler);\n    }\n\n    // 如果有错误且上下文中有错误处理回调，则调用回调\n    if (errors.length > 0 && context?.meta?.errorCallback) {\n      try {\n        const errorCallback = context.meta.errorCallback as (\n          errors: Array<{ error: unknown; handlerId?: string }>,\n        ) => void;\n        errorCallback(errors);\n      } catch (callbackError) {\n        this.logError(`错误回调执行失败: ${event}`, { error: callbackError });\n      }\n    }\n  }\n\n  /**\n   * 同步触发事件\n   * @param event 事件名\n   * @param data 事件数据\n   * @param options 发布选项\n   */\n  public emitSync<TData = unknown>(\n    event: EventName,\n    data?: TData,\n    options?: Omit<IEventEmitOptions, 'sync'>,\n  ): void {\n    if (!this.events.has(event)) {\n      this.logDebug(`同步触发事件（没有监听器）: ${event}`);\n      return;\n    }\n\n    this.logDebug(`同步触发事件: ${event}`);\n\n    // 创建事件上下文\n    const context = createEventContext(event, options as IEventEmitOptions, this.namespace);\n\n    const sortedHandlers = this.getSortedHandlers(event);\n    const onceHandlers: EventHandler<unknown>[] = [];\n    // 收集所有错误\n    const errors: Array<{ error: unknown; handlerId?: string }> = [];\n\n    for (const handlerInfo of sortedHandlers) {\n      // 检查事件传播是否已停止\n      if (context && (context as any).isPropagationStopped?.()) {\n        this.logDebug(`事件传播已停止: ${event}`);\n        break;\n      }\n\n      // 检查过滤条件\n      if (handlerInfo.filter && !handlerInfo.filter(data as unknown)) {\n        continue;\n      }\n\n      // 收集一次性处理函数\n      if (handlerInfo.once) {\n        onceHandlers.push(handlerInfo.handler);\n      }\n\n      try {\n        this.logDebug(`同步执行事件处理函数: ${event}`, {\n          priority: handlerInfo.priority,\n          handlerId: handlerInfo.id,\n        });\n        const startTime = performance.now();\n\n        // 同步执行处理函数\n        handlerInfo.handler.call(handlerInfo.context, data as unknown, context);\n\n        const duration = performance.now() - startTime;\n        this.logDebug(`同步事件处理函数完成: ${event}`, {\n          duration,\n          priority: handlerInfo.priority,\n          handlerId: handlerInfo.id,\n        });\n      } catch (error) {\n        // 处理错误，根据选项决定是否继续执行后续处理器\n        const catchError = handlerInfo.catchError !== undefined ? handlerInfo.catchError : true;\n\n        const handlerError = new EventHandlerError(event, error, handlerInfo.id);\n\n        this.logError(`同步事件处理函数异常: ${event}`, {\n          error: handlerError,\n          handlerId: handlerInfo.id,\n        });\n\n        // 收集错误\n        errors.push({\n          error: handlerError,\n          handlerId: handlerInfo.id,\n        });\n\n        // 如果设置不捕获错误，则向上抛出\n        if (!catchError) {\n          throw handlerError;\n        }\n      }\n    }\n\n    // 移除一次性处理函数\n    for (const handler of onceHandlers) {\n      this.removeHandler(event, handler);\n    }\n\n    // 如果有错误且上下文中有错误处理回调，则调用回调\n    if (errors.length > 0 && context?.meta?.errorCallback) {\n      try {\n        const errorCallback = context.meta.errorCallback as (\n          errors: Array<{ error: unknown; handlerId?: string }>,\n        ) => void;\n        errorCallback(errors);\n      } catch (callbackError) {\n        this.logError(`错误回调执行失败: ${event}`, { error: callbackError });\n      }\n    }\n  }\n\n  /**\n   * 检查是否存在特定事件的监听器\n   * @param event 事件名\n   * @returns 是否有监听器\n   */\n  public hasListeners(event: EventName): boolean {\n    return this.events.has(event) && this.events.get(event)!.length > 0;\n  }\n\n  /**\n   * 获取事件监听器\n   * @param eventName 事件名称\n   * @returns 该事件的所有监听器\n   */\n  public listeners(eventName: string): Array<IEventListener> {\n    if (!this.events.has(eventName as EventName)) return [];\n\n    // 将IEventHandlerWithPriority转换为IEventListener\n    return this.events.get(eventName as EventName)!.map(handler => {\n      return {\n        handler: handler.handler,\n        options: {\n          once: handler.once,\n          priority: handler.priority,\n          filter: handler.filter,\n          timeout: handler.timeout,\n          context: handler.context,\n          id: handler.id,\n          catchError: handler.catchError,\n        },\n      };\n    });\n  }\n\n  /**\n   * 获取所有已注册的事件名称\n   * @returns 事件名称数组\n   */\n  public getEventNames(): EventName[] {\n    return Array.from(this.events.keys());\n  }\n\n  /**\n   * 获取已排序的事件处理器\n   * @param event 事件名称\n   * @returns 已排序的处理器数组\n   */\n  private getSortedHandlers(event: EventName): IEventHandlerWithPriority[] {\n    if (!this.events.has(event)) {\n      return [];\n    }\n\n    const currentVersion = this.sortVersions.get(event) || 0;\n    const cachedResult = this.sortedHandlersCache.get(event);\n\n    // 如果缓存有效，直接返回\n    if (cachedResult && cachedResult.version === currentVersion) {\n      return cachedResult.handlers;\n    }\n\n    // 重新排序\n    const handlers = this.events.get(event)!;\n    const sorted = [...handlers].sort((a, b) => a.priority - b.priority);\n\n    // 更新缓存\n    this.sortedHandlersCache.set(event, {\n      version: currentVersion,\n      handlers: sorted,\n    });\n\n    return sorted;\n  }\n\n  /**\n   * 移除所有事件监听器\n   * @param eventName 可选的事件名称，如不提供则移除所有事件监听器\n   * @returns this 实例，用于链式调用\n   */\n  public removeAllListeners(eventName?: string): this {\n    if (eventName) {\n      this.off(eventName as EventName);\n    } else {\n      // 清除所有超时定时器\n      this.events.forEach((handlers, event) => {\n        handlers.forEach(h => {\n          this.clearHandlerTimeout(h.handler);\n        });\n        this.logDebug(`移除所有事件处理函数: ${event}`);\n      });\n\n      // 清空事件映射\n      this.events.clear();\n      this.sortedHandlersCache.clear();\n      this.sortVersions.clear();\n      this.logDebug('移除所有事件监听器');\n    }\n\n    return this;\n  }\n\n  /**\n   * 创建超时Promise\n   * @param handler 处理函数\n   * @param event 事件名\n   * @param timeout 超时时间（毫秒）\n   * @param _handlerId 处理器ID\n   */\n  private createTimeoutPromise(\n    handler: EventHandler<unknown>,\n    event: EventName,\n    timeout?: number,\n    _handlerId?: string,\n  ): Promise<never> {\n    if (!timeout || timeout <= 0) return new Promise(() => {});\n\n    return new Promise((_, reject) => {\n      const timer = setTimeout(() => {\n        reject(new HandlerTimeoutError(event, timeout));\n      }, timeout);\n\n      this.timeoutTimers.set(handler, timer);\n    });\n  }\n\n  /**\n   * 清除处理器超时定时器\n   * @param handler 处理函数\n   */\n  private clearHandlerTimeout(handler: EventHandler<unknown>): void {\n    const timer = this.timeoutTimers.get(handler);\n    if (timer) {\n      clearTimeout(timer);\n      this.timeoutTimers.delete(handler);\n    }\n  }\n\n  /**\n   * 记录调试日志\n   * @param message 消息\n   * @param data 数据\n   */\n  private logDebug(message: string, data?: unknown): void {\n    this.logger?.debug('event', message, data);\n  }\n\n  /**\n   * 记录警告日志\n   * @param message 消息\n   * @param data 数据\n   */\n  private logWarn(message: string, data?: unknown): void {\n    this.logger?.warn('event', message, data);\n  }\n\n  /**\n   * 记录错误日志\n   * @param message 消息\n   * @param data 数据\n   */\n  private logError(message: string, data?: unknown): void {\n    this.logger?.error('event', message, data);\n  }\n}\n","/**\n * 基础类型定义\n * 包含文件上传相关的基本类型定义\n * @packageDocumentation\n */\n/**\n * 上传状态枚举\n * 表示文件上传的不同状态\n */\nvar UploadStatus;\n(function (UploadStatus) {\n    /** 待上传 */\n    UploadStatus[\"PENDING\"] = \"pending\";\n    /** 上传中 */\n    UploadStatus[\"UPLOADING\"] = \"uploading\";\n    /** 已暂停 */\n    UploadStatus[\"PAUSED\"] = \"paused\";\n    /** 已取消 */\n    UploadStatus[\"CANCELED\"] = \"canceled\";\n    /** 已完成 */\n    UploadStatus[\"COMPLETED\"] = \"completed\";\n    /** 上传失败 */\n    UploadStatus[\"FAILED\"] = \"failed\";\n})(UploadStatus || (UploadStatus = {}));\n\n/**\n * 配置选项类型定义\n * 包含上传器各种配置选项\n * @packageDocumentation\n */\n/**\n * 日志级别枚举\n * 表示日志输出的不同级别\n */\nvar LogLevel;\n(function (LogLevel) {\n    /** 调试 */\n    LogLevel[\"DEBUG\"] = \"debug\";\n    /** 信息 */\n    LogLevel[\"INFO\"] = \"info\";\n    /** 警告 */\n    LogLevel[\"WARN\"] = \"warn\";\n    /** 错误 */\n    LogLevel[\"ERROR\"] = \"error\";\n    /** 静默（不输出日志） */\n    LogLevel[\"SILENT\"] = \"silent\";\n})(LogLevel || (LogLevel = {}));\n/**\n * 日志格式枚举\n * 表示日志输出的格式\n */\nvar LogFormat;\n(function (LogFormat) {\n    /** 格式化输出 */\n    LogFormat[\"PRETTY\"] = \"pretty\";\n    /** JSON格式 */\n    LogFormat[\"JSON\"] = \"json\";\n})(LogFormat || (LogFormat = {}));\n\n/**\n * 插件状态\n */\nvar PluginState;\n(function (PluginState) {\n    PluginState[\"ENABLED\"] = \"enabled\";\n    PluginState[\"DISABLED\"] = \"disabled\";\n    PluginState[\"PENDING\"] = \"pending\";\n    PluginState[\"FAILED\"] = \"failed\";\n})(PluginState || (PluginState = {}));\n\n/**\n * 事件名称枚举\n * 定义系统中所有可能的事件类型\n */\nvar EventName;\n(function (EventName) {\n    // 上传生命周期事件\n    EventName[\"UPLOAD_START\"] = \"upload:start\";\n    EventName[\"UPLOAD_PROGRESS\"] = \"upload:progress\";\n    EventName[\"UPLOAD_SUCCESS\"] = \"upload:success\";\n    EventName[\"UPLOAD_ERROR\"] = \"upload:error\";\n    EventName[\"UPLOAD_COMPLETE\"] = \"upload:complete\";\n    EventName[\"UPLOAD_PAUSE\"] = \"upload:pause\";\n    EventName[\"UPLOAD_RESUME\"] = \"upload:resume\";\n    EventName[\"UPLOAD_CANCEL\"] = \"upload:cancel\";\n    // 分片上传事件\n    EventName[\"CHUNK_START\"] = \"chunk:start\";\n    EventName[\"CHUNK_PROGRESS\"] = \"chunk:progress\";\n    EventName[\"CHUNK_SUCCESS\"] = \"chunk:success\";\n    EventName[\"CHUNK_ERROR\"] = \"chunk:error\";\n    EventName[\"CHUNK_COMPLETE\"] = \"chunk:complete\";\n    // 重试事件\n    EventName[\"RETRY_START\"] = \"retry:start\";\n    EventName[\"RETRY_SUCCESS\"] = \"retry:success\";\n    EventName[\"RETRY_FAILED\"] = \"retry:failed\";\n    EventName[\"RETRY_WAITING\"] = \"retry:waiting\";\n    EventName[\"RETRY_ADJUSTING\"] = \"retry:adjusting\";\n    // 网络事件\n    EventName[\"NETWORK_ONLINE\"] = \"network:online\";\n    EventName[\"NETWORK_OFFLINE\"] = \"network:offline\";\n    EventName[\"NETWORK_SPEED_CHANGE\"] = \"network:speed-change\";\n    EventName[\"NETWORK_REQUEST\"] = \"network:request\";\n    EventName[\"NETWORK_RESPONSE\"] = \"network:response\";\n    EventName[\"NETWORK_ERROR\"] = \"network:error\";\n    // Worker事件\n    EventName[\"WORKER_TASK\"] = \"worker:task\";\n    EventName[\"WORKER_RESULT\"] = \"worker:result\";\n    EventName[\"WORKER_ERROR\"] = \"worker:error\";\n    // 插件事件\n    EventName[\"PLUGIN_BEFORE\"] = \"plugin:before\";\n    EventName[\"PLUGIN_AFTER\"] = \"plugin:after\";\n    EventName[\"PLUGIN_ERROR\"] = \"plugin:error\";\n    // 存储事件\n    EventName[\"STORAGE_SAVE\"] = \"storage:save\";\n    EventName[\"STORAGE_LOAD\"] = \"storage:load\";\n    EventName[\"STORAGE_REMOVE\"] = \"storage:remove\";\n    EventName[\"STORAGE_ERROR\"] = \"storage:error\";\n    // 其他事件\n    EventName[\"FILE_FILTER\"] = \"file:filter\";\n    EventName[\"FILE_HASH\"] = \"file:hash\";\n    EventName[\"FILE_TRANSFORM\"] = \"file:transform\";\n    // 生命周期事件\n    EventName[\"UPLOADER_INITIALIZED\"] = \"uploader:initialized\";\n    EventName[\"UPLOADER_DESTROYED\"] = \"uploader:destroyed\";\n    // 文件操作事件\n    EventName[\"FILE_ADDED\"] = \"file:added\";\n    EventName[\"FILE_REMOVED\"] = \"file:removed\";\n    EventName[\"FILES_ADDED\"] = \"files:added\";\n})(EventName || (EventName = {}));\n/**\n * 预定义的钩子类型\n */\nvar HookType;\n(function (HookType) {\n    // 文件处理钩子\n    HookType[\"BEFORE_FILE_ADD\"] = \"hook:before_file_add\";\n    HookType[\"AFTER_FILE_ADD\"] = \"hook:after_file_add\";\n    HookType[\"BEFORE_FILE_REMOVE\"] = \"hook:before_file_remove\";\n    // 上传钩子\n    HookType[\"BEFORE_UPLOAD\"] = \"hook:before_upload\";\n    HookType[\"AFTER_UPLOAD\"] = \"hook:after_upload\";\n    HookType[\"BEFORE_PAUSE\"] = \"hook:before_pause\";\n    HookType[\"BEFORE_RESUME\"] = \"hook:before_resume\";\n    HookType[\"BEFORE_CANCEL\"] = \"hook:before_cancel\";\n    // 分片钩子\n    HookType[\"BEFORE_CHUNK_UPLOAD\"] = \"hook:before_chunk_upload\";\n    HookType[\"AFTER_CHUNK_UPLOAD\"] = \"hook:after_chunk_upload\";\n    // 错误处理钩子\n    HookType[\"ON_ERROR\"] = \"hook:on_error\";\n    HookType[\"BEFORE_RETRY\"] = \"hook:before_retry\";\n})(HookType || (HookType = {}));\n/**\n * 事件处理器超时错误\n */\nclass HandlerTimeoutError extends Error {\n    /**\n     * 创建处理器超时错误\n     *\n     * @param event 事件名称\n     * @param timeout 超时时间\n     */\n    constructor(event, timeout) {\n        super(`事件处理器超时: ${event} (${timeout}ms)`);\n        this.name = 'HandlerTimeoutError';\n        this.eventName = event;\n        this.timeout = timeout;\n    }\n}\n/**\n * 事件处理器错误\n */\nclass EventHandlerError extends Error {\n    /**\n     * 创建事件处理器错误\n     *\n     * @param event 事件名称\n     * @param originalError 原始错误\n     * @param handlerId 处理器ID\n     */\n    constructor(event, originalError, handlerId) {\n        const idInfo = handlerId ? ` (处理器ID: ${handlerId})` : '';\n        super(`事件处理器执行失败: ${event}${idInfo}`);\n        this.name = 'EventHandlerError';\n        this.originalError = originalError;\n        this.eventName = event;\n        this.handlerId = handlerId;\n    }\n}\n\n/**\n * 错误类型定义\n * 包含上传错误和错误处理相关接口\n * @packageDocumentation\n */\n/**\n * 错误代码枚举\n * 定义所有可能的错误类型代码\n */\nvar ErrorCode;\n(function (ErrorCode) {\n    // 通用错误\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"unknown_error\";\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"not_implemented\";\n    ErrorCode[\"OPERATION_CANCELED\"] = \"operation_canceled\";\n    ErrorCode[\"TIMEOUT\"] = \"timeout\";\n    ErrorCode[\"INVALID_PARAMETER\"] = \"invalid_parameter\";\n    // 文件错误\n    ErrorCode[\"FILE_NOT_FOUND\"] = \"file_not_found\";\n    ErrorCode[\"FILE_TOO_LARGE\"] = \"file_too_large\";\n    ErrorCode[\"FILE_TYPE_NOT_ALLOWED\"] = \"file_type_not_allowed\";\n    ErrorCode[\"FILE_EMPTY\"] = \"file_empty\";\n    ErrorCode[\"FILE_CORRUPTED\"] = \"file_corrupted\";\n    ErrorCode[\"FILE_READ_ERROR\"] = \"file_read_error\";\n    // 网络错误\n    ErrorCode[\"NETWORK_ERROR\"] = \"network_error\";\n    ErrorCode[\"NETWORK_DISCONNECT\"] = \"network_disconnect\";\n    ErrorCode[\"SERVER_ERROR\"] = \"server_error\";\n    ErrorCode[\"SERVER_TIMEOUT\"] = \"server_timeout\";\n    ErrorCode[\"SERVER_OVERLOAD\"] = \"server_overload\";\n    ErrorCode[\"REQUEST_FAILED\"] = \"request_failed\";\n    ErrorCode[\"RESPONSE_PARSE_ERROR\"] = \"response_parse_error\";\n    // 分片错误\n    ErrorCode[\"CHUNK_UPLOAD_FAILED\"] = \"chunk_upload_failed\";\n    ErrorCode[\"CHUNK_SIZE_INVALID\"] = \"chunk_size_invalid\";\n    ErrorCode[\"CHUNK_OUT_OF_RANGE\"] = \"chunk_out_of_range\";\n    ErrorCode[\"INVALID_CHUNK_SIZE\"] = \"invalid_chunk_size\";\n    // 存储错误\n    ErrorCode[\"STORAGE_ERROR\"] = \"storage_error\";\n    ErrorCode[\"STORAGE_FULL\"] = \"storage_full\";\n    ErrorCode[\"QUOTA_EXCEEDED\"] = \"quota_exceeded\";\n    ErrorCode[\"STORAGE_READ_ERROR\"] = \"storage_read_error\";\n    ErrorCode[\"STORAGE_WRITE_ERROR\"] = \"storage_write_error\";\n    // 插件错误\n    ErrorCode[\"PLUGIN_ERROR\"] = \"plugin_error\";\n    ErrorCode[\"PLUGIN_NOT_FOUND\"] = \"plugin_not_found\";\n    ErrorCode[\"PLUGIN_INITIALIZATION_FAILED\"] = \"plugin_initialization_failed\";\n    ErrorCode[\"PLUGIN_CONFLICT\"] = \"plugin_conflict\";\n    // Worker错误\n    ErrorCode[\"WORKER_ERROR\"] = \"worker_error\";\n    ErrorCode[\"WORKER_NOT_SUPPORTED\"] = \"worker_not_supported\";\n    ErrorCode[\"WORKER_TERMINATED\"] = \"worker_terminated\";\n    ErrorCode[\"WORKER_TIMEOUT\"] = \"worker_timeout\";\n    // 安全错误\n    ErrorCode[\"SECURITY_ERROR\"] = \"security_error\";\n    ErrorCode[\"AUTHENTICATION_FAILED\"] = \"authentication_failed\";\n    ErrorCode[\"AUTHORIZATION_FAILED\"] = \"authorization_failed\";\n    ErrorCode[\"TOKEN_EXPIRED\"] = \"token_expired\";\n    ErrorCode[\"SIGNATURE_INVALID\"] = \"signature_invalid\";\n})(ErrorCode || (ErrorCode = {}));\n\n/**\n * 存储类型枚举\n */\nvar StorageType;\n(function (StorageType) {\n    /** 本地存储 */\n    StorageType[\"LOCAL_STORAGE\"] = \"localStorage\";\n    /** IndexedDB */\n    StorageType[\"INDEXED_DB\"] = \"indexedDB\";\n    /** 内存存储 */\n    StorageType[\"MEMORY\"] = \"memory\";\n    /** 会话存储 */\n    StorageType[\"SESSION_STORAGE\"] = \"sessionStorage\";\n    /** 自定义存储 */\n    StorageType[\"CUSTOM\"] = \"custom\";\n})(StorageType || (StorageType = {}));\n\n/**\n * Worker相关类型定义\n * 包含Worker池和任务类型\n */\n/**\n * Worker任务类型枚举\n */\nvar WorkerTaskType;\n(function (WorkerTaskType) {\n    /** 哈希计算 */\n    WorkerTaskType[\"HASH\"] = \"hash\";\n    /** 分片创建 */\n    WorkerTaskType[\"CHUNK\"] = \"chunk\";\n    /** 内容扫描 */\n    WorkerTaskType[\"SCAN\"] = \"scan\";\n    /** 加密 */\n    WorkerTaskType[\"ENCRYPT\"] = \"encrypt\";\n    /** 解密 */\n    WorkerTaskType[\"DECRYPT\"] = \"decrypt\";\n    /** 压缩 */\n    WorkerTaskType[\"COMPRESS\"] = \"compress\";\n    /** 解压 */\n    WorkerTaskType[\"DECOMPRESS\"] = \"decompress\";\n    /** 图像处理 */\n    WorkerTaskType[\"IMAGE\"] = \"image\";\n})(WorkerTaskType || (WorkerTaskType = {}));\n\nexport { ErrorCode, EventHandlerError, EventName, HandlerTimeoutError, HookType, LogFormat, LogLevel, PluginState, StorageType, UploadStatus, WorkerTaskType };\n//# sourceMappingURL=index.esm.js.map\n","/**\n * 断点续传功能包入口文件\n * 提供断点续传相关的存储管理和续传策略功能\n */\n\n// 导出所有存储相关组件\nexport * from './storage';\n\n// 导出续传策略相关组件\nexport * from './resume-strategy';\n","/**\n * 分片状态管理器\n * 负责处理分片状态的变更和追踪\n */\nimport { ILogger } from '@file-chunk-uploader/types';\n\nimport { IChunkDetail, ChunkStatus } from './types';\n\n/**\n * 分片状态管理器类\n * 处理分片状态的变更、记录和追踪\n */\nexport class ChunkStateManager {\n  /** 当前活跃的上传分片映射 fileId -> Set<chunkIndex> */\n  private activeChunksMap: Map<string, Set<number>> = new Map();\n  /** 日志记录器 */\n  private logger?: ILogger;\n  /** 最大并发分片数 */\n  private maxConcurrentChunks: number;\n\n  /**\n   * 创建分片状态管理器\n   * @param maxConcurrentChunks 最大并发分片数\n   * @param logger 日志记录器\n   */\n  constructor(maxConcurrentChunks: number = 3, logger?: ILogger) {\n    this.maxConcurrentChunks = maxConcurrentChunks;\n    this.logger = logger;\n  }\n\n  /**\n   * 获取指定文件的当前活跃上传分片数\n   * @param fileId 文件ID\n   * @returns 活跃上传分片数\n   */\n  public getActiveChunksCount(fileId: string): number {\n    return this.activeChunksMap.get(fileId)?.size || 0;\n  }\n\n  /**\n   * 检查是否可以上传新的分片（并发控制）\n   * @param fileId 文件ID\n   * @returns 是否可以上传新分片\n   */\n  public canUploadMoreChunks(fileId: string): boolean {\n    const activeChunks = this.activeChunksMap.get(fileId);\n    if (!activeChunks) {\n      return true;\n    }\n    return activeChunks.size < this.maxConcurrentChunks;\n  }\n\n  /**\n   * 标记分片开始上传\n   * @param fileId 文件ID\n   * @param chunkIndex 分片索引\n   */\n  public markChunkAsUploading(fileId: string, chunkIndex: number): void {\n    // 确保文件ID在映射中存在\n    if (!this.activeChunksMap.has(fileId)) {\n      this.activeChunksMap.set(fileId, new Set());\n    }\n\n    // 添加分片到活跃集合\n    this.activeChunksMap.get(fileId)?.add(chunkIndex);\n\n    this.logDebug(`已标记分片为上传中 [文件:${fileId}, 分片:${chunkIndex}]`);\n  }\n\n  /**\n   * 标记分片上传完成\n   * @param fileId 文件ID\n   * @param chunkIndex 分片索引\n   */\n  public markChunkAsComplete(fileId: string, chunkIndex: number): void {\n    // 从活跃集合中移除分片\n    this.activeChunksMap.get(fileId)?.delete(chunkIndex);\n\n    this.logDebug(`已标记分片为完成 [文件:${fileId}, 分片:${chunkIndex}]`);\n  }\n\n  /**\n   * 标记分片上传失败\n   * @param fileId 文件ID\n   * @param chunkIndex 分片索引\n   */\n  public markChunkAsFailed(fileId: string, chunkIndex: number): void {\n    // 从活跃集合中移除分片\n    this.activeChunksMap.get(fileId)?.delete(chunkIndex);\n\n    this.logDebug(`已标记分片为失败 [文件:${fileId}, 分片:${chunkIndex}]`);\n  }\n\n  /**\n   * 标记分片为已暂停\n   * @param fileId 文件ID\n   * @param chunkIndex 分片索引\n   */\n  public markChunkAsPaused(fileId: string, chunkIndex: number): void {\n    // 从活跃集合中移除分片\n    this.activeChunksMap.get(fileId)?.delete(chunkIndex);\n\n    this.logDebug(`已标记分片为暂停 [文件:${fileId}, 分片:${chunkIndex}]`);\n  }\n\n  /**\n   * 重置文件的活跃分片状态\n   * @param fileId 文件ID\n   */\n  public resetActiveChunks(fileId: string): void {\n    this.activeChunksMap.delete(fileId);\n    this.logDebug(`已重置文件的活跃分片状态 [文件:${fileId}]`);\n  }\n\n  /**\n   * 获取所有活跃分片的索引\n   * @param fileId 文件ID\n   * @returns 活跃分片索引数组\n   */\n  public getActiveChunks(fileId: string): number[] {\n    const activeChunks = this.activeChunksMap.get(fileId);\n    if (!activeChunks) {\n      return [];\n    }\n    return Array.from(activeChunks);\n  }\n\n  /**\n   * 检查分片是否处于活跃状态\n   * @param fileId 文件ID\n   * @param chunkIndex 分片索引\n   * @returns 是否活跃\n   */\n  public isChunkActive(fileId: string, chunkIndex: number): boolean {\n    return this.activeChunksMap.get(fileId)?.has(chunkIndex) || false;\n  }\n\n  /**\n   * 更新分片信息\n   * @param chunksDetails 当前分片详情\n   * @param chunkIndex 要更新的分片索引\n   * @param status 新的分片状态\n   * @param error 错误信息（可选）\n   * @returns 更新后的分片详情\n   */\n  public updateChunkInfo(\n    chunksDetails: IChunkDetail[],\n    chunkIndex: number,\n    status: ChunkStatus,\n    error?: string,\n  ): IChunkDetail[] {\n    // 复制一份分片详情数组\n    const updatedChunks = [...chunksDetails];\n    const now = Date.now();\n\n    // 查找要更新的分片\n    const chunkToUpdate = updatedChunks.find(chunk => chunk.index === chunkIndex);\n\n    if (chunkToUpdate) {\n      // 更新现有分片信息\n      chunkToUpdate.status = status;\n      chunkToUpdate.lastAttempt = now;\n\n      // 如果是失败状态且提供了错误信息，则更新错误信息\n      if (status === ChunkStatus.FAILED && error) {\n        chunkToUpdate.lastError = error;\n        chunkToUpdate.retryCount += 1;\n      }\n\n      // 如果是成功状态，清除错误信息\n      if (status === ChunkStatus.SUCCESS) {\n        chunkToUpdate.lastError = undefined;\n      }\n    } else {\n      // 如果分片不存在于数组中，添加新的分片信息\n      updatedChunks.push({\n        index: chunkIndex,\n        status,\n        retryCount: status === ChunkStatus.FAILED ? 1 : 0,\n        lastAttempt: now,\n        lastError: status === ChunkStatus.FAILED ? error : undefined,\n      });\n    }\n\n    return updatedChunks;\n  }\n\n  /**\n   * 清理所有资源\n   */\n  public destroy(): void {\n    this.activeChunksMap.clear();\n    this.logDebug('分片状态管理器已销毁');\n  }\n\n  /**\n   * 记录调试日志\n   * @param message 日志消息\n   * @param data 额外数据\n   */\n  private logDebug(message: string, data?: any): void {\n    if (this.logger?.debug) {\n      this.logger.debug(`[ChunkStateManager] ${message}`, data);\n    }\n  }\n}\n","/**\n * 断点续传策略索引文件\n * 导出断点续传相关组件\n */\n\n// 导出组件\nexport { ResumeUploadStrategy } from './resume-upload-strategy';\nexport { ChunkStateManager } from './chunk-state-manager';\nexport { UploadStateValidator } from './upload-state-validator';\nexport { ProgressCalculator } from './progress-calculator';\n\n// 导出类型\nexport type {\n  IChunkDetail,\n  IExtendedUploadState,\n  IResumeUploadStrategyOptions,\n  IUploadStats,\n  IUploadStateValidationResult,\n} from './types';\nexport { ChunkStatus } from './types';\n\n// 导入实现\nimport { ResumeUploadStrategy } from './resume-upload-strategy';\nimport { ChunkStatus } from './types';\nimport type { IResumeUploadStrategyOptions } from './types';\n\n/**\n * 创建并返回一个续传策略插件\n * @param options 续传策略选项\n * @returns 续传策略插件\n */\nexport const resumable = (options?: IResumeUploadStrategyOptions) => {\n  return {\n    name: 'resumable',\n    version: '1.0.0',\n    install: (uploader: any, opts: any) => {\n      const finalOptions = {\n        maxConcurrentChunks: 3, // 默认并发数\n        cleanupInterval: 24 * 60 * 60 * 1000, // 默认每天清理一次\n        ...options,\n        ...opts,\n      };\n      const resumeStrategy = new ResumeUploadStrategy(finalOptions);\n\n      // 设置事件发射器\n      resumeStrategy.setEventEmitter(uploader.eventEmitter);\n\n      // 注册钩子\n      uploader.hooks.beforeUpload.register(async (file: any) => {\n        // 检查文件是否可以续传\n        const resumeState = await resumeStrategy.checkResumable(file);\n        if (resumeState) {\n          // 将续传状态附加到文件上下文\n          file._resumeState = resumeState;\n\n          // 获取分片详细状态统计\n          const stats = await resumeStrategy.getUploadStats(file.id);\n\n          // 触发续传状态事件\n          uploader.eventEmitter.emit('resume:detected', {\n            fileId: file.id,\n            fileName: file.name,\n            progress: resumeState.progress.percent,\n            uploadedChunks: resumeState.uploadedChunks.length,\n            totalChunks: resumeState.totalChunks,\n            uploaded: stats.uploaded,\n            failed: stats.failed,\n            pending: stats.pending,\n            uploading: stats.uploading,\n            estimatedTimeRemaining: stats.estimatedTimeRemaining,\n          });\n        }\n        return file;\n      });\n\n      // 注册分片处理钩子\n      uploader.hooks.beforeChunkUpload.register(async (params: any) => {\n        const { file, chunks } = params;\n        if (file._resumeState) {\n          // 获取需要上传的分片\n          const pendingChunks = await resumeStrategy.getPendingChunks(file.id, chunks.length);\n          params._pendingChunks = pendingChunks;\n\n          // 添加并发控制\n          if (!resumeStrategy.canUploadMoreChunks(file.id)) {\n            // 如果当前活跃分片数已达到最大并发数，暂停此分片\n            params._shouldSkip = true;\n\n            // 发送并发限制事件\n            uploader.eventEmitter.emit('resume:concurrency_limit', {\n              fileId: file.id,\n              activeChunks: resumeStrategy.getActiveChunksCount(file.id),\n              maxConcurrentChunks: finalOptions.maxConcurrentChunks,\n            });\n          }\n        }\n        return params;\n      });\n\n      // 注册分片开始上传钩子\n      uploader.hooks.beforeChunkRequest?.register(async (params: any) => {\n        const { file, chunkIndex } = params;\n        // 标记分片开始上传\n        resumeStrategy.markChunkAsUploading(file.id, chunkIndex);\n\n        // 发送分片开始上传事件\n        uploader.eventEmitter.emit('resume:chunk_start', {\n          fileId: file.id,\n          chunkIndex,\n          activeChunks: resumeStrategy.getActiveChunksCount(file.id),\n        });\n\n        return params;\n      });\n\n      // 注册分片上传成功钩子\n      uploader.hooks.afterChunkUpload.register(async (result: any) => {\n        const { file, chunkIndex } = result;\n        // 标记分片完成（这个方法内部会更新上传状态，不需要再调用updateUploadedChunk）\n        await resumeStrategy.markChunkAsComplete(file.id, chunkIndex);\n\n        // 获取最新状态\n        const stats = await resumeStrategy.getUploadStats(file.id);\n\n        // 发送分片完成事件\n        uploader.eventEmitter.emit('resume:chunk_complete', {\n          fileId: file.id,\n          chunkIndex,\n          remainingChunks: stats.total - stats.uploaded,\n          uploaded: stats.uploaded,\n          total: stats.total,\n          progress: stats.progress,\n        });\n\n        return result;\n      });\n\n      // 注册分片上传失败钩子\n      uploader.hooks.onChunkError?.register(async (error: any) => {\n        const { file, chunkIndex, error: errorInfo } = error;\n        // 标记分片失败\n        resumeStrategy.markChunkAsFailed(file.id, chunkIndex, errorInfo?.message);\n\n        // 发送分片失败事件\n        uploader.eventEmitter.emit('resume:chunk_failed', {\n          fileId: file.id,\n          chunkIndex,\n          error: errorInfo?.message || '未知错误',\n        });\n\n        return error;\n      });\n\n      // 注册上传完成钩子\n      uploader.hooks.afterUpload.register(async (result: any) => {\n        const { file } = result;\n        // 清理存储\n        await resumeStrategy.completeUpload(file.id);\n\n        // 发送存储清理事件\n        uploader.eventEmitter.emit('resume:storage_cleared', {\n          fileId: file.id,\n          fileName: file.name,\n        });\n\n        return result;\n      });\n\n      // 注册上传暂停钩子\n      uploader.hooks.onPause?.register(async (file: any) => {\n        if (!file) return file;\n\n        try {\n          // 获取当前分片状态并更新所有正在上传的分片为暂停状态\n          const chunksDetails = await resumeStrategy.getChunksDetails(file.id);\n          for (const chunk of chunksDetails) {\n            if (chunk.status === ChunkStatus.UPLOADING) {\n              await resumeStrategy.updateChunkStatus(file.id, chunk.index, ChunkStatus.PAUSED);\n            }\n          }\n\n          // 发送暂停事件\n          uploader.eventEmitter.emit('resume:paused', {\n            fileId: file.id,\n            fileName: file.name,\n          });\n        } catch (error) {\n          console.error('暂停上传时出错', error);\n        }\n\n        return file;\n      });\n\n      // 添加获取上传状态方法\n      uploader.getUploadStats = async (fileId: string) => {\n        return resumeStrategy.getUploadStats(fileId);\n      };\n\n      // 添加获取分片详情方法\n      uploader.getChunksDetails = async (fileId: string) => {\n        return resumeStrategy.getChunksDetails(fileId);\n      };\n\n      // 向上传器添加resumeStrategy引用，以便在需要时直接访问\n      uploader.resumeStrategy = resumeStrategy;\n    },\n\n    // 清理资源\n    cleanup: (uploader: any) => {\n      if (uploader.resumeStrategy) {\n        uploader.resumeStrategy.destroy();\n        delete uploader.resumeStrategy;\n        delete uploader.getUploadStats;\n        delete uploader.getChunksDetails;\n      }\n    },\n  };\n};\n","/**\n * 上传进度计算器\n * 负责计算上传进度和统计信息\n */\nimport { ILogger, IUploadProgress } from '@file-chunk-uploader/types';\n\nimport { ChunkStatus, IChunkDetail, IUploadStats } from './types';\n\n/**\n * 上传进度计算器类\n * 提供各种进度计算和统计功能\n */\nexport class ProgressCalculator {\n  /** 日志记录器 */\n  private logger?: ILogger;\n\n  /**\n   * 创建进度计算器\n   * @param logger 日志记录器\n   */\n  constructor(logger?: ILogger) {\n    this.logger = logger;\n  }\n\n  /**\n   * 计算上传进度\n   * @param fileId 文件ID\n   * @param fileSize 文件大小（字节）\n   * @param chunkSize 分片大小（字节）\n   * @param uploadedChunks 已上传分片索引数组\n   * @returns 上传进度信息和分片统计\n   */\n  public calculateProgress(\n    fileId: string,\n    fileSize: number,\n    chunkSize: number,\n    uploadedChunks: number[],\n  ): IUploadProgress & { totalChunks: number; uploadedChunks: number } {\n    // 计算总分片数\n    const totalChunks = Math.ceil(fileSize / chunkSize);\n\n    // 计算已上传字节数（处理最后一个分片可能不完整的情况）\n    let uploadedBytes = 0;\n\n    uploadedChunks.forEach(chunkIndex => {\n      // 最后一个分片可能小于chunkSize\n      if (chunkIndex === totalChunks - 1) {\n        const lastChunkSize = fileSize % chunkSize || chunkSize;\n        uploadedBytes += lastChunkSize;\n      } else {\n        uploadedBytes += chunkSize;\n      }\n    });\n\n    // 计算进度百分比，确保不超过100%\n    const percent = Math.min(100, Math.floor((uploadedBytes / fileSize) * 100));\n\n    this.logDebug(`计算上传进度 [文件:${fileId}] ${percent}% (${uploadedBytes}/${fileSize}字节)`);\n\n    return {\n      loaded: uploadedBytes,\n      total: fileSize,\n      percent,\n      speed: 0,\n      timeElapsed: 0,\n      timeRemaining: 0,\n      totalChunks,\n      uploadedChunks: uploadedChunks.length,\n    };\n  }\n\n  /**\n   * 获取分片统计信息\n   * @param chunksDetails 分片详情数组\n   * @param totalChunks 总分片数\n   * @returns 统计信息\n   */\n  public getUploadStats(chunksDetails: IChunkDetail[], totalChunks: number): IUploadStats {\n    // 初始化统计数据\n    const stats = {\n      total: totalChunks,\n      uploaded: 0,\n      failed: 0,\n      pending: 0,\n      uploading: 0,\n      progress: 0,\n    };\n\n    // 如果没有分片详情，假设所有分片都是待处理状态\n    if (!chunksDetails || chunksDetails.length === 0) {\n      stats.pending = totalChunks;\n      return stats;\n    }\n\n    // 统计各状态分片数量\n    chunksDetails.forEach(chunk => {\n      switch (chunk.status) {\n        case ChunkStatus.SUCCESS:\n          stats.uploaded++;\n          break;\n        case ChunkStatus.FAILED:\n          stats.failed++;\n          break;\n        case ChunkStatus.UPLOADING:\n          stats.uploading++;\n          break;\n        case ChunkStatus.PENDING:\n        case ChunkStatus.PAUSED:\n        default:\n          stats.pending++;\n          break;\n      }\n    });\n\n    // 计算整体进度百分比\n    stats.progress = totalChunks > 0 ? Math.floor((stats.uploaded / totalChunks) * 100) : 0;\n\n    // 确保待处理分片数量正确（考虑可能有些分片还没有添加到详情中）\n    const accountedChunks = stats.uploaded + stats.failed + stats.uploading + stats.pending;\n    if (accountedChunks < totalChunks) {\n      stats.pending += totalChunks - accountedChunks;\n    }\n\n    return stats;\n  }\n\n  /**\n   * 估算剩余上传时间\n   * @param uploadStats 上传统计信息\n   * @param uploadSpeed 当前上传速度（字节/秒）\n   * @param chunkSize 分片大小（字节）\n   * @returns 估计剩余时间（秒）\n   */\n  public estimateRemainingTime(\n    uploadStats: IUploadStats,\n    uploadSpeed: number,\n    chunkSize: number,\n  ): number | undefined {\n    // 如果没有速度数据或已完成，返回undefined\n    if (!uploadSpeed || uploadSpeed <= 0 || uploadStats.progress >= 100) {\n      return undefined;\n    }\n\n    // 计算剩余分片数\n    const remainingChunks = uploadStats.total - uploadStats.uploaded;\n    if (remainingChunks <= 0) {\n      return 0;\n    }\n\n    // 计算剩余字节数（简化计算，假设所有分片大小相同）\n    const remainingBytes = remainingChunks * chunkSize;\n\n    // 计算剩余时间（秒）\n    const remainingTimeSeconds = Math.ceil(remainingBytes / uploadSpeed);\n\n    this.logDebug(\n      `估计剩余时间: ${remainingTimeSeconds}秒 (速度: ${this.formatSpeed(uploadSpeed)})`,\n    );\n\n    return remainingTimeSeconds;\n  }\n\n  /**\n   * 格式化上传速度为人类可读格式\n   * @param bytesPerSecond 每秒字节数\n   * @returns 格式化后的速度字符串\n   */\n  public formatSpeed(bytesPerSecond: number): string {\n    if (bytesPerSecond >= 1024 * 1024) {\n      return `${(bytesPerSecond / (1024 * 1024)).toFixed(2)} MB/s`;\n    } else if (bytesPerSecond >= 1024) {\n      return `${(bytesPerSecond / 1024).toFixed(2)} KB/s`;\n    } else {\n      return `${Math.round(bytesPerSecond)} B/s`;\n    }\n  }\n\n  /**\n   * 记录调试日志\n   * @param message 日志消息\n   * @param data 额外数据\n   */\n  private logDebug(message: string, data?: any): void {\n    if (this.logger?.debug) {\n      this.logger.debug(`[ProgressCalculator] ${message}`, data);\n    }\n  }\n}\n","/**\n * 断点续传策略实现\n * 负责实现上传状态保存、断点检测和恢复逻辑\n */\nimport {\n  IEventEmitter,\n  IFileInfo,\n  IUploadProgress,\n  UploadStatus,\n  IFileChunkResult,\n  ILogger,\n  IStorageManager,\n  IStorageOptions,\n  IUploadConfig,\n  StorageType,\n} from '@file-chunk-uploader/types';\n\nimport { StorageManager } from '../storage';\n\nimport { ChunkStateManager } from './chunk-state-manager';\nimport { ProgressCalculator } from './progress-calculator';\nimport {\n  ChunkStatus,\n  IChunkDetail,\n  IExtendedUploadState,\n  IResumeUploadStrategyOptions,\n} from './types';\nimport { UploadStateValidator } from './upload-state-validator';\n\n/**\n * 续传上传策略类\n * 实现断点续传功能，包括状态保存、断点检测和恢复逻辑\n */\nexport class ResumeUploadStrategy {\n  /** 存储管理器 */\n  private storageManager: IStorageManager;\n  /** 事件发射器 */\n  private eventEmitter?: IEventEmitter;\n  /** 分片状态管理器 */\n  private chunkStateManager: ChunkStateManager;\n  /** 上传状态验证器 */\n  private uploadStateValidator: UploadStateValidator;\n  /** 进度计算器 */\n  private progressCalculator: ProgressCalculator;\n  /** 配置选项 */\n  private options: {\n    storage: IStorageOptions;\n    enabled: boolean;\n    maxStorageTime: number;\n    maxConcurrentChunks: number;\n    visualizationCallback?: (fileId: string, chunksInfo: IChunkDetail[]) => void;\n    cleanupInterval: number;\n    logger?: ILogger;\n  };\n  /** 日志记录器 */\n  private logger?: ILogger;\n  /** 是否启用 */\n  private enabled: boolean;\n  /** 清理定时器ID */\n  private cleanupTimer?: NodeJS.Timeout;\n\n  /**\n   * 创建续传策略实例\n   * @param options 续传策略配置选项\n   */\n  constructor(options: IResumeUploadStrategyOptions = {}) {\n    // 设置默认选项\n    this.options = {\n      storage: options.storage || {},\n      enabled: options.enabled !== false,\n      maxStorageTime: options.maxStorageTime || 7 * 24 * 60 * 60 * 1000, // 默认7天\n      maxConcurrentChunks: options.maxConcurrentChunks || 3, // 默认并发3个分片\n      visualizationCallback: options.visualizationCallback,\n      cleanupInterval: options.cleanupInterval || 24 * 60 * 60 * 1000, // 默认每天清理一次\n      logger: options.logger,\n    };\n\n    this.enabled = this.options.enabled;\n    this.logger = this.options.logger;\n\n    // 创建存储管理器\n    this.storageManager = new StorageManager(this.options.storage);\n\n    // 创建分片状态管理器\n    this.chunkStateManager = new ChunkStateManager(this.options.maxConcurrentChunks, this.logger);\n\n    // 创建上传状态验证器\n    this.uploadStateValidator = new UploadStateValidator();\n\n    // 创建进度计算器\n    this.progressCalculator = new ProgressCalculator(this.logger);\n\n    // 定期清理过期数据\n    this.scheduleCleanup();\n  }\n\n  /**\n   * 销毁实例，清理资源\n   * 在组件销毁或不再需要时必须调用此方法，防止内存泄漏\n   */\n  public destroy(): void {\n    // 清理定时器，防止内存泄漏\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = undefined;\n    }\n\n    // 清理分片状态管理器\n    this.chunkStateManager.destroy();\n\n    // 解除事件发射器引用\n    this.eventEmitter = undefined;\n\n    this.logInfo('续传策略实例已销毁，资源已释放');\n  }\n\n  /**\n   * 设置事件发射器\n   * @param emitter 事件发射器实例\n   */\n  public setEventEmitter(emitter: IEventEmitter): void {\n    this.eventEmitter = emitter;\n  }\n\n  /**\n   * 启用或禁用断点续传\n   * @param enabled 是否启用\n   */\n  public setEnabled(enabled: boolean): void {\n    this.enabled = enabled;\n  }\n\n  /**\n   * 获取指定文件的当前活跃上传分片数\n   * @param fileId 文件ID\n   * @returns 活跃上传分片数\n   */\n  public getActiveChunksCount(fileId: string): number {\n    return this.chunkStateManager.getActiveChunksCount(fileId);\n  }\n\n  /**\n   * 检查是否可以上传新的分片（并发控制）\n   * @param fileId 文件ID\n   * @returns 是否可以上传新分片\n   */\n  public canUploadMoreChunks(fileId: string): boolean {\n    return this.chunkStateManager.canUploadMoreChunks(fileId);\n  }\n\n  /**\n   * 标记分片开始上传\n   * @param fileId 文件ID\n   * @param chunkIndex 分片索引\n   */\n  public markChunkAsUploading(fileId: string, chunkIndex: number): void {\n    this.chunkStateManager.markChunkAsUploading(fileId, chunkIndex);\n  }\n\n  /**\n   * 标记分片上传完成\n   * @param fileId 文件ID\n   * @param chunkIndex 分片索引\n   */\n  public async markChunkAsComplete(fileId: string, chunkIndex: number): Promise<void> {\n    // 更新分片状态管理器\n    this.chunkStateManager.markChunkAsComplete(fileId, chunkIndex);\n\n    // 更新上传状态\n    await this.updateUploadedChunk(fileId, chunkIndex);\n  }\n\n  /**\n   * 标记分片上传失败\n   * @param fileId 文件ID\n   * @param chunkIndex 分片索引\n   * @param error 错误信息\n   */\n  public markChunkAsFailed(fileId: string, chunkIndex: number, error?: string): void {\n    // 更新分片状态管理器\n    this.chunkStateManager.markChunkAsFailed(fileId, chunkIndex);\n\n    // 更新分片状态\n    this.updateChunkStatus(fileId, chunkIndex, ChunkStatus.FAILED, error);\n  }\n\n  /**\n   * 更新分片状态\n   * @param fileId 文件ID\n   * @param chunkIndex 分片索引\n   * @param status 分片状态\n   * @param error 错误信息\n   */\n  public async updateChunkStatus(\n    fileId: string,\n    chunkIndex: number,\n    status: ChunkStatus,\n    error?: string,\n  ): Promise<void> {\n    try {\n      // 获取存储的上传状态\n      const state = await this.storageManager.getUploadState(fileId);\n      if (!state) {\n        this.logDebug(`未找到上传状态，无法更新分片状态 [文件:${fileId}, 分片:${chunkIndex}]`);\n        return;\n      }\n\n      // 转换为扩展上传状态\n      const extendedState = state as IExtendedUploadState;\n      if (!extendedState.chunksDetails) {\n        extendedState.chunksDetails = [];\n      }\n\n      // 更新分片状态\n      extendedState.chunksDetails = this.chunkStateManager.updateChunkInfo(\n        extendedState.chunksDetails,\n        chunkIndex,\n        status,\n        error,\n      );\n\n      // 更新上传状态\n      extendedState.lastUpdated = Date.now();\n\n      // 保存更新后的状态\n      await this.storageManager.saveUploadState(fileId, extendedState);\n\n      // 更新UI可视化（如果提供了回调）\n      this.updateVisualization(fileId, extendedState.chunksDetails);\n\n      this.logDebug(`已更新分片状态 [文件:${fileId}, 分片:${chunkIndex}, 状态:${status}]`);\n    } catch (error) {\n      this.logError(`更新分片状态失败 [文件:${fileId}, 分片:${chunkIndex}]`, error);\n    }\n  }\n\n  /**\n   * 检查文件是否可以断点续传\n   * @param fileInfo 文件信息\n   * @returns 上传状态或null（如果不可续传）\n   */\n  public async checkResumable(fileInfo: IFileInfo): Promise<IExtendedUploadState | null> {\n    if (!this.enabled) {\n      this.logDebug(`断点续传已禁用，跳过检查 [文件:${fileInfo.id}]`);\n      return null;\n    }\n\n    try {\n      // 从存储中获取上传状态\n      const state = await this.storageManager.getUploadState(fileInfo.id);\n      if (!state) {\n        this.logDebug(`未找到上传状态 [文件:${fileInfo.id}]`);\n        return null;\n      }\n\n      // 验证上传状态\n      const validationResult = this.uploadStateValidator.validateUploadState(\n        state as IExtendedUploadState,\n        fileInfo,\n      );\n      if (!validationResult.valid) {\n        this.logDebug(\n          `上传状态验证失败 [文件:${fileInfo.id}]: ${validationResult.reason}`,\n          validationResult.details,\n        );\n        return null;\n      }\n\n      // 转换为扩展上传状态\n      const extendedState = state as IExtendedUploadState;\n      if (!extendedState.chunksDetails) {\n        extendedState.chunksDetails = [];\n      }\n\n      // 更新并发配置\n      extendedState.maxConcurrentChunks = this.options.maxConcurrentChunks;\n\n      // 重置活跃分片状态\n      this.chunkStateManager.resetActiveChunks(fileInfo.id);\n\n      // 重置所有处于上传中状态的分片为暂停状态\n      const updatedChunksDetails = extendedState.chunksDetails.map(chunk => {\n        if (chunk.status === ChunkStatus.UPLOADING) {\n          return { ...chunk, status: ChunkStatus.PAUSED };\n        }\n        return chunk;\n      });\n\n      extendedState.chunksDetails = updatedChunksDetails;\n\n      // 更新上传状态，标记为已恢复\n      extendedState.status = UploadStatus.UPLOADING;\n      extendedState.lastUpdated = Date.now();\n\n      // 保存更新后的状态\n      await this.storageManager.saveUploadState(fileInfo.id, extendedState);\n\n      // 更新UI可视化\n      this.updateVisualization(fileInfo.id, updatedChunksDetails);\n\n      this.logInfo(`找到可续传的上传状态 [文件:${fileInfo.id}]`, {\n        uploadedChunks: extendedState.uploadedChunks.length,\n        totalChunks: extendedState.totalChunks,\n        progress: extendedState.progress.percent,\n      });\n\n      return extendedState;\n    } catch (error) {\n      this.logError(`检查续传状态失败 [文件:${fileInfo.id}]`, error);\n      return null;\n    }\n  }\n\n  /**\n   * 保存上传状态\n   * @param fileInfo 文件信息\n   * @param chunkResult 分片结果\n   * @param uploadedChunks 已上传分片索引数组\n   * @param status 上传状态\n   * @param progress 上传进度\n   */\n  public async saveUploadState(\n    fileInfo: IFileInfo,\n    chunkResult: IFileChunkResult,\n    uploadedChunks: number[],\n    status: UploadStatus = UploadStatus.UPLOADING,\n    progress?: IUploadProgress,\n  ): Promise<void> {\n    if (!this.enabled) {\n      return;\n    }\n\n    try {\n      // 获取现有状态或创建新状态\n      const state =\n        ((await this.storageManager.getUploadState(fileInfo.id)) as IExtendedUploadState) || {};\n\n      // 获取分片详情\n      const chunksDetails = state.chunksDetails || [];\n\n      // 如果没有提供进度信息，计算进度\n      if (!progress) {\n        progress = this.progressCalculator.calculateProgress(\n          fileInfo.id,\n          fileInfo.size,\n          chunkResult.chunkSize,\n          uploadedChunks,\n        );\n      }\n\n      // 更新上传状态\n      const updatedState: IExtendedUploadState = {\n        ...state,\n        fileId: fileInfo.id,\n        fileName: fileInfo.name,\n        fileSize: fileInfo.size,\n        lastModified: fileInfo.lastModified,\n        uploadedChunks,\n        totalChunks: Math.ceil(fileInfo.size / chunkResult.chunkSize),\n        chunkSize: chunkResult.chunkSize,\n        progress,\n        status,\n        lastUpdated: Date.now(),\n        chunksDetails,\n        maxConcurrentChunks: this.options.maxConcurrentChunks,\n      };\n\n      // 保存状态到存储\n      await this.storageManager.saveUploadState(fileInfo.id, updatedState);\n\n      // 更新UI可视化\n      this.updateVisualization(fileInfo.id, chunksDetails);\n\n      this.logDebug(`已保存上传状态 [文件:${fileInfo.id}]`, {\n        progress: progress.percent,\n        uploadedChunks: uploadedChunks.length,\n        totalChunks: Math.ceil(fileInfo.size / chunkResult.chunkSize),\n      });\n    } catch (error) {\n      this.logError(`保存上传状态失败 [文件:${fileInfo.id}]`, error);\n    }\n  }\n\n  /**\n   * 更新已上传的分片信息\n   * @param fileId 文件ID\n   * @param chunkIndex 分片索引\n   */\n  public async updateUploadedChunk(fileId: string, chunkIndex: number): Promise<void> {\n    if (!this.enabled) {\n      return;\n    }\n\n    try {\n      // 获取上传状态\n      const state = await this.storageManager.getUploadState(fileId);\n      if (!state) {\n        this.logDebug(`未找到上传状态，无法更新分片 [文件:${fileId}, 分片:${chunkIndex}]`);\n        return;\n      }\n\n      // 检查分片是否已经标记为已上传\n      const uploadedChunks = state.uploadedChunks || [];\n      if (uploadedChunks.includes(chunkIndex)) {\n        return; // 分片已经标记为已上传，不需要再次更新\n      }\n\n      // 添加分片到已上传列表\n      uploadedChunks.push(chunkIndex);\n\n      // 更新分片状态\n      const extendedState = state as IExtendedUploadState;\n      if (!extendedState.chunksDetails) {\n        extendedState.chunksDetails = [];\n      }\n\n      // 更新分片状态为成功\n      extendedState.chunksDetails = this.chunkStateManager.updateChunkInfo(\n        extendedState.chunksDetails,\n        chunkIndex,\n        ChunkStatus.SUCCESS,\n      );\n\n      // 更新进度\n      const progress = this.progressCalculator.calculateProgress(\n        fileId,\n        (state as IExtendedUploadState).fileSize,\n        (state as IExtendedUploadState).chunkSize,\n        uploadedChunks,\n      );\n\n      // 更新状态\n      extendedState.uploadedChunks = uploadedChunks;\n      extendedState.progress = progress;\n      extendedState.lastUpdated = Date.now();\n\n      // 保存更新后的状态\n      await this.storageManager.saveUploadState(fileId, extendedState);\n\n      // 更新UI可视化\n      this.updateVisualization(fileId, extendedState.chunksDetails);\n\n      this.logDebug(`已更新上传分片 [文件:${fileId}, 分片:${chunkIndex}]`, {\n        progress: progress.percent,\n        uploadedChunks: uploadedChunks.length,\n        totalChunks: Math.ceil(\n          (state as IExtendedUploadState).fileSize / (state as IExtendedUploadState).chunkSize,\n        ),\n      });\n    } catch (error) {\n      this.logError(`更新上传分片失败 [文件:${fileId}, 分片:${chunkIndex}]`, error);\n    }\n  }\n\n  /**\n   * 完成上传，清理状态\n   * @param fileId 文件ID\n   */\n  public async completeUpload(fileId: string): Promise<void> {\n    try {\n      // 清理分片状态管理器中的记录\n      this.chunkStateManager.resetActiveChunks(fileId);\n\n      // 清理存储中的上传状态\n      await this.storageManager.deleteFile(fileId);\n\n      this.logInfo(`已完成上传并清理状态 [文件:${fileId}]`);\n    } catch (error) {\n      this.logError(`完成上传清理状态失败 [文件:${fileId}]`, error);\n    }\n  }\n\n  /**\n   * 获取待上传的分片\n   * @param fileId 文件ID\n   * @param totalChunks 总分片数\n   * @returns 待上传分片索引数组\n   */\n  public async getPendingChunks(fileId: string, totalChunks: number): Promise<number[]> {\n    if (!this.enabled) {\n      // 如果断点续传禁用，返回所有分片\n      return Array.from({ length: totalChunks }, (_, i) => i);\n    }\n\n    try {\n      // 获取上传状态\n      const state = await this.storageManager.getUploadState(fileId);\n      if (!state || !state.uploadedChunks) {\n        // 如果没有找到上传状态或没有已上传分片记录，返回所有分片\n        return Array.from({ length: totalChunks }, (_, i) => i);\n      }\n\n      // 获取已上传的分片\n      const uploadedChunks = state.uploadedChunks;\n\n      // 计算待上传的分片（所有分片索引中排除已上传的）\n      const pendingChunks = [];\n      for (let i = 0; i < totalChunks; i++) {\n        if (!uploadedChunks.includes(i)) {\n          pendingChunks.push(i);\n        }\n      }\n\n      this.logDebug(`获取待上传分片 [文件:${fileId}]`, {\n        pendingChunks: pendingChunks.length,\n        uploadedChunks: uploadedChunks.length,\n        totalChunks,\n      });\n\n      return pendingChunks;\n    } catch (error) {\n      this.logError(`获取待上传分片失败 [文件:${fileId}]`, error);\n      // 出错时返回所有分片\n      return Array.from({ length: totalChunks }, (_, i) => i);\n    }\n  }\n\n  /**\n   * 获取分片详情\n   * @param fileId 文件ID\n   * @returns 分片详情数组\n   */\n  public async getChunksDetails(fileId: string): Promise<IChunkDetail[]> {\n    try {\n      // 获取上传状态\n      const state = (await this.storageManager.getUploadState(fileId)) as IExtendedUploadState;\n      if (!state || !state.chunksDetails) {\n        return [];\n      }\n\n      return state.chunksDetails;\n    } catch (error) {\n      this.logError(`获取分片详情失败 [文件:${fileId}]`, error);\n      return [];\n    }\n  }\n\n  /**\n   * 配置上传器\n   * @param config 上传配置\n   * @returns 更新后的配置\n   */\n  public configureUploader(config: IUploadConfig): IUploadConfig {\n    // 使用类型断言解决类型问题\n    const updatedConfig = {\n      ...config,\n      storage: {\n        ...(config.storage || {}),\n      },\n    } as IUploadConfig;\n\n    return updatedConfig;\n  }\n\n  /**\n   * 转换存储类型\n   * @param type 存储类型\n   * @returns 转换后的存储类型\n   */\n  private convertStorageType(type?: StorageType): StorageType | undefined {\n    return type;\n  }\n\n  /**\n   * 获取上传统计信息\n   * @param fileId 文件ID\n   * @returns 上传统计信息\n   */\n  public async getUploadStats(fileId: string): Promise<{\n    total: number;\n    uploaded: number;\n    failed: number;\n    pending: number;\n    uploading: number;\n    progress: number;\n    estimatedTimeRemaining?: number;\n  }> {\n    try {\n      // 获取上传状态\n      const state = (await this.storageManager.getUploadState(fileId)) as IExtendedUploadState;\n      if (!state) {\n        return {\n          total: 0,\n          uploaded: 0,\n          failed: 0,\n          pending: 0,\n          uploading: 0,\n          progress: 0,\n        };\n      }\n\n      // 获取分片详情\n      const chunksDetails = state.chunksDetails || [];\n\n      // 计算统计信息\n      return this.progressCalculator.getUploadStats(chunksDetails, state.totalChunks);\n    } catch (error) {\n      this.logError(`获取上传统计信息失败 [文件:${fileId}]`, error);\n      return {\n        total: 0,\n        uploaded: 0,\n        failed: 0,\n        pending: 0,\n        uploading: 0,\n        progress: 0,\n      };\n    }\n  }\n\n  /**\n   * 更新UI可视化\n   * @param fileId 文件ID\n   * @param chunksDetails 分片详情数组\n   */\n  private updateVisualization(fileId: string, chunksDetails: IChunkDetail[]): void {\n    if (this.options.visualizationCallback) {\n      try {\n        this.options.visualizationCallback(fileId, chunksDetails);\n      } catch (error) {\n        this.logError('执行可视化回调失败', error);\n      }\n    }\n  }\n\n  /**\n   * 安排定期清理过期数据\n   */\n  private scheduleCleanup(): void {\n    // 清理已有的定时器\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n\n    // 设置新的定时器\n    this.cleanupTimer = setInterval(() => {\n      this.cleanupExpiredData();\n    }, this.options.cleanupInterval);\n  }\n\n  /**\n   * 清理过期数据\n   */\n  private async cleanupExpiredData(): Promise<void> {\n    try {\n      const cleanupTime = Date.now() - this.options.maxStorageTime;\n      await this.storageManager.cleanupExpiredData(cleanupTime);\n      this.logInfo('已清理过期数据');\n    } catch (error) {\n      this.logError('清理过期数据失败', error);\n    }\n  }\n\n  /**\n   * 记录调试日志\n   * @param message 日志消息\n   * @param data 额外数据\n   */\n  private logDebug(message: string, data?: any): void {\n    if (this.logger?.debug) {\n      this.logger.debug(`[ResumeStrategy] ${message}`, data);\n    }\n  }\n\n  /**\n   * 记录信息日志\n   * @param message 日志消息\n   * @param data 额外数据\n   */\n  private logInfo(message: string, data?: any): void {\n    if (this.logger?.info) {\n      this.logger.info(`[ResumeStrategy] ${message}`, data);\n    }\n  }\n\n  /**\n   * 记录错误日志\n   * @param message 日志消息\n   * @param error 错误对象\n   */\n  private logError(message: string, error: any): void {\n    if (this.logger?.error) {\n      this.logger.error(`[ResumeStrategy] ${message}`, error);\n    }\n  }\n}\n","/**\n * 断点续传策略类型定义\n */\nimport {\n  IUploadProgress,\n  UploadStatus,\n  ILogger,\n  IStorageOptions,\n  IUploadState,\n  IUploadConfig,\n} from '@file-chunk-uploader/types';\n\n/**\n * 分片状态枚举\n * 用于更细粒度地追踪每个分片的状态\n */\nexport enum ChunkStatus {\n  /** 等待上传 */\n  PENDING = 'pending',\n  /** 正在上传 */\n  UPLOADING = 'uploading',\n  /** 上传成功 */\n  SUCCESS = 'success',\n  /** 上传失败 */\n  FAILED = 'failed',\n  /** 已暂停 */\n  PAUSED = 'paused',\n}\n\n/**\n * 分片详细信息\n */\nexport interface IChunkDetail {\n  /** 分片索引 */\n  index: number;\n  /** 分片状态 */\n  status: ChunkStatus;\n  /** 重试次数 */\n  retryCount: number;\n  /** 最近一次上传尝试的时间戳 */\n  lastAttempt?: number;\n  /** 最近一次错误信息 */\n  lastError?: string;\n}\n\n/**\n * 续传策略配置接口\n */\nexport interface IResumeUploadStrategyOptions {\n  /** 存储选项 */\n  storage?: IStorageOptions;\n  /** 是否启用断点续传 */\n  enabled?: boolean;\n  /** 最大存储时间（毫秒），超过此时间的上传状态将被清理 */\n  maxStorageTime?: number;\n  /** 最大并发分片数 */\n  maxConcurrentChunks?: number;\n  /** 分片可视化回调函数 */\n  visualizationCallback?: (fileId: string, chunksInfo: IChunkDetail[]) => void;\n  /** 自动清理间隔（毫秒） */\n  cleanupInterval?: number;\n  /** 日志记录器 */\n  logger?: ILogger;\n}\n\n/**\n * 扩展的上传状态，包含断点续传特定信息\n */\nexport interface IExtendedUploadState extends IUploadState {\n  /** 文件ID */\n  fileId: string;\n  /** 文件名称 */\n  fileName: string;\n  /** 文件大小（字节） */\n  fileSize: number;\n  /** 文件最后修改时间 */\n  lastModified: number;\n  /** 已上传分片索引数组 */\n  uploadedChunks: number[];\n  /** 总分片数 */\n  totalChunks: number;\n  /** 分片大小（字节） */\n  chunkSize: number;\n  /** 上传进度 */\n  progress: IUploadProgress;\n  /** 上传状态 */\n  status: UploadStatus;\n  /** 最后更新时间戳 */\n  lastUpdated: number;\n  /** 上传配置 */\n  config?: IUploadConfig;\n  /** 分片详情数组 */\n  chunksDetails: IChunkDetail[];\n  /** 最大并发分片数 */\n  maxConcurrentChunks?: number;\n  /** 自定义数据 */\n  customData?: Record<string, any>;\n}\n\n/**\n * 上传统计信息\n */\nexport interface IUploadStats {\n  /** 总分片数 */\n  total: number;\n  /** 已上传分片数 */\n  uploaded: number;\n  /** 上传失败分片数 */\n  failed: number;\n  /** 待上传分片数 */\n  pending: number;\n  /** 正在上传分片数 */\n  uploading: number;\n  /** 上传进度百分比 */\n  progress: number;\n  /** 估计剩余时间（秒） */\n  estimatedTimeRemaining?: number;\n}\n\n/**\n * 上传状态验证结果\n */\nexport interface IUploadStateValidationResult {\n  /** 是否有效 */\n  valid: boolean;\n  /** 无效原因 */\n  reason?: string;\n  /** 是否可恢复 */\n  recoverable?: boolean;\n  /** 详细信息 */\n  details?: Record<string, any>;\n}\n","/**\n * 上传状态验证器\n * 负责验证上传状态的有效性\n */\nimport { IFileInfo } from '@file-chunk-uploader/types';\n\nimport { IExtendedUploadState } from './types';\nimport { IUploadStateValidationResult } from './types';\n\n/**\n * 上传状态验证器类\n * 验证上传状态的有效性，确保断点续传安全\n */\nexport class UploadStateValidator {\n  /**\n   * 验证上传状态是否有效\n   * @param state 上传状态\n   * @param fileInfo 文件信息\n   * @returns 验证结果\n   */\n  public validateUploadState(\n    state: IExtendedUploadState,\n    fileInfo: IFileInfo & { config?: { chunkSize: number; target: string } },\n  ): IUploadStateValidationResult {\n    // 如果状态不存在，则无效\n    if (!state) {\n      return {\n        valid: false,\n        reason: 'state_missing',\n        recoverable: false,\n      };\n    }\n\n    // 基本验证：文件ID和名称\n    if (state.fileId !== fileInfo.id) {\n      return {\n        valid: false,\n        reason: 'file_id_mismatch',\n        recoverable: false,\n        details: {\n          expectedId: state.fileId,\n          actualId: fileInfo.id,\n        },\n      };\n    }\n\n    // 文件名验证（允许文件名变化，但记录为警告）\n    const fileNameChanged = state.fileName !== fileInfo.name;\n\n    // 文件大小验证 - 这是必须匹配的\n    if (state.fileSize !== fileInfo.size) {\n      return {\n        valid: false,\n        reason: 'file_size_mismatch',\n        recoverable: false,\n        details: {\n          expectedSize: state.fileSize,\n          actualSize: fileInfo.size,\n        },\n      };\n    }\n\n    // 最后修改时间验证 - 如果不匹配，可能文件内容已变化\n    if (state.lastModified !== fileInfo.lastModified) {\n      return {\n        valid: false,\n        reason: 'last_modified_mismatch',\n        recoverable: false,\n        details: {\n          expectedLastModified: state.lastModified,\n          actualLastModified: fileInfo.lastModified,\n          timeDifference: Math.abs(state.lastModified - fileInfo.lastModified),\n        },\n      };\n    }\n\n    // 检查分片信息是否存在\n    if (!state.uploadedChunks || !Array.isArray(state.uploadedChunks)) {\n      return {\n        valid: false,\n        reason: 'chunks_info_missing',\n        recoverable: true,\n      };\n    }\n\n    // 验证上传配置是否兼容\n    if (state.config && fileInfo.config) {\n      // 验证分片大小 - 如果分片大小变化，可能导致分片索引错位\n      if ((state.config as any).chunkSize !== fileInfo.config.chunkSize) {\n        return {\n          valid: false,\n          reason: 'chunk_size_mismatch',\n          recoverable: false,\n          details: {\n            expectedChunkSize: (state.config as any).chunkSize,\n            actualChunkSize: fileInfo.config.chunkSize,\n          },\n        };\n      }\n\n      // 验证上传目标URL - 如果变化，可能需要重新上传\n      if ((state.config as any).target !== fileInfo.config.target) {\n        return {\n          valid: false,\n          reason: 'target_url_mismatch',\n          recoverable: false,\n          details: {\n            expectedTarget: (state.config as any).target,\n            actualTarget: fileInfo.config.target,\n          },\n        };\n      }\n    }\n\n    // 检查上传时间是否过期\n    const now = Date.now();\n    const maxUploadAge = 7 * 24 * 60 * 60 * 1000; // 默认7天\n    const uploadAge = now - (state.lastUpdated || 0);\n\n    if (uploadAge > maxUploadAge) {\n      return {\n        valid: false,\n        reason: 'upload_expired',\n        recoverable: false,\n        details: {\n          age: uploadAge,\n          maxAge: maxUploadAge,\n        },\n      };\n    }\n\n    // 所有验证通过，但文件名可能已变化\n    if (fileNameChanged) {\n      return {\n        valid: true,\n        reason: 'file_name_changed',\n        details: {\n          expectedName: state.fileName,\n          actualName: fileInfo.name,\n        },\n      };\n    }\n\n    // 验证通过\n    return { valid: true };\n  }\n}\n","/**\n * 数据压缩工具类\n * 提供用于压缩和解压数据的工具方法\n */\n\n/**\n * 压缩Blob数据\n * @param data 要压缩的数据\n * @param method 压缩方法\n * @returns 压缩后的数据\n */\nexport async function compressData(\n  data: Blob,\n  method: 'gzip' | 'deflate' | 'custom' = 'gzip',\n  customCompressor?: (data: Blob) => Promise<Blob>,\n): Promise<{ compressedData: Blob; originalSize: number; method: string }> {\n  // 输入类型验证\n  if (!(data instanceof Blob)) {\n    throw new Error('压缩数据必须是Blob类型');\n  }\n\n  // 保存原始大小\n  const originalSize = data.size;\n\n  // 如果数据太小，不压缩\n  if (originalSize < 1024) {\n    return { compressedData: data, originalSize, method: 'none' };\n  }\n\n  // 使用自定义压缩器\n  if (method === 'custom' && customCompressor) {\n    try {\n      const compressedData = await customCompressor(data);\n      return {\n        compressedData,\n        originalSize,\n        method: 'custom',\n      };\n    } catch (error) {\n      console.warn('自定义压缩失败，使用原始数据', error);\n      return { compressedData: data, originalSize, method: 'none' };\n    }\n  }\n\n  // 使用 CompressionStream API (如果浏览器支持)\n  if (typeof CompressionStream !== 'undefined') {\n    try {\n      const blob = new Blob([await data.arrayBuffer()]);\n      const stream = blob.stream();\n      // 仅使用有效的压缩格式\n      const compressionMethod = method === 'custom' ? 'gzip' : method;\n      const compressedStream = stream.pipeThrough(\n        new CompressionStream(compressionMethod as CompressionFormat),\n      );\n      const compressedData = await new Response(compressedStream).blob();\n\n      // 如果压缩后更大，则使用原始数据\n      if (compressedData.size >= originalSize) {\n        return { compressedData: data, originalSize, method: 'none' };\n      }\n\n      return {\n        compressedData,\n        originalSize,\n        method,\n      };\n    } catch (error) {\n      console.warn(`${method}压缩失败，使用原始数据`, error);\n      return { compressedData: data, originalSize, method: 'none' };\n    }\n  }\n\n  // 不支持压缩\n  return { compressedData: data, originalSize, method: 'none' };\n}\n\n/**\n * 解压缩Blob数据\n * @param compressedData 压缩的数据\n * @param method 使用的压缩方法\n * @returns 解压后的数据\n */\nexport async function decompressData(\n  compressedData: Blob,\n  method: string,\n  customDecompressor?: (data: Blob) => Promise<Blob>,\n): Promise<Blob> {\n  // 输入类型验证\n  if (!(compressedData instanceof Blob)) {\n    throw new Error('解压数据必须是Blob类型');\n  }\n\n  // 如果未压缩，直接返回\n  if (method === 'none') {\n    return compressedData;\n  }\n\n  // 使用自定义解压缩器\n  if (method === 'custom' && customDecompressor) {\n    try {\n      return await customDecompressor(compressedData);\n    } catch (error) {\n      console.error('自定义解压失败', error);\n      throw new Error('解压失败: 自定义解压错误');\n    }\n  }\n\n  // 使用 DecompressionStream API\n  if (typeof DecompressionStream !== 'undefined' && (method === 'gzip' || method === 'deflate')) {\n    try {\n      const blob = new Blob([await compressedData.arrayBuffer()]);\n      const stream = blob.stream();\n      const decompressedStream = stream.pipeThrough(new DecompressionStream(method as any));\n      return await new Response(decompressedStream).blob();\n    } catch (error) {\n      console.error(`${method}解压失败`, error);\n      throw new Error(`解压失败: ${method}解压错误`);\n    }\n  }\n\n  // 不支持的压缩方法\n  throw new Error(`解压失败: 不支持的压缩方法 ${method}`);\n}\n\n/**\n * 检查浏览器是否支持压缩API\n * @returns 是否支持压缩\n */\nexport function isCompressionSupported(): boolean {\n  return typeof CompressionStream !== 'undefined' && typeof DecompressionStream !== 'undefined';\n}\n","/**\n * 存储模块导出文件\n */\n\nexport { IndexedDBAdapter } from './indexed-db-adapter';\nexport { StorageManager } from './storage-manager';\nexport { StorageLogger, StorageOperation } from './storage-logger';\nexport { MigrationHelper, MigrationStatus, type MigrationResult } from './migration-helper';\nexport { PriorityManager } from './priority-manager';\nexport { SpaceManager, SpaceCleanupEvent } from './space-manager';\nexport { compressData, decompressData, isCompressionSupported } from './compression-utils';\nexport * from './storage-options';\n","import { IStorageAdapter, IStorageOptions, IStorageUsage } from '@file-chunk-uploader/types';\n\n/**\n * IndexedDB存储适配器\n * 提供基于IndexedDB的数据存储实现\n */\nexport class IndexedDBAdapter implements IStorageAdapter {\n  private dbName: string;\n  private storeName: string;\n  private version: number;\n  private keyPrefix: string;\n  private db: IDBDatabase | null = null;\n  private ready: Promise<void>;\n\n  /**\n   * 创建IndexedDB存储适配器\n   * @param options 存储选项\n   */\n  constructor(options: IStorageOptions = {}) {\n    this.dbName = options.dbName || 'file-chunk-uploader';\n    this.storeName = options.storeName || 'uploads';\n    this.version = options.version || 1;\n    this.keyPrefix = options.keyPrefix || '';\n    this.ready = this.initDB();\n  }\n\n  /**\n   * 初始化IndexedDB数据库\n   * @returns 初始化完成的Promise\n   */\n  private async initDB(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      // 检查浏览器是否支持IndexedDB\n      if (!this.isSupported()) {\n        reject(new Error('IndexedDB不受支持'));\n        return;\n      }\n\n      const request = indexedDB.open(this.dbName, this.version);\n\n      request.onerror = () => {\n        console.error('无法打开IndexedDB');\n        reject(new Error('IndexedDB访问被拒绝'));\n      };\n\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n\n      request.onupgradeneeded = () => {\n        const db = request.result;\n\n        // 创建对象存储\n        if (!db.objectStoreNames.contains(this.storeName)) {\n          const store = db.createObjectStore(this.storeName, { keyPath: 'id' });\n          // 创建索引便于查询\n          store.createIndex('fileId', 'fileId', { unique: false });\n          store.createIndex('createdAt', 'createdAt', { unique: false });\n          store.createIndex('type', 'type', { unique: false });\n        }\n      };\n    });\n  }\n\n  /**\n   * 保存数据到IndexedDB\n   * @param key 键名\n   * @param value 要保存的数据\n   * @param expiration 过期时间(毫秒)\n   */\n  async save<T>(key: string, value: T, expiration?: number): Promise<void> {\n    await this.ready;\n\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('数据库未初始化'));\n        return;\n      }\n\n      try {\n        const transaction = this.db.transaction([this.storeName], 'readwrite');\n        const store = transaction.objectStore(this.storeName);\n\n        // 准备数据\n        const prefixedKey = this.getKeyWithPrefix(key);\n        const now = Date.now();\n        const data = {\n          id: prefixedKey,\n          key: prefixedKey,\n          value,\n          createdAt: now,\n          updatedAt: now,\n          expireAt: expiration ? now + expiration : undefined,\n          fileId: prefixedKey.split('_')[1], // 如果key的格式是 \"type_fileId_extra\"\n          type: prefixedKey.split('_')[0], // 提取类型，如 \"state\"、\"chunk\" 等\n        };\n\n        // 保存\n        const request = store.put(data);\n\n        request.onsuccess = () => resolve();\n        request.onerror = () => reject(new Error('保存数据失败'));\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * 从IndexedDB获取数据\n   * @param key 键名\n   * @returns 数据或null(如果不存在或已过期)\n   */\n  async get<T>(key: string): Promise<T | null> {\n    await this.ready;\n\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('数据库未初始化'));\n        return;\n      }\n\n      try {\n        const transaction = this.db.transaction([this.storeName], 'readonly');\n        const store = transaction.objectStore(this.storeName);\n        const prefixedKey = this.getKeyWithPrefix(key);\n        const request = store.get(prefixedKey);\n\n        request.onsuccess = () => {\n          const result = request.result;\n\n          // 检查是否存在\n          if (!result) {\n            resolve(null);\n            return;\n          }\n\n          // 检查是否过期\n          if (result.expireAt && result.expireAt < Date.now()) {\n            // 数据已过期，异步删除\n            this.remove(key).catch(() => {\n              // 忽略删除错误\n            });\n            resolve(null);\n            return;\n          }\n\n          resolve(result.value);\n        };\n\n        request.onerror = () => reject(new Error('获取数据失败'));\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * 从IndexedDB删除数据\n   * @param key 键名\n   */\n  async remove(key: string): Promise<void> {\n    await this.ready;\n\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('数据库未初始化'));\n        return;\n      }\n\n      try {\n        const transaction = this.db.transaction([this.storeName], 'readwrite');\n        const store = transaction.objectStore(this.storeName);\n        const prefixedKey = this.getKeyWithPrefix(key);\n        const request = store.delete(prefixedKey);\n\n        request.onsuccess = () => resolve();\n        request.onerror = () => reject(new Error('删除数据失败'));\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * 检查键是否存在于IndexedDB\n   * @param key 键名\n   * @returns 是否存在\n   */\n  async has(key: string): Promise<boolean> {\n    try {\n      const value = await this.get(key);\n      return value !== null;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * 清空IndexedDB存储\n   */\n  async clear(): Promise<void> {\n    await this.ready;\n\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('数据库未初始化'));\n        return;\n      }\n\n      try {\n        const transaction = this.db.transaction([this.storeName], 'readwrite');\n        const store = transaction.objectStore(this.storeName);\n        const request = store.clear();\n\n        request.onsuccess = () => resolve();\n        request.onerror = () => reject(new Error('清空数据失败'));\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * 获取所有键\n   * @returns 键列表\n   */\n  async keys(): Promise<string[]> {\n    await this.ready;\n\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('数据库未初始化'));\n        return;\n      }\n\n      try {\n        const transaction = this.db.transaction([this.storeName], 'readonly');\n        const store = transaction.objectStore(this.storeName);\n        const request = store.getAllKeys();\n\n        request.onsuccess = () => {\n          const results = Array.from(request.result as IDBValidKey[])\n            .map(key => key.toString())\n            .filter(key => key.startsWith(this.keyPrefix))\n            .map(key => this.removePrefix(key));\n\n          resolve(results);\n        };\n\n        request.onerror = () => reject(new Error('获取键列表失败'));\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * 获取存储使用情况\n   * @returns 存储使用情况\n   */\n  async getUsage(): Promise<IStorageUsage> {\n    await this.ready;\n\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('数据库未初始化'));\n        return;\n      }\n\n      try {\n        const transaction = this.db.transaction([this.storeName], 'readonly');\n        const store = transaction.objectStore(this.storeName);\n        const request = store.getAll();\n\n        request.onsuccess = () => {\n          const results = request.result;\n          let totalSize = 0;\n          let chunkCount = 0;\n          const fileIds = new Set<string>();\n\n          results.forEach(item => {\n            // 计算总大小（粗略估计，实际大小需考虑序列化后的大小）\n            const itemSize = this.estimateSize(item);\n            totalSize += itemSize;\n\n            // 统计分片数量\n            if (item.type === 'chunk') {\n              chunkCount++;\n            }\n\n            // 收集文件ID\n            if (item.fileId) {\n              fileIds.add(item.fileId);\n            }\n          });\n\n          resolve({\n            totalSize,\n            chunkCount,\n            fileCount: fileIds.size,\n          });\n        };\n\n        request.onerror = () => reject(new Error('获取存储使用情况失败'));\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * 清理过期数据\n   */\n  async clearExpired(): Promise<void> {\n    await this.ready;\n\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('数据库未初始化'));\n        return;\n      }\n\n      try {\n        const transaction = this.db.transaction([this.storeName], 'readwrite');\n        const store = transaction.objectStore(this.storeName);\n        const request = store.openCursor();\n\n        const now = Date.now();\n\n        request.onsuccess = event => {\n          const cursor = (event.target as IDBRequest).result;\n\n          if (cursor) {\n            const data = cursor.value;\n\n            // 检查是否过期\n            if (data.expireAt && data.expireAt < now) {\n              cursor.delete();\n            }\n\n            cursor.continue();\n          } else {\n            // 所有条目都已处理\n            resolve();\n          }\n        };\n\n        request.onerror = () => reject(new Error('清理过期数据失败'));\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * 检查是否支持IndexedDB\n   * @returns 是否支持\n   */\n  isSupported(): boolean {\n    return typeof indexedDB !== 'undefined';\n  }\n\n  /**\n   * 为键添加前缀\n   * @param key 原始键\n   * @returns 带前缀的键\n   */\n  private getKeyWithPrefix(key: string): string {\n    if (this.keyPrefix && !key.startsWith(this.keyPrefix)) {\n      return `${this.keyPrefix}${key}`;\n    }\n    return key;\n  }\n\n  /**\n   * 移除键的前缀\n   * @param key 带前缀的键\n   * @returns 原始键\n   */\n  private removePrefix(key: string): string {\n    if (this.keyPrefix && key.startsWith(this.keyPrefix)) {\n      return key.substring(this.keyPrefix.length);\n    }\n    return key;\n  }\n\n  /**\n   * 估算对象大小（字节）\n   * @param obj 要估算大小的对象\n   * @returns 估算的字节大小\n   */\n  private estimateSize(obj: any): number {\n    if (obj === null || obj === undefined) return 0;\n\n    // Blob或File对象直接获取大小\n    if (obj instanceof Blob || obj instanceof File) {\n      return obj.size;\n    }\n\n    // 特殊处理ArrayBuffer和类型化数组\n    if (obj instanceof ArrayBuffer) {\n      return obj.byteLength;\n    }\n\n    if (\n      obj instanceof Int8Array ||\n      obj instanceof Uint8Array ||\n      obj instanceof Uint8ClampedArray ||\n      obj instanceof Int16Array ||\n      obj instanceof Uint16Array ||\n      obj instanceof Int32Array ||\n      obj instanceof Uint32Array ||\n      obj instanceof Float32Array ||\n      obj instanceof Float64Array\n    ) {\n      return obj.byteLength;\n    }\n\n    // 字符串计算字节大小（考虑UTF-8编码）\n    if (typeof obj === 'string') {\n      // 使用TextEncoder来精确计算UTF-8编码字节长度\n      if (typeof TextEncoder !== 'undefined') {\n        return new TextEncoder().encode(obj).length;\n      }\n      // 降级处理：估算UTF-8编码大小\n      // ASCII字符占1字节，其他字符可能占2-4字节\n      let size = 0;\n      for (let i = 0; i < obj.length; i++) {\n        const code = obj.charCodeAt(i);\n        if (code <= 0x7f) {\n          size += 1; // ASCII字符\n        } else if (code <= 0x7ff) {\n          size += 2; // 两字节字符\n        } else if (code >= 0xd800 && code <= 0xdfff) {\n          // 处理UTF-16代理对\n          size += 4;\n          i++; // 跳过下一个代码单元\n        } else {\n          size += 3; // 三字节字符\n        }\n      }\n      return size;\n    }\n\n    // 数字和布尔值固定大小\n    if (typeof obj === 'number') return 8;\n    if (typeof obj === 'boolean') return 4;\n\n    // 日期对象\n    if (obj instanceof Date) return 8;\n\n    // 递归计算对象和数组\n    if (typeof obj === 'object') {\n      let size = 0;\n\n      for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          // 键的大小\n          size += key.length * 2;\n          // 值的大小\n          size += this.estimateSize(obj[key]);\n        }\n      }\n\n      return size;\n    }\n\n    return 0;\n  }\n}\n","/**\n * 存储迁移助手\n * 提供数据库版本迁移和升级支持\n */\nimport { StorageLogger } from './storage-logger';\n\n/**\n * 迁移函数类型\n * 接受数据库连接，执行迁移操作\n */\nexport type MigratorFunction = (db: IDBDatabase) => Promise<void>;\n\n/**\n * 迁移结果状态\n */\nexport enum MigrationStatus {\n  SUCCESS = 'success',\n  FAILED = 'failed',\n  SKIPPED = 'skipped',\n}\n\n/**\n * 迁移结果\n */\nexport interface MigrationResult {\n  status: MigrationStatus;\n  fromVersion: number;\n  toVersion: number;\n  error?: Error;\n  message?: string;\n}\n\n/**\n * 存储迁移助手\n */\nexport class MigrationHelper {\n  private migrators: Map<number, MigratorFunction> = new Map();\n  private logger: StorageLogger;\n\n  /**\n   * 创建迁移助手实例\n   */\n  constructor(logger?: StorageLogger) {\n    this.logger = logger || new StorageLogger();\n  }\n\n  /**\n   * 注册版本迁移器\n   * @param version 目标版本号\n   * @param migrator 迁移函数\n   */\n  registerMigrator(version: number, migrator: MigratorFunction): void {\n    if (this.migrators.has(version)) {\n      this.logger.warn(`已存在版本 ${version} 的迁移器，将被覆盖`);\n    }\n\n    this.migrators.set(version, migrator);\n    this.logger.debug(`已注册版本 ${version} 的迁移器`);\n  }\n\n  /**\n   * 批量注册迁移器\n   * @param migrators 迁移器映射\n   */\n  registerMigrators(migrators: Record<number, MigratorFunction>): void {\n    Object.entries(migrators).forEach(([versionStr, migrator]) => {\n      const version = Number(versionStr);\n      if (!isNaN(version)) {\n        this.registerMigrator(version, migrator);\n      } else {\n        this.logger.error(`无效的版本号：${versionStr}`);\n      }\n    });\n  }\n\n  /**\n   * 获取所有已注册的迁移版本\n   * 按版本号升序排序\n   */\n  getMigrationVersions(): number[] {\n    return Array.from(this.migrators.keys()).sort((a, b) => a - b);\n  }\n\n  /**\n   * 获取特定版本的迁移器\n   */\n  getMigrator(version: number): MigratorFunction | undefined {\n    return this.migrators.get(version);\n  }\n\n  /**\n   * 执行迁移\n   * 注意：此方法需要在数据库版本变更处理器内调用\n   *\n   * @param db 数据库对象\n   * @param oldVersion 旧版本号\n   * @param newVersion 新版本号\n   */\n  async migrate(db: IDBDatabase, oldVersion: number, newVersion: number): Promise<MigrationResult> {\n    this.logger.info(`开始数据库迁移 v${oldVersion} -> v${newVersion}`);\n\n    if (oldVersion >= newVersion) {\n      this.logger.info('无需迁移（当前版本已是最新）');\n      return {\n        status: MigrationStatus.SKIPPED,\n        fromVersion: oldVersion,\n        toVersion: newVersion,\n        message: '当前版本已是最新',\n      };\n    }\n\n    try {\n      // 获取需要执行的迁移\n      const migrationsToRun = this.getMigrationVersions().filter(\n        version => version > oldVersion && version <= newVersion,\n      );\n\n      if (migrationsToRun.length === 0) {\n        this.logger.info('未找到适用的迁移器');\n        return {\n          status: MigrationStatus.SKIPPED,\n          fromVersion: oldVersion,\n          toVersion: newVersion,\n          message: '未找到适用的迁移器',\n        };\n      }\n\n      // 按版本顺序执行迁移\n      for (const version of migrationsToRun) {\n        const migrator = this.migrators.get(version);\n        if (migrator) {\n          this.logger.info(`执行版本 ${version} 的迁移`);\n          await migrator(db);\n        }\n      }\n\n      this.logger.info(`迁移完成：v${oldVersion} -> v${newVersion}`);\n      return {\n        status: MigrationStatus.SUCCESS,\n        fromVersion: oldVersion,\n        toVersion: newVersion,\n        message: '迁移成功',\n      };\n    } catch (error) {\n      this.logger.error(`迁移失败：${(error as Error).message}`, error);\n      return {\n        status: MigrationStatus.FAILED,\n        fromVersion: oldVersion,\n        toVersion: newVersion,\n        error: error as Error,\n        message: `迁移失败：${(error as Error).message}`,\n      };\n    }\n  }\n\n  /**\n   * 创建对象存储\n   * 辅助方法，方便在迁移脚本中创建对象存储\n   */\n  createObjectStore(\n    db: IDBDatabase,\n    storeName: string,\n    options: IDBObjectStoreParameters = { keyPath: 'id' },\n  ): IDBObjectStore {\n    this.logger.debug(`创建对象存储：${storeName}`);\n    return db.createObjectStore(storeName, options);\n  }\n\n  /**\n   * 创建索引\n   * 辅助方法，方便在迁移脚本中创建索引\n   */\n  createIndex(\n    store: IDBObjectStore,\n    indexName: string,\n    keyPath: string | string[],\n    options: IDBIndexParameters = { unique: false },\n  ): IDBIndex {\n    this.logger.debug(`创建索引：${indexName}`);\n    return store.createIndex(indexName, keyPath, options);\n  }\n}\n","import { StorageLogger } from './storage-logger';\nimport { IFilePriorityInfo, IStorageItemMetadata } from './storage-options';\n\n/**\n * 存储优先级管理器\n * 管理文件和存储项的优先级\n */\nexport class PriorityManager {\n  private static readonly DEFAULT_PRIORITY = 5;\n  private priorityMap: Map<string, IFilePriorityInfo> = new Map();\n  private logger: StorageLogger;\n\n  /**\n   * 创建优先级管理器实例\n   * @param logger 日志记录器\n   */\n  constructor(logger?: StorageLogger) {\n    this.logger = logger || new StorageLogger();\n  }\n\n  /**\n   * 设置文件优先级\n   * @param fileId 文件ID\n   * @param priority 优先级 (1-10, 10为最高)\n   */\n  setFilePriority(fileId: string, priority: number): void {\n    // 确保优先级在有效范围内\n    const validPriority = Math.min(Math.max(Math.round(priority), 1), 10);\n\n    this.priorityMap.set(fileId, {\n      fileId,\n      priority: validPriority,\n      updatedAt: Date.now(),\n    });\n\n    // 使用info方法记录优先级设置\n    this.logger.info(`设置文件优先级: ${fileId}`, { priority: validPriority });\n  }\n\n  /**\n   * 获取文件优先级\n   * @param fileId 文件ID\n   * @returns 文件优先级\n   */\n  getFilePriority(fileId: string): number {\n    return this.priorityMap.get(fileId)?.priority || PriorityManager.DEFAULT_PRIORITY;\n  }\n\n  /**\n   * 计算存储项优先级\n   * 基于文件优先级、访问时间和访问频率\n   * @param metadata 存储项元数据\n   * @returns 计算后的优先级得分\n   */\n  calculateItemPriority(metadata: IStorageItemMetadata): number {\n    // 基础优先级\n    let score = metadata.priority;\n\n    // 如果是分片数据，使用对应文件的优先级\n    if (metadata.fileId) {\n      const filePriority = this.getFilePriority(metadata.fileId);\n      score = filePriority;\n    }\n\n    // 考虑访问因素增加权重\n    const now = Date.now();\n    const daysSinceLastAccess = (now - metadata.lastAccessed) / (1000 * 60 * 60 * 24);\n\n    // 近期访问增加权重，久未访问减少权重\n    if (daysSinceLastAccess < 1) {\n      // 24小时内访问过，增加权重\n      score += 1;\n    } else if (daysSinceLastAccess > 7) {\n      // 一周未访问，降低权重\n      score -= Math.min(3, Math.floor(daysSinceLastAccess / 7));\n    }\n\n    // 频繁访问的项目增加权重\n    if (metadata.accessCount > 10) {\n      score += 1;\n    }\n\n    // 限制范围\n    return Math.min(Math.max(score, 1), 10);\n  }\n\n  /**\n   * 排序存储项根据优先级\n   * @param items 存储项元数据列表\n   * @returns 排序后的列表\n   */\n  sortItemsByPriority(items: IStorageItemMetadata[]): IStorageItemMetadata[] {\n    return [...items].sort((a, b) => {\n      const priorityA = this.calculateItemPriority(a);\n      const priorityB = this.calculateItemPriority(b);\n      return priorityB - priorityA; // 降序，高优先级在前\n    });\n  }\n\n  /**\n   * 获取低优先级项目列表\n   * @param items 存储项元数据列表\n   * @param threshold 优先级阈值，低于此值视为低优先级\n   * @returns 低优先级项目列表\n   */\n  getLowPriorityItems(items: IStorageItemMetadata[], threshold = 3): IStorageItemMetadata[] {\n    return items.filter(item => this.calculateItemPriority(item) <= threshold);\n  }\n\n  /**\n   * 更新存储项访问记录\n   * @param metadata 存储项元数据\n   * @returns 更新后的元数据\n   */\n  updateItemAccess(metadata: IStorageItemMetadata): IStorageItemMetadata {\n    return {\n      ...metadata,\n      accessCount: metadata.accessCount + 1,\n      lastAccessed: Date.now(),\n    };\n  }\n\n  /**\n   * 自动降级长时间未访问的项目优先级\n   * @param items 存储项元数据列表\n   * @param threshold 未访问时间阈值（毫秒）\n   * @returns 需要降级的项目列表\n   */\n  getItemsForDemotion(\n    items: IStorageItemMetadata[],\n    threshold = 14 * 24 * 60 * 60 * 1000, // 默认两周\n  ): IStorageItemMetadata[] {\n    const now = Date.now();\n    return items.filter(item => {\n      // 只处理高优先级项目\n      const currentPriority = this.calculateItemPriority(item);\n      return currentPriority > 5 && now - item.lastAccessed > threshold;\n    });\n  }\n\n  /**\n   * 导出优先级数据\n   * 可用于持久化存储\n   */\n  exportPriorityData(): IFilePriorityInfo[] {\n    return Array.from(this.priorityMap.values());\n  }\n\n  /**\n   * 导入优先级数据\n   * @param data 之前导出的优先级数据\n   */\n  importPriorityData(data: IFilePriorityInfo[]): void {\n    data.forEach(item => {\n      this.priorityMap.set(item.fileId, item);\n    });\n  }\n}\n","import { IStorageUsage } from '@file-chunk-uploader/types';\n\nimport { PriorityManager } from './priority-manager';\nimport { StorageLogger } from './storage-logger';\nimport { IExtendedStorageOptions, IStorageItemMetadata } from './storage-options';\n\n/**\n * 清理策略函数类型\n */\ntype CleanupStrategy = (items: IStorageItemMetadata[]) => IStorageItemMetadata[];\n\n/**\n * 存储空间清理事件\n */\nexport enum SpaceCleanupEvent {\n  WARNING = 'warning',\n  CLEANUP_STARTED = 'cleanup_started',\n  CLEANUP_COMPLETE = 'cleanup_complete',\n  CLEANUP_FAILED = 'cleanup_failed',\n}\n\n/**\n * 存储空间管理类\n * 负责监控存储空间使用情况和清理策略\n */\nexport class SpaceManager {\n  private options: IExtendedStorageOptions;\n  private logger: StorageLogger;\n  private priorityManager: PriorityManager;\n  private eventListeners: Map<SpaceCleanupEvent, Array<(data: any) => void>> = new Map();\n  private cleanupStrategies: Map<string, CleanupStrategy> = new Map();\n\n  /**\n   * 创建空间管理器实例\n   */\n  constructor(\n    options: IExtendedStorageOptions = {},\n    logger?: StorageLogger,\n    priorityManager?: PriorityManager,\n  ) {\n    this.options = options;\n    this.logger = logger || new StorageLogger();\n    this.priorityManager = priorityManager || new PriorityManager(this.logger);\n\n    // 注册默认清理策略\n    this.registerCleanupStrategies();\n  }\n\n  /**\n   * 检查存储空间状态\n   * @param usage 当前存储使用情况\n   * @returns 如果空间使用超过警告阈值，返回true\n   */\n  checkStorageWarning(usage: IStorageUsage): boolean {\n    if (!this.options.spaceManagement) {\n      return false;\n    }\n\n    const { maxStorageSize, usageWarningThreshold = 0.8 } = this.options.spaceManagement;\n\n    // 如果没有设置最大存储大小限制，则检查实际使用率（如果可用）\n    if (!maxStorageSize && usage.usageRatio !== undefined) {\n      if (usage.usageRatio >= usageWarningThreshold) {\n        this.triggerEvent(SpaceCleanupEvent.WARNING, {\n          usageRatio: usage.usageRatio,\n          threshold: usageWarningThreshold,\n        });\n        this.logger.warn(`存储空间使用率警告：${Math.round(usage.usageRatio * 100)}%`);\n        return true;\n      }\n      return false;\n    }\n\n    // 如果设置了最大存储大小限制，检查是否接近限制\n    if (maxStorageSize && usage.totalSize >= maxStorageSize * usageWarningThreshold) {\n      this.triggerEvent(SpaceCleanupEvent.WARNING, {\n        totalSize: usage.totalSize,\n        maxSize: maxStorageSize,\n        threshold: usageWarningThreshold,\n      });\n      this.logger.warn(\n        `存储空间使用警告：${this.formatSize(usage.totalSize)}/${this.formatSize(maxStorageSize)}`,\n      );\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * 执行存储空间清理\n   * @param items 所有存储项的元数据\n   * @param percentageToFree 目标释放空间百分比 (0-1)\n   * @returns 建议清理的项目列表\n   */\n  async cleanupStorage(\n    items: IStorageItemMetadata[],\n    percentageToFree: number = 0.3,\n  ): Promise<IStorageItemMetadata[]> {\n    this.triggerEvent(SpaceCleanupEvent.CLEANUP_STARTED, {\n      itemCount: items.length,\n      percentageToFree,\n    });\n\n    try {\n      const strategy = this.options.spaceManagement?.cleanupStrategy || 'lowest-priority';\n      let strategyFn = this.cleanupStrategies.get(strategy);\n\n      if (!strategyFn) {\n        this.logger.warn(`未知清理策略: ${strategy}，使用默认策略`);\n        strategyFn = this.cleanupStrategies.get('lowest-priority');\n      }\n\n      if (!strategyFn) {\n        throw new Error('无法获取清理策略');\n      }\n\n      // 获取当前总大小\n      const currentTotalSize = items.reduce((sum, item) => sum + item.size, 0);\n\n      // 目标释放大小\n      const targetReleaseSize = currentTotalSize * percentageToFree;\n\n      // 选择要清理的项目\n      const itemsToRemove = strategyFn(items);\n\n      // 按顺序移除，直到达到目标释放大小\n      let releasedSize = 0;\n      const selectedItems: IStorageItemMetadata[] = [];\n\n      for (const item of itemsToRemove) {\n        selectedItems.push(item);\n        releasedSize += item.size;\n\n        if (releasedSize >= targetReleaseSize) {\n          break;\n        }\n      }\n\n      this.logger.info(\n        `空间清理完成：选择了 ${selectedItems.length} 个项目，预计释放 ${this.formatSize(\n          releasedSize,\n        )}`,\n      );\n\n      this.triggerEvent(SpaceCleanupEvent.CLEANUP_COMPLETE, {\n        itemsRemoved: selectedItems.length,\n        releasedSize,\n        targetReleaseSize,\n      });\n\n      return selectedItems;\n    } catch (error) {\n      this.logger.error(`空间清理失败: ${(error as Error).message}`, error);\n\n      this.triggerEvent(SpaceCleanupEvent.CLEANUP_FAILED, {\n        error,\n      });\n\n      return [];\n    }\n  }\n\n  /**\n   * 注册事件监听器\n   * @param event 事件类型\n   * @param listener 监听器函数\n   */\n  on(event: SpaceCleanupEvent, listener: (data: any) => void): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event)?.push(listener);\n  }\n\n  /**\n   * 移除事件监听器\n   * @param event 事件类型\n   * @param listener 监听器函数\n   */\n  off(event: SpaceCleanupEvent, listener: (data: any) => void): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      const index = listeners.indexOf(listener);\n      if (index !== -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * 触发事件\n   * @param event 事件类型\n   * @param data 事件数据\n   */\n  private triggerEvent(event: SpaceCleanupEvent, data: any): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.forEach(listener => {\n        try {\n          listener(data);\n        } catch (error) {\n          this.logger.error(`事件监听器执行错误: ${(error as Error).message}`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * 注册默认清理策略\n   */\n  private registerCleanupStrategies(): void {\n    // 最低优先级优先清理\n    this.cleanupStrategies.set('lowest-priority', (items: IStorageItemMetadata[]) => {\n      return [...items].sort((a, b) => {\n        const priorityA = this.priorityManager.calculateItemPriority(a);\n        const priorityB = this.priorityManager.calculateItemPriority(b);\n        return priorityA - priorityB; // 升序，低优先级在前\n      });\n    });\n\n    // 最旧优先清理\n    this.cleanupStrategies.set('oldest', (items: IStorageItemMetadata[]) => {\n      return [...items].sort((a, b) => a.createdAt - b.createdAt);\n    });\n\n    // 最大优先清理\n    this.cleanupStrategies.set('largest', (items: IStorageItemMetadata[]) => {\n      return [...items].sort((a, b) => b.size - a.size);\n    });\n  }\n\n  /**\n   * 注册自定义清理策略\n   * @param name 策略名称\n   * @param strategy 策略函数\n   */\n  registerCleanupStrategy(name: string, strategy: CleanupStrategy): void {\n    this.cleanupStrategies.set(name, strategy);\n  }\n\n  /**\n   * 格式化大小\n   */\n  private formatSize(bytes: number): string {\n    if (bytes < 1024) return `${bytes}B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(2)}KB`;\n    if (bytes < 1024 * 1024 * 1024) return `${(bytes / (1024 * 1024)).toFixed(2)}MB`;\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(2)}GB`;\n  }\n}\n","/**\n * StorageLogger - 存储模块的日志记录功能\n *\n * 提供了与core包的Logger集成的日志记录功能，\n * 同时支持降级处理（当core包的Logger不可用时使用控制台）\n */\n\n// 导入类型，但不强制依赖core包实现\nimport type { Logger } from '@file-chunk-uploader/core/src/developer-mode/logger';\n\n/**\n * 存储操作类型\n */\nexport enum StorageOperation {\n  SAVE = 'save',\n  GET = 'get',\n  DELETE = 'delete',\n  LIST = 'list',\n  CLEAR = 'clear',\n  INIT = 'init',\n  CLEANUP = 'cleanup',\n  USE = 'use',\n}\n\n/**\n * 存储日志记录器\n */\nexport class StorageLogger {\n  private logger: Logger | null = null;\n  private enabled: boolean = false;\n  private debugEnabled: boolean = false;\n\n  /**\n   * 创建存储日志记录器\n   */\n  constructor(logger?: Logger, options: { enabled?: boolean; debug?: boolean } = {}) {\n    this.logger = logger || null;\n    this.enabled = options.enabled !== undefined ? options.enabled : true;\n    this.debugEnabled = options.debug || false;\n  }\n\n  /**\n   * 记录调试信息\n   */\n  debug(message: string, data?: any): void {\n    if (!this.enabled || !this.debugEnabled) return;\n\n    if (this.logger) {\n      this.logger.debug('storage', message, data);\n    } else {\n      console.debug(`[STORAGE] ${message}`, data || '');\n    }\n  }\n\n  /**\n   * 记录信息\n   */\n  info(message: string, data?: any): void {\n    if (!this.enabled) return;\n\n    if (this.logger) {\n      this.logger.info('storage', message, data);\n    } else {\n      console.info(`[STORAGE] ${message}`, data || '');\n    }\n  }\n\n  /**\n   * 记录警告\n   */\n  warn(message: string, data?: any): void {\n    if (!this.enabled) return;\n\n    if (this.logger) {\n      this.logger.warn('storage', message, data);\n    } else {\n      console.warn(`[STORAGE] ${message}`, data || '');\n    }\n  }\n\n  /**\n   * 记录错误\n   */\n  error(message: string, data?: any): void {\n    if (!this.enabled) return;\n\n    if (this.logger) {\n      this.logger.error('storage', message, data);\n    } else {\n      console.error(`[STORAGE] ${message}`, data || '');\n    }\n  }\n\n  /**\n   * 记录存储操作\n   */\n  logOperation(\n    operation: StorageOperation,\n    key: string,\n    details?: { success: boolean; duration?: number; error?: Error; size?: number },\n  ): void {\n    if (!this.enabled) return;\n\n    const baseMessage = `${this.getOperationName(operation)}: ${key}`;\n\n    if (!details) {\n      this.debug(baseMessage);\n      return;\n    }\n\n    // 深度验证details参数\n    if (typeof details !== 'object') {\n      this.debug(`${baseMessage} - 参数错误: details不是对象`);\n      return;\n    }\n\n    if (typeof details.success !== 'boolean') {\n      this.debug(`${baseMessage} - 参数错误: details.success不是布尔值`);\n      return;\n    }\n\n    const { success, duration, error, size } = details;\n\n    if (success) {\n      // 成功的操作\n      const message = `${baseMessage} - 成功${duration ? ` (${duration.toFixed(2)}ms)` : ''}${\n        size ? ` [${this.formatSize(size)}]` : ''\n      }`;\n\n      this.debug(message);\n    } else {\n      // 失败的操作\n      const message = `${baseMessage} - 失败${duration ? ` (${duration.toFixed(2)}ms)` : ''}`;\n\n      this.error(message, { error });\n    }\n  }\n\n  /**\n   * 获取操作名称\n   */\n  private getOperationName(operation: StorageOperation): string {\n    switch (operation) {\n      case StorageOperation.SAVE:\n        return '保存数据';\n      case StorageOperation.GET:\n        return '获取数据';\n      case StorageOperation.DELETE:\n        return '删除数据';\n      case StorageOperation.LIST:\n        return '列出键';\n      case StorageOperation.CLEAR:\n        return '清空存储';\n      case StorageOperation.INIT:\n        return '初始化存储';\n      case StorageOperation.CLEANUP:\n        return '清理过期数据';\n      case StorageOperation.USE:\n        return '使用存储';\n      default:\n        return '未知操作';\n    }\n  }\n\n  /**\n   * 格式化大小\n   */\n  private formatSize(bytes: number): string {\n    if (bytes < 1024) return `${bytes}B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(2)}KB`;\n    return `${(bytes / (1024 * 1024)).toFixed(2)}MB`;\n  }\n\n  /**\n   * 设置日志记录器\n   */\n  setLogger(logger: Logger): void {\n    this.logger = logger;\n  }\n\n  /**\n   * 启用或禁用日志记录\n   */\n  setEnabled(enabled: boolean): void {\n    this.enabled = enabled;\n  }\n\n  /**\n   * 启用或禁用调试日志\n   */\n  setDebug(debug: boolean): void {\n    this.debugEnabled = debug;\n  }\n}\n","import {\n  IStorageAdapter,\n  IStorageManager,\n  IStorageOptions,\n  IStorageUsage,\n  IUploadState,\n  IRetryState,\n  StorageType,\n} from '@file-chunk-uploader/types';\n\nimport { IndexedDBAdapter } from './indexed-db-adapter';\nimport { StorageLogger, StorageOperation } from './storage-logger';\n\n/**\n * StorageManager 实现\n * 提供对断点续传相关数据的管理功能\n */\nexport class StorageManager implements IStorageManager {\n  private adapter: IStorageAdapter;\n  private options: IStorageOptions;\n  private autoClearInterval: ReturnType<typeof setInterval> | null = null;\n  private logger: StorageLogger;\n\n  /**\n   * 创建StorageManager实例\n   * @param options 存储选项\n   */\n  constructor(options: IStorageOptions = {}) {\n    this.options = {\n      type: StorageType.INDEXED_DB,\n      dbName: 'file-chunk-uploader',\n      storeName: 'uploads',\n      keyPrefix: '',\n      expiration: 7 * 24 * 60 * 60 * 1000, // 默认保存7天\n      enabled: true,\n      autoClear: true,\n      clearInterval: 30 * 60 * 1000, // 默认每30分钟清理一次过期数据\n      ...options,\n    };\n\n    // 初始化日志记录器\n    this.logger = new StorageLogger(undefined, {\n      enabled: this.options.enabled,\n      debug: false,\n    });\n\n    this.adapter = this.createAdapter();\n    this.setupAutoClear();\n  }\n\n  /**\n   * 保存上传状态\n   * @param fileId 文件ID\n   * @param state 上传状态\n   */\n  async saveUploadState(fileId: string, state: IUploadState): Promise<void> {\n    if (!this.options.enabled) {\n      return;\n    }\n\n    const key = `state_${fileId}`;\n    const startTime = performance.now();\n\n    try {\n      await this.adapter.save(key, state, this.options.expiration);\n\n      // 记录操作日志\n      this.logger.logOperation(StorageOperation.SAVE, key, {\n        success: true,\n        duration: performance.now() - startTime,\n        size: this.estimateObjectSize(state),\n      });\n    } catch (error) {\n      // 记录错误日志\n      this.logger.logOperation(StorageOperation.SAVE, key, {\n        success: false,\n        duration: performance.now() - startTime,\n        error: error as Error,\n      });\n\n      console.error('保存上传状态失败:', error);\n      throw new Error(`保存上传状态失败: ${(error as Error).message}`);\n    }\n  }\n\n  /**\n   * 保存文件分片\n   * @param fileId 文件ID\n   * @param chunkIndex 分片索引\n   * @param chunk 分片数据\n   */\n  async saveChunk(fileId: string, chunkIndex: number, chunk: Blob): Promise<void> {\n    if (!this.options.enabled) {\n      return;\n    }\n\n    const key = `chunk_${fileId}_${chunkIndex}`;\n    const startTime = performance.now();\n\n    try {\n      await this.adapter.save(key, chunk, this.options.expiration);\n\n      // 记录操作日志\n      this.logger.logOperation(StorageOperation.SAVE, key, {\n        success: true,\n        duration: performance.now() - startTime,\n        size: chunk.size,\n      });\n    } catch (error) {\n      // 记录错误日志\n      this.logger.logOperation(StorageOperation.SAVE, key, {\n        success: false,\n        duration: performance.now() - startTime,\n        error: error as Error,\n      });\n\n      console.error(`保存分片${chunkIndex}失败:`, error);\n      throw new Error(`保存分片失败: ${(error as Error).message}`);\n    }\n  }\n\n  /**\n   * 获取上传状态\n   * @param fileId 文件ID\n   * @returns 上传状态或null\n   */\n  async getUploadState(fileId: string): Promise<IUploadState | null> {\n    if (!this.options.enabled) {\n      return null;\n    }\n\n    const key = `state_${fileId}`;\n    const startTime = performance.now();\n\n    try {\n      const result = await this.adapter.get<IUploadState>(key);\n\n      // 记录操作日志\n      this.logger.logOperation(StorageOperation.GET, key, {\n        success: true,\n        duration: performance.now() - startTime,\n        size: result ? this.estimateObjectSize(result) : 0,\n      });\n\n      return result;\n    } catch (error) {\n      // 记录错误日志\n      this.logger.logOperation(StorageOperation.GET, key, {\n        success: false,\n        duration: performance.now() - startTime,\n        error: error as Error,\n      });\n\n      console.error('获取上传状态失败:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 获取文件分片\n   * @param fileId 文件ID\n   * @param chunkIndex 分片索引\n   * @returns 分片数据或null\n   */\n  async getChunk(fileId: string, chunkIndex: number): Promise<Blob | null> {\n    if (!this.options.enabled) {\n      return null;\n    }\n\n    const key = `chunk_${fileId}_${chunkIndex}`;\n    const startTime = performance.now();\n\n    try {\n      const result = await this.adapter.get<Blob>(key);\n\n      // 记录操作日志\n      this.logger.logOperation(StorageOperation.GET, key, {\n        success: true,\n        duration: performance.now() - startTime,\n        size: result?.size || 0,\n      });\n\n      return result;\n    } catch (error) {\n      // 记录错误日志\n      this.logger.logOperation(StorageOperation.GET, key, {\n        success: false,\n        duration: performance.now() - startTime,\n        error: error as Error,\n      });\n\n      console.error(`获取分片${chunkIndex}失败:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * 获取文件的所有分片索引\n   * @param fileId 文件ID\n   * @returns 分片索引数组\n   */\n  async getChunkIndices(fileId: string): Promise<number[]> {\n    if (!this.options.enabled) {\n      return [];\n    }\n\n    const prefix = `chunk_${fileId}_`;\n    const startTime = performance.now();\n\n    try {\n      const keys = await this.adapter.keys();\n\n      const indices = keys\n        .filter(key => key.startsWith(prefix))\n        .map(key => {\n          const index = key.substring(prefix.length);\n          return parseInt(index, 10);\n        })\n        .filter(index => !isNaN(index))\n        .sort((a, b) => a - b); // 确保按索引升序排列\n\n      // 记录操作日志\n      this.logger.logOperation(StorageOperation.LIST, prefix, {\n        success: true,\n        duration: performance.now() - startTime,\n      });\n\n      return indices;\n    } catch (error) {\n      // 记录错误日志\n      this.logger.logOperation(StorageOperation.LIST, prefix, {\n        success: false,\n        duration: performance.now() - startTime,\n        error: error as Error,\n      });\n\n      console.error('获取分片索引失败:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 删除文件相关数据\n   * @param fileId 文件ID\n   */\n  async deleteFile(fileId: string): Promise<void> {\n    if (!this.options.enabled) {\n      return;\n    }\n\n    const startTime = performance.now();\n\n    try {\n      // 删除状态\n      await this.adapter.remove(`state_${fileId}`);\n\n      // 删除重试状态\n      await this.adapter.remove(`retry_${fileId}`);\n\n      // 获取并删除所有分片\n      const chunkIndices = await this.getChunkIndices(fileId);\n      const promises = chunkIndices.map(index => this.adapter.remove(`chunk_${fileId}_${index}`));\n\n      await Promise.all(promises);\n\n      // 记录操作日志\n      this.logger.logOperation(StorageOperation.DELETE, `file_${fileId}`, {\n        success: true,\n        duration: performance.now() - startTime,\n      });\n    } catch (error) {\n      // 记录错误日志\n      this.logger.logOperation(StorageOperation.DELETE, `file_${fileId}`, {\n        success: false,\n        duration: performance.now() - startTime,\n        error: error as Error,\n      });\n\n      console.error('删除文件数据失败:', error);\n      throw new Error(`删除文件数据失败: ${(error as Error).message}`);\n    }\n  }\n\n  /**\n   * 清理过期数据\n   * @param _maxAge 最大保存时间(毫秒)\n   */\n  async cleanupExpiredData(_maxAge?: number): Promise<void> {\n    if (!this.options.enabled) {\n      return;\n    }\n\n    const startTime = performance.now();\n\n    try {\n      await this.adapter.clearExpired();\n\n      // 记录操作日志\n      this.logger.logOperation(StorageOperation.CLEANUP, 'expired_data', {\n        success: true,\n        duration: performance.now() - startTime,\n      });\n    } catch (error) {\n      // 记录错误日志\n      this.logger.logOperation(StorageOperation.CLEANUP, 'expired_data', {\n        success: false,\n        duration: performance.now() - startTime,\n        error: error as Error,\n      });\n\n      console.error('清理过期数据失败:', error);\n    }\n  }\n\n  /**\n   * 获取存储使用情况\n   * @returns 存储使用情况\n   */\n  async getStorageUsage(): Promise<IStorageUsage> {\n    if (!this.options.enabled) {\n      return { totalSize: 0, chunkCount: 0, fileCount: 0 };\n    }\n\n    const startTime = performance.now();\n\n    try {\n      const usage = await this.adapter.getUsage();\n\n      // 记录操作日志\n      this.logger.logOperation(StorageOperation.GET, 'storage_usage', {\n        success: true,\n        duration: performance.now() - startTime,\n      });\n\n      return usage;\n    } catch (error) {\n      // 记录错误日志\n      this.logger.logOperation(StorageOperation.GET, 'storage_usage', {\n        success: false,\n        duration: performance.now() - startTime,\n        error: error as Error,\n      });\n\n      console.error('获取存储使用情况失败:', error);\n      return { totalSize: 0, chunkCount: 0, fileCount: 0 };\n    }\n  }\n\n  /**\n   * 获取活跃上传列表\n   * @returns 文件ID数组\n   */\n  async getActiveUploads(): Promise<string[]> {\n    if (!this.options.enabled) {\n      return [];\n    }\n\n    const startTime = performance.now();\n    const statePrefix = 'state_';\n\n    try {\n      const keys = await this.adapter.keys();\n\n      const fileIds = keys\n        .filter(key => key.startsWith(statePrefix))\n        .map(key => key.substring(statePrefix.length));\n\n      // 记录操作日志\n      this.logger.logOperation(StorageOperation.LIST, 'active_uploads', {\n        success: true,\n        duration: performance.now() - startTime,\n      });\n\n      return fileIds;\n    } catch (error) {\n      // 记录错误日志\n      this.logger.logOperation(StorageOperation.LIST, 'active_uploads', {\n        success: false,\n        duration: performance.now() - startTime,\n        error: error as Error,\n      });\n\n      console.error('获取活跃上传列表失败:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 保存重试状态\n   * @param fileId 文件ID\n   * @param state 重试状态\n   */\n  async saveRetryState(fileId: string, state: IRetryState): Promise<void> {\n    if (!this.options.enabled) {\n      return;\n    }\n\n    const key = `retry_${fileId}`;\n    const startTime = performance.now();\n\n    try {\n      await this.adapter.save(key, state, this.options.expiration);\n\n      // 记录操作日志\n      this.logger.logOperation(StorageOperation.SAVE, key, {\n        success: true,\n        duration: performance.now() - startTime,\n        size: this.estimateObjectSize(state),\n      });\n    } catch (error) {\n      // 记录错误日志\n      this.logger.logOperation(StorageOperation.SAVE, key, {\n        success: false,\n        duration: performance.now() - startTime,\n        error: error as Error,\n      });\n\n      console.error('保存重试状态失败:', error);\n      throw new Error(`保存重试状态失败: ${(error as Error).message}`);\n    }\n  }\n\n  /**\n   * 获取重试状态\n   * @param fileId 文件ID\n   * @returns 重试状态或null\n   */\n  async getRetryState(fileId: string): Promise<IRetryState | null> {\n    if (!this.options.enabled) {\n      return null;\n    }\n\n    const key = `retry_${fileId}`;\n    const startTime = performance.now();\n\n    try {\n      const result = await this.adapter.get<IRetryState>(key);\n\n      // 记录操作日志\n      this.logger.logOperation(StorageOperation.GET, key, {\n        success: true,\n        duration: performance.now() - startTime,\n        size: result ? this.estimateObjectSize(result) : 0,\n      });\n\n      return result;\n    } catch (error) {\n      // 记录错误日志\n      this.logger.logOperation(StorageOperation.GET, key, {\n        success: false,\n        duration: performance.now() - startTime,\n        error: error as Error,\n      });\n\n      console.error('获取重试状态失败:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 创建存储适配器\n   * @returns 存储适配器实例\n   */\n  private createAdapter(): IStorageAdapter {\n    const startTime = performance.now();\n\n    try {\n      // 如果提供了自定义适配器，则使用它\n      if (this.options.adapter) {\n        this.logger.logOperation(StorageOperation.INIT, 'custom_adapter', {\n          success: true,\n          duration: performance.now() - startTime,\n        });\n        return this.options.adapter;\n      }\n\n      // 根据存储类型创建适配器\n      let adapter: IStorageAdapter;\n      switch (this.options.type) {\n        case StorageType.INDEXED_DB:\n          adapter = new IndexedDBAdapter(this.options);\n          break;\n        // 其他适配器类型可以在这里添加\n        default:\n          // 默认使用IndexedDB适配器\n          adapter = new IndexedDBAdapter(this.options);\n      }\n\n      this.logger.logOperation(StorageOperation.INIT, String(this.options.type), {\n        success: true,\n        duration: performance.now() - startTime,\n      });\n\n      return adapter;\n    } catch (error) {\n      this.logger.logOperation(StorageOperation.INIT, String(this.options.type), {\n        success: false,\n        duration: performance.now() - startTime,\n        error: error as Error,\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * 设置自动清理过期数据\n   */\n  private setupAutoClear(): void {\n    // 清理之前的计时器\n    if (this.autoClearInterval) {\n      clearInterval(this.autoClearInterval);\n      this.autoClearInterval = null;\n    }\n\n    // 如果启用了自动清理且在浏览器环境\n    if (this.options.enabled && this.options.autoClear && typeof window !== 'undefined') {\n      this.autoClearInterval = setInterval(\n        () => {\n          this.cleanupExpiredData().catch(error => {\n            console.error('自动清理过期数据失败:', error);\n          });\n        },\n        this.options.clearInterval || 30 * 60 * 1000,\n      ); // 默认每30分钟\n    }\n  }\n\n  /**\n   * 估算对象大小\n   * @param obj 要估算大小的对象\n   * @returns 估算的字节大小\n   */\n  private estimateObjectSize(obj: any): number {\n    if (obj === null || obj === undefined) return 0;\n\n    // 使用JSON序列化来估算大小\n    try {\n      return JSON.stringify(obj).length * 2; // UTF-16 编码每个字符2字节\n    } catch (error) {\n      return 0; // 无法序列化时返回0\n    }\n  }\n\n  /**\n   * 销毁存储管理器，清理资源\n   */\n  destroy(): void {\n    if (this.autoClearInterval) {\n      clearInterval(this.autoClearInterval);\n      this.autoClearInterval = null;\n    }\n  }\n\n  /**\n   * 设置日志记录器\n   * @param logger 核心包的Logger实例\n   */\n  setLogger(logger: any): void {\n    this.logger.setLogger(logger);\n  }\n\n  /**\n   * 启用调试日志\n   * @param debug 是否启用调试日志\n   */\n  setDebug(debug: boolean): void {\n    this.logger.setDebug(debug);\n  }\n}\n","import { IStorageOptions } from '@file-chunk-uploader/types';\n\n/**\n * 扩展的存储选项接口\n */\nexport interface IExtendedStorageOptions extends IStorageOptions {\n  /** 是否启用压缩 */\n  enableCompression?: boolean;\n\n  /** 压缩方法 'gzip' | 'deflate' | 'custom' */\n  compressionMethod?: 'gzip' | 'deflate' | 'custom';\n\n  /** 自定义压缩函数 */\n  compress?: (data: Blob) => Promise<Blob>;\n\n  /** 自定义解压函数 */\n  decompress?: (data: Blob) => Promise<Blob>;\n\n  /** 空间管理策略 */\n  spaceManagement?: {\n    /** 最大存储空间限制（字节）*/\n    maxStorageSize?: number;\n\n    /** 存储使用率警告阈值 (0-1) */\n    usageWarningThreshold?: number;\n\n    /** 存储满时的清理策略 'oldest' | 'largest' | 'lowest-priority' */\n    cleanupStrategy?: 'oldest' | 'largest' | 'lowest-priority';\n\n    /** 是否在到达警告阈值时主动清理 */\n    autoCleanOnWarning?: boolean;\n  };\n\n  /** 存储优先级选项 */\n  priorityOptions?: {\n    /** 默认优先级 (1-10, 10为最高) */\n    defaultPriority?: number;\n\n    /** 是否自动降级低优先级文件 */\n    enableAutoDemotion?: boolean;\n\n    /** 多长时间未访问后降级优先级 (毫秒) */\n    demotionThreshold?: number;\n  };\n\n  /** 版本迁移选项 */\n  migration?: {\n    /** 迁移处理器 */\n    migrators?: Record<number, (db: IDBDatabase) => Promise<void>>;\n\n    /** 是否启用自动迁移 */\n    autoMigrate?: boolean;\n  };\n}\n\n/**\n * 存储项元数据接口\n */\nexport interface IStorageItemMetadata {\n  /** 键 */\n  key: string;\n  /** 创建时间 */\n  createdAt: number;\n  /** 过期时间 */\n  expiresAt?: number;\n  /** 大小（字节） */\n  size: number;\n  /** 优先级 (1-10) */\n  priority: number;\n  /** 最后访问时间 */\n  lastAccessed: number;\n  /** 访问次数 */\n  accessCount: number;\n  /** 是否已压缩 */\n  compressed: boolean;\n  /** 压缩方法 */\n  compressionMethod?: string;\n  /** 原始大小（如果已压缩） */\n  originalSize?: number;\n  /** 文件ID (如果适用) */\n  fileId?: string;\n  /** 分片索引 (如果适用) */\n  chunkIndex?: number;\n}\n\n/**\n * 文件优先级信息接口\n */\nexport interface IFilePriorityInfo {\n  /** 文件ID */\n  fileId: string;\n  /** 优先级 (1-10) */\n  priority: number;\n  /** 更新时间 */\n  updatedAt: number;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @file-chunk-uploader/resume 基本使用示例\n * 演示如何使用断点续传功能上传文件\n */\nimport { EventEmitter } from '@file-chunk-uploader/core/src/events';\n\nimport { ResumeUploadStrategy, ChunkStatus } from '../src';\n\n// 模拟上传端点URL\n// const _UPLOAD_URL = 'https://api.example.com/upload';\n\n/**\n * 模拟HTTP请求上传分片\n * @param chunk 分片数据\n * @param index 分片索引\n * @param fileId 文件ID\n */\nasync function uploadChunk(chunk: Blob, index: number, fileId: string): Promise<void> {\n  // 创建FormData\n  const formData = new FormData();\n  formData.append('chunk', chunk);\n  formData.append('index', String(index));\n  formData.append('fileId', fileId);\n\n  // 模拟上传，实际应用中使用fetch或其他HTTP客户端\n  logToUI(`上传分片 ${index} (${chunk.size} bytes)...`);\n\n  // 模拟网络延迟\n  await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));\n\n  // 模拟偶发性失败（仅用于演示失败恢复）\n  if (Math.random() < 0.1) {\n    throw new Error(`分片 ${index} 上传失败（模拟错误）`);\n  }\n\n  logToUI(`分片 ${index} 上传成功`, 'success');\n}\n\n/**\n * 模拟API合并请求\n * @param fileId 文件ID\n * @param totalChunks 分片总数\n */\nasync function mergeChunks(fileId: string, totalChunks: number): Promise<void> {\n  logToUI(`请求服务器合并 ${totalChunks} 个分片...`);\n\n  // 模拟网络延迟\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  logToUI('文件合并成功，上传完成', 'success');\n}\n\n/**\n * 演示断点续传功能\n * @param file 要上传的文件\n */\nasync function demonstrateResumeUpload(file: File): Promise<void> {\n  // 使用全局事件总线或创建新的事件发射器\n  const myEventEmitter = new EventEmitter();\n\n  // 禁用上传按钮\n  const uploadButton = document.getElementById('uploadButton') as HTMLButtonElement;\n  uploadButton.disabled = true;\n\n  // 设置事件监听器\n  setupEventListeners(myEventEmitter);\n\n  // 创建续传策略\n  const resumeStrategy = new ResumeUploadStrategy({\n    storage: {\n      dbName: 'resume-upload-demo',\n      storeName: 'file-uploads',\n      version: 1,\n    },\n    maxConcurrentChunks: 3,\n    logger: console,\n  });\n\n  // 设置事件发射器\n  resumeStrategy.setEventEmitter(myEventEmitter);\n\n  try {\n    // 生成文件ID - 这里使用简单的哈希函数生成ID\n    const fileId = generateFileId(file);\n    logToUI(`文件ID: ${fileId}`);\n\n    // 检查是否有已保存的上传状态\n    const hasState = await checkHasUploadState(resumeStrategy, fileId);\n\n    if (hasState) {\n      // 恢复上传\n      logToUI('发现已保存的上传状态，准备恢复上传...', 'info');\n\n      // 获取上传状态\n      const uploadState = await getUploadState(resumeStrategy, fileId);\n      logToUI(\n        `恢复上传 \"${file.name}\"，` +\n          `已完成: ${uploadState?.uploadedChunks?.length || 0}/${\n            uploadState?.totalChunks || 0\n          } 分片`,\n      );\n\n      // 处理文件\n      const fileInfo = await processFile(file);\n\n      // 更新进度条\n      const initialProgress =\n        ((uploadState?.uploadedChunks?.length || 0) / fileInfo.totalChunks) * 100;\n      updateProgressBar(initialProgress);\n\n      // 上传剩余分片\n      await uploadRemainingChunks(\n        resumeStrategy,\n        fileId,\n        fileInfo.chunks,\n        uploadState?.uploadedChunks || [],\n      );\n    } else {\n      // 开始新上传\n      logToUI(`开始新上传: \"${file.name}\" (${formatSize(file.size)})`, 'info');\n\n      // 处理文件\n      const fileInfo = await processFile(file);\n      logToUI(\n        `文件已分为 ${fileInfo.totalChunks} 个分片，每个分片大小约为 ${formatSize(\n          fileInfo.chunkSize,\n        )}`,\n      );\n\n      // 上传所有分片\n      await uploadRemainingChunks(resumeStrategy, fileId, fileInfo.chunks, []);\n    }\n\n    // 完成上传，清理存储\n    await resumeStrategy.completeUpload(fileId);\n\n    // 模拟调用API合并分片\n    await mergeChunks(fileId, file.size);\n\n    // 更新UI\n    updateProgressBar(100);\n    logToUI('上传完成！', 'success');\n  } catch (error) {\n    logToUI(`上传过程中发生错误: ${(error as Error).message}`, 'error');\n    console.error('上传过程中发生错误:', error);\n  } finally {\n    // 销毁资源\n    resumeStrategy.destroy();\n\n    // 恢复上传按钮\n    uploadButton.disabled = false;\n  }\n}\n\n/**\n * 检查是否有上传状态\n * @param resumeStrategy 续传策略实例\n * @param fileId 文件ID\n */\nasync function checkHasUploadState(\n  resumeStrategy: ResumeUploadStrategy,\n  fileId: string,\n): Promise<boolean> {\n  // 由于storageManager是私有的，我们可以通过公开的API检查是否存在上传状态\n  // 这里使用resumeStrategy提供的公开方法或属性\n  const state = await getUploadState(resumeStrategy, fileId);\n  return !!state;\n}\n\n/**\n * 获取上传状态\n * @param resumeStrategy 续传策略实例\n * @param fileId 文件ID\n */\nasync function getUploadState(resumeStrategy: ResumeUploadStrategy, fileId: string): Promise<any> {\n  // 这里使用resumeStrategy提供的公开方法获取上传状态\n  // 假设通过getChunksDetails可以获取到分片详情\n  try {\n    const chunksDetails = await resumeStrategy.getChunksDetails(fileId);\n    if (chunksDetails && chunksDetails.length > 0) {\n      // 提取已上传的分片索引\n      const uploadedChunks = chunksDetails\n        .filter(chunk => chunk.status === ChunkStatus.SUCCESS)\n        .map(chunk => chunk.index);\n\n      return {\n        uploadedChunks,\n        totalChunks: chunksDetails.length,\n      };\n    }\n  } catch (error) {\n    console.log('获取上传状态失败:', error);\n  }\n  return null;\n}\n\n/**\n * 处理文件，将文件分为多个分片\n * @param file 文件对象\n * @returns 分片结果\n */\nasync function processFile(file: File) {\n  // 分片大小 1MB\n  const chunkSize = 1024 * 1024;\n  const chunks: Blob[] = [];\n\n  // 分片处理\n  for (let start = 0; start < file.size; start += chunkSize) {\n    const end = Math.min(start + chunkSize, file.size);\n    const chunk = file.slice(start, end);\n    chunks.push(chunk);\n  }\n\n  return {\n    chunks,\n    totalChunks: chunks.length,\n    chunkSize,\n  };\n}\n\n/**\n * 生成文件ID\n * @param file 文件对象\n * @returns 文件ID\n */\nfunction generateFileId(file: File): string {\n  // 使用文件名、大小和最后修改时间组合生成ID\n  const hashInput = `${file.name}-${file.size}-${file.lastModified}`;\n\n  // 简单哈希函数\n  let hash = 0;\n  for (let i = 0; i < hashInput.length; i++) {\n    const char = hashInput.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash; // 转换为32位整数\n  }\n\n  return Math.abs(hash).toString(16);\n}\n\n/**\n * 上传剩余的文件分片\n * @param resumeStrategy 续传策略实例\n * @param fileId 文件ID\n * @param chunks 所有分片\n * @param uploadedChunks 已上传的分片索引\n */\nasync function uploadRemainingChunks(\n  resumeStrategy: ResumeUploadStrategy,\n  fileId: string,\n  chunks: Blob[],\n  uploadedChunks: number[],\n): Promise<void> {\n  // 创建已上传分片集合，便于快速查找\n  const uploadedSet = new Set(uploadedChunks);\n\n  // 使用Promise.all并行上传，但限制并发数\n  const concurrency = 3;\n  let pending = 0;\n  const promises: Promise<void>[] = [];\n\n  // 更新进度条计算基础\n  let completedChunks = uploadedChunks.length;\n  const totalChunks = chunks.length;\n\n  // 更新初始进度\n  updateProgressBar((completedChunks / totalChunks) * 100);\n\n  for (let i = 0; i < chunks.length; i++) {\n    // 跳过已上传的分片\n    if (uploadedSet.has(i)) {\n      logToUI(`分片 ${i} 已上传，跳过`);\n      continue;\n    }\n\n    // 等待并发控制\n    if (pending >= concurrency) {\n      await Promise.race(promises);\n    }\n\n    // 上传分片\n    pending++;\n    const promise = (async (index: number) => {\n      try {\n        await uploadChunk(chunks[index], index, fileId);\n\n        // 保存上传进度\n        await resumeStrategy.updateChunkStatus(fileId, index, ChunkStatus.SUCCESS);\n\n        // 更新计数器和进度条\n        pending--;\n        completedChunks++;\n        updateProgressBar((completedChunks / totalChunks) * 100);\n      } catch (error) {\n        pending--;\n\n        // 记录失败，但不中断其他上传\n        logToUI(`分片 ${index} 上传失败: ${(error as Error).message}`, 'error');\n        await resumeStrategy.updateChunkStatus(\n          fileId,\n          index,\n          ChunkStatus.FAILED,\n          (error as Error).message,\n        );\n\n        // 重新抛出错误\n        throw error;\n      }\n    })(i);\n\n    // 添加到Promise数组\n    promises.push(promise);\n  }\n\n  // 等待所有上传完成\n  await Promise.allSettled(promises);\n\n  // 检查是否有失败的Promise\n  const failedCount = promises.length - uploadedChunks.length;\n  if (failedCount > 0) {\n    throw new Error(`${failedCount} 个分片上传失败，使用断点续传功能可以继续上传`);\n  }\n}\n\n/**\n * 设置事件监听器\n * @param eventEmitter 事件发射器\n */\nfunction setupEventListeners(eventEmitter: any): void {\n  eventEmitter.on('upload:progress', (data: any) => {\n    logToUI(`上传进度: ${Math.round(data.progress)}%`);\n    updateProgressBar(data.progress);\n  });\n\n  eventEmitter.on('upload:resume', (data: any) => {\n    logToUI(\n      `续传开始: \"${data.fileName}\", 已完成: ${data.uploadedChunks.length}/${data.totalChunks} 分片`,\n      'info',\n    );\n  });\n\n  eventEmitter.on('upload:complete', (data: any) => {\n    logToUI(`上传完成: \"${data.fileName}\"`, 'success');\n    updateProgressBar(100);\n  });\n\n  eventEmitter.on('upload:error', (data: any) => {\n    logToUI(`上传错误: ${data.error.message}`, 'error');\n  });\n\n  eventEmitter.on('storage:cleanup', (data: any) => {\n    logToUI(`清理存储: 删除了 ${data.count} 个过期状态`, 'info');\n  });\n}\n\n/**\n * 更新进度条\n * @param progress 进度值(0-100)\n */\nfunction updateProgressBar(progress: number): void {\n  const progressBar = document.getElementById('progressBar') as HTMLElement;\n  if (progressBar) {\n    progressBar.style.width = `${Math.round(progress)}%`;\n  }\n}\n\n/**\n * 向UI日志区域添加日志\n * @param message 日志信息\n * @param type 日志类型\n */\nfunction logToUI(message: string, type: 'info' | 'success' | 'error' | 'warning' = 'info'): void {\n  const logArea = document.getElementById('logArea');\n  if (logArea) {\n    const logEntry = document.createElement('div');\n    logEntry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;\n    logEntry.className = `log-entry ${type}`;\n    logArea.appendChild(logEntry);\n    logArea.scrollTop = logArea.scrollHeight; // 自动滚动到最新日志\n\n    // 同时在控制台输出\n    console.log(message);\n  }\n}\n\n/**\n * 格式化文件大小\n * @param bytes 字节数\n */\nfunction formatSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n// 在DOM加载完成后设置事件处理\ndocument.addEventListener('DOMContentLoaded', () => {\n  const fileInput = document.getElementById('fileInput') as HTMLInputElement;\n  const uploadButton = document.getElementById('uploadButton') as HTMLButtonElement;\n  const pauseButton = document.getElementById('pauseButton') as HTMLButtonElement;\n  const resumeButton = document.getElementById('resumeButton') as HTMLButtonElement;\n\n  // 初始化UI\n  logToUI('请选择一个文件进行上传', 'info');\n\n  // 上传按钮事件\n  uploadButton.addEventListener('click', async () => {\n    if (fileInput.files && fileInput.files.length > 0) {\n      const file = fileInput.files[0];\n\n      // 启用暂停按钮\n      pauseButton.disabled = false;\n\n      try {\n        await demonstrateResumeUpload(file);\n      } catch (error) {\n        logToUI(`上传失败: ${(error as Error).message}`, 'error');\n      } finally {\n        // 禁用暂停按钮\n        pauseButton.disabled = true;\n      }\n    } else {\n      logToUI('请先选择文件', 'warning');\n    }\n  });\n\n  // 文件选择事件\n  fileInput.addEventListener('change', () => {\n    if (fileInput.files && fileInput.files.length > 0) {\n      const file = fileInput.files[0];\n      logToUI(`已选择文件: ${file.name} (${formatSize(file.size)})`, 'info');\n      uploadButton.disabled = false;\n    }\n  });\n\n  // 暂停按钮和恢复按钮事件 - 在实际应用中实现\n  pauseButton.addEventListener('click', () => {\n    logToUI('暂停功能在这个简化示例中未实现', 'warning');\n  });\n\n  resumeButton.addEventListener('click', () => {\n    logToUI('恢复功能在这个简化示例中未实现', 'warning');\n  });\n});\n"],"names":[],"sourceRoot":""}